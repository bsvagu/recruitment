{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# RecruitPortal\n\n## Overview\n\nRecruitPortal is a full-stack recruitment management system built with TypeScript, featuring comprehensive company and contact management capabilities. The application provides CRUD operations for companies and contacts with advanced search, filtering, and relationship management features. It follows LinkedIn-inspired field structures and includes extensible custom field definitions for dynamic data requirements.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with Vite for fast development and building\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Form Handling**: React Hook Form with Zod validation for type-safe form validation\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for theming\n\n### Backend Architecture\n- **Server**: Express.js with TypeScript for the REST API\n- **ORM**: Drizzle ORM for type-safe database operations\n- **Validation**: Zod schemas for runtime validation and type inference\n- **API Design**: RESTful endpoints with consistent response patterns including pagination, search, and filtering\n- **File Structure**: Modular route handlers separated by entity type (companies, contacts, auth, field-definitions)\n\n### Database Design\n- **Database**: PostgreSQL with UUID primary keys for scalability\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Core Entities**:\n  - Companies: Comprehensive business information including legal details, industry classification, and lifecycle stages\n  - Contacts: Personal and professional information with company relationships\n  - Addresses: Reusable address components for both companies and contacts\n  - Communications: Email and phone number management with type classification\n  - Field Definitions: Dynamic custom field system for extensibility\n- **Soft Deletion**: isDeleted flag pattern for data retention\n- **Polymorphic Relationships**: Address, email, and phone entities can be associated with multiple entity types\n\n### Authentication & Authorization\n- **User Management**: Role-based access control with admin, manager, recruiter, and viewer roles\n- **Authentication**: bcryptjs for password hashing with session-based authentication\n- **Authorization**: Role-based permissions for different operations (view, edit, delete)\n\n### Data Management Features\n- **Search**: Full-text search across multiple fields with keyword matching\n- **Filtering**: Structured filters for industry, company type, employee count, status, location\n- **Pagination**: Cursor-based pagination for efficient large dataset handling\n- **Sorting**: Multi-field sorting with configurable sort orders\n- **Extensibility**: Custom field definitions allow dynamic schema extensions without migrations\n\n### UI/UX Design Patterns\n- **Responsive Design**: Mobile-first approach with Tailwind CSS breakpoints\n- **Component Library**: Consistent design system using shadcn/ui components\n- **Data Tables**: Reusable DataTable component with sorting, filtering, and pagination\n- **Form Management**: Standardized form patterns with validation feedback\n- **Modal Patterns**: Dialog-based forms for create/edit operations\n- **Navigation**: Tab-based detail views with related entity management\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **@neondatabase/serverless**: Neon PostgreSQL serverless driver for database connectivity\n- **drizzle-orm**: Type-safe ORM with PostgreSQL dialect\n- **@tanstack/react-query**: Server state management and caching for React\n- **@radix-ui/***: Headless UI components for accessibility-compliant interfaces\n- **wouter**: Lightweight React router for client-side navigation\n\n### Development Tools\n- **Vite**: Build tool and development server with HMR support\n- **TypeScript**: Static type checking across frontend and backend\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **Tailwind CSS**: Utility-first CSS framework with PostCSS processing\n\n### Data Processing\n- **Zod**: Schema validation and type inference for runtime safety\n- **React Hook Form**: Performant form library with minimal re-renders\n- **bcryptjs**: Password hashing for secure authentication\n- **date-fns**: Date manipulation and formatting utilities\n\n### UI Enhancement Libraries\n- **class-variance-authority**: Type-safe CSS class composition\n- **clsx**: Conditional CSS class name utility\n- **cmdk**: Command palette and search interface component\n- **lucide-react**: Modern icon library with React components\n\n### Country Data\n- **Static JSON**: Country reference data with ISO codes, names, and flag emojis for international address support","size_bytes":4918},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n  \textend: {\n  \t\tborderRadius: {\n  \t\t\tlg: 'var(--radius)',\n  \t\t\tmd: 'calc(var(--radius) - 2px)',\n  \t\t\tsm: 'calc(var(--radius) - 4px)'\n  \t\t},\n  \t\tcolors: {\n  \t\t\tbackground: 'var(--background)',\n  \t\t\tforeground: 'var(--foreground)',\n  \t\t\tcard: {\n  \t\t\t\tDEFAULT: 'var(--card)',\n  \t\t\t\tforeground: 'var(--card-foreground)'\n  \t\t\t},\n  \t\t\tpopover: {\n  \t\t\t\tDEFAULT: 'var(--popover)',\n  \t\t\t\tforeground: 'var(--popover-foreground)'\n  \t\t\t},\n  \t\t\tprimary: {\n  \t\t\t\tDEFAULT: 'var(--primary)',\n  \t\t\t\tforeground: 'var(--primary-foreground)'\n  \t\t\t},\n  \t\t\tsecondary: {\n  \t\t\t\tDEFAULT: 'var(--secondary)',\n  \t\t\t\tforeground: 'var(--secondary-foreground)'\n  \t\t\t},\n  \t\t\tmuted: {\n  \t\t\t\tDEFAULT: 'var(--muted)',\n  \t\t\t\tforeground: 'var(--muted-foreground)'\n  \t\t\t},\n  \t\t\taccent: {\n  \t\t\t\tDEFAULT: 'var(--accent)',\n  \t\t\t\tforeground: 'var(--accent-foreground)'\n  \t\t\t},\n  \t\t\tdestructive: {\n  \t\t\t\tDEFAULT: 'var(--destructive)',\n  \t\t\t\tforeground: 'var(--destructive-foreground)'\n  \t\t\t},\n  \t\t\tborder: 'var(--border)',\n  \t\t\tinput: 'var(--input)',\n  \t\t\tring: 'var(--ring)',\n  \t\t\tchart: {\n  \t\t\t\t'1': 'var(--chart-1)',\n  \t\t\t\t'2': 'var(--chart-2)',\n  \t\t\t\t'3': 'var(--chart-3)',\n  \t\t\t\t'4': 'var(--chart-4)',\n  \t\t\t\t'5': 'var(--chart-5)'\n  \t\t\t},\n  \t\t\tsidebar: {\n  \t\t\t\tDEFAULT: 'var(--sidebar-background)',\n  \t\t\t\tforeground: 'var(--sidebar-foreground)',\n  \t\t\t\tprimary: 'var(--sidebar-primary)',\n  \t\t\t\t'primary-foreground': 'var(--sidebar-primary-foreground)',\n  \t\t\t\taccent: 'var(--sidebar-accent)',\n  \t\t\t\t'accent-foreground': 'var(--sidebar-accent-foreground)',\n  \t\t\t\tborder: 'var(--sidebar-border)',\n  \t\t\t\tring: 'var(--sidebar-ring)'\n  \t\t\t}\n  \t\t},\n  \t\tfontFamily: {\n  \t\t\tsans: [\n  \t\t\t\t'var(--font-sans)'\n  \t\t\t],\n  \t\t\tserif: [\n  \t\t\t\t'var(--font-serif)'\n  \t\t\t],\n  \t\t\tmono: [\n  \t\t\t\t'var(--font-mono)'\n  \t\t\t]\n  \t\t},\n  \t\tkeyframes: {\n  \t\t\t'accordion-down': {\n  \t\t\t\tfrom: {\n  \t\t\t\t\theight: '0'\n  \t\t\t\t},\n  \t\t\t\tto: {\n  \t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n  \t\t\t\t}\n  \t\t\t},\n  \t\t\t'accordion-up': {\n  \t\t\t\tfrom: {\n  \t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n  \t\t\t\t},\n  \t\t\t\tto: {\n  \t\t\t\t\theight: '0'\n  \t\t\t\t}\n  \t\t\t}\n  \t\t},\n  \t\tanimation: {\n  \t\t\t'accordion-down': 'accordion-down 0.2s ease-out',\n  \t\t\t'accordion-up': 'accordion-up 0.2s ease-out'\n  \t\t},\n  \t\tsidebar: {\n  \t\t\tDEFAULT: 'hsl(var(--sidebar-background))',\n  \t\t\tforeground: 'hsl(var(--sidebar-foreground))',\n  \t\t\tprimary: 'hsl(var(--sidebar-primary))',\n  \t\t\t'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n  \t\t\taccent: 'hsl(var(--sidebar-accent))',\n  \t\t\t'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n  \t\t\tborder: 'hsl(var(--sidebar-border))',\n  \t\t\tring: 'hsl(var(--sidebar-ring))'\n  \t\t}\n  \t}\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2922},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertCompanySchema, insertContactSchema, insertUserSchema, insertAddressSchema, insertEmailSchema, insertPhoneSchema, insertFieldDefinitionSchema, insertJobSchema, insertJobApplicationSchema, insertInterviewSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport bcrypt from \"bcryptjs\";\n\nconst getCompaniesQuerySchema = z.object({\n  q: z.string().optional(),\n  industry: z.string().optional(),\n  companyType: z.string().optional(),\n  employeeCountRange: z.string().optional(),\n  recordStatus: z.string().optional(),\n  country: z.string().optional(),\n  sort: z.string().default(\"updatedAt:desc\"),\n  limit: z.coerce.number().min(1).max(100).default(25),\n  cursor: z.string().optional(),\n  includeDeleted: z.coerce.boolean().default(false),\n  include: z.string().optional(),\n});\n\nconst getContactsQuerySchema = z.object({\n  q: z.string().optional(),\n  companyId: z.string().optional(),\n  seniority: z.string().optional(),\n  lifecycleStage: z.string().optional(),\n  recordStatus: z.string().optional(),\n  country: z.string().optional(),\n  sort: z.string().default(\"updatedAt:desc\"),\n  limit: z.coerce.number().min(1).max(100).default(25),\n  cursor: z.string().optional(),\n  includeDeleted: z.coerce.boolean().default(false),\n  include: z.string().optional(),\n});\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nconst registerSchema = insertUserSchema.extend({\n  password: z.string().min(6),\n});\n\nconst getFieldDefinitionsQuerySchema = z.object({\n  entityType: z.string().optional(),\n});\n\nconst getJobsQuerySchema = z.object({\n  q: z.string().optional(),\n  status: z.string().optional(),\n  employmentType: z.string().optional(),\n  department: z.string().optional(),\n  location: z.string().optional(),\n  priority: z.string().optional(),\n  isRemote: z.coerce.boolean().optional(),\n  sort: z.string().default(\"updatedAt:desc\"),\n  limit: z.coerce.number().min(1).max(100).default(25),\n  cursor: z.string().optional(),\n  includeDeleted: z.coerce.boolean().default(false),\n});\n\nconst getAnalyticsQuerySchema = z.object({\n  range: z.string().default(\"30d\"),\n  metrics: z.string().optional(),\n  groupBy: z.string().optional(),\n});\n\nconst getReportsQuerySchema = z.object({\n  q: z.string().optional(),\n  category: z.string().optional(),\n  type: z.string().optional(),\n  sort: z.string().default(\"updatedAt:desc\"),\n  limit: z.coerce.number().min(1).max(100).default(25),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // AUTH ROUTES\n  app.post(\"/api/auth/login\", async (req: Request, res: Response) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.isActive) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const validPassword = await bcrypt.compare(password, user.password);\n      if (!validPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ \n        data: userWithoutPassword,\n        message: \"Login successful\" \n      });\n    } catch (error) {\n      console.error(\"Error during login:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid login data\" : \"Login failed\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  app.post(\"/api/auth/register\", async (req: Request, res: Response) => {\n    try {\n      const userData = registerSchema.parse(req.body);\n      \n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(409).json({ message: \"User already exists\" });\n      }\n\n      const existingUsername = await storage.getUserByUsername(userData.username);\n      if (existingUsername) {\n        return res.status(409).json({ message: \"Username already taken\" });\n      }\n\n      const hashedPassword = await bcrypt.hash(userData.password, 12);\n      \n      const user = await storage.createUser({\n        ...userData,\n        password: hashedPassword,\n      });\n\n      const { password: _, ...userWithoutPassword } = user;\n      res.status(201).json({ \n        data: userWithoutPassword,\n        message: \"User created successfully\" \n      });\n    } catch (error) {\n      console.error(\"Error during registration:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid registration data\" : \"Registration failed\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  app.get(\"/api/auth/me\", async (req: Request, res: Response) => {\n    res.status(401).json({ message: \"Not implemented - requires session management\" });\n  });\n\n  app.post(\"/api/auth/logout\", async (req: Request, res: Response) => {\n    res.json({ message: \"Logged out successfully\" });\n  });\n\n  // COMPANY ROUTES\n  app.get(\"/api/companies\", async (req: Request, res: Response) => {\n    try {\n      const params = getCompaniesQuerySchema.parse(req.query);\n      const result = await storage.getCompanies(params);\n      \n      const nextCursor = result.hasNext && result.companies.length > 0 \n        ? result.companies[result.companies.length - 1].updatedAt.toISOString()\n        : null;\n\n      res.json({\n        data: result.companies,\n        meta: {\n          count: result.companies.length,\n          total: result.total,\n          hasNext: result.hasNext,\n        },\n        links: {\n          next: nextCursor ? `/api/companies?cursor=${nextCursor}&limit=${params.limit}` : null,\n        },\n      });\n    } catch (error) {\n      console.error(\"Error fetching companies:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid query parameters\" : \"Failed to fetch companies\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  app.get(\"/api/companies/:id\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const { include } = req.query;\n      \n      const includeRelated = include ? include.toString().split(\",\").some(i => [\"addresses\", \"emails\", \"phones\", \"contacts\"].includes(i)) : false;\n      const company = await storage.getCompany(id, includeRelated);\n      \n      if (!company) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n\n      let responseData: any = company;\n\n      if (include) {\n        const includeFields = include.toString().split(\",\");\n        const related: any = {};\n\n        if (includeFields.includes(\"addresses\")) {\n          related.addresses = await storage.getAddresses(\"company\", id);\n        }\n        if (includeFields.includes(\"emails\")) {\n          related.emails = await storage.getEmails(\"company\", id);\n        }\n        if (includeFields.includes(\"phones\")) {\n          related.phones = await storage.getPhones(\"company\", id);\n        }\n        if (includeFields.includes(\"contacts\")) {\n          const contactsResult = await storage.getContacts({ companyId: id, limit: 100 });\n          related.contacts = contactsResult.contacts;\n        }\n\n        responseData = { ...company, ...related };\n      }\n\n      res.json({ data: responseData });\n    } catch (error) {\n      console.error(\"Error fetching company:\", error);\n      res.status(500).json({ message: \"Failed to fetch company\" });\n    }\n  });\n\n  app.post(\"/api/companies\", async (req: Request, res: Response) => {\n    try {\n      const companyData = insertCompanySchema.parse(req.body);\n      const company = await storage.createCompany(companyData);\n      \n      res.status(201).json({ data: company });\n    } catch (error) {\n      console.error(\"Error creating company:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid company data\" : \"Failed to create company\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  app.patch(\"/api/companies/:id\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const updateData = insertCompanySchema.partial().parse(req.body);\n      \n      const company = await storage.updateCompany(id, updateData);\n      \n      if (!company) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n\n      res.json({ data: company });\n    } catch (error) {\n      console.error(\"Error updating company:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid company data\" : \"Failed to update company\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  app.delete(\"/api/companies/:id\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteCompany(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting company:\", error);\n      res.status(500).json({ message: \"Failed to delete company\" });\n    }\n  });\n\n  app.post(\"/api/companies/:id/addresses\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const addressData = insertAddressSchema.parse({\n        ...req.body,\n        entityType: \"company\",\n        entityId: id,\n      });\n      \n      const address = await storage.createAddress(addressData);\n      res.status(201).json({ data: address });\n    } catch (error) {\n      console.error(\"Error creating address:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid address data\" : \"Failed to create address\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  app.post(\"/api/companies/:id/emails\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const emailData = insertEmailSchema.parse({\n        ...req.body,\n        entityType: \"company\",\n        entityId: id,\n      });\n      \n      const email = await storage.createEmail(emailData);\n      res.status(201).json({ data: email });\n    } catch (error) {\n      console.error(\"Error creating email:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid email data\" : \"Failed to create email\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  app.post(\"/api/companies/:id/phones\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const phoneData = insertPhoneSchema.parse({\n        ...req.body,\n        entityType: \"company\",\n        entityId: id,\n      });\n      \n      const phone = await storage.createPhone(phoneData);\n      res.status(201).json({ data: phone });\n    } catch (error) {\n      console.error(\"Error creating phone:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid phone data\" : \"Failed to create phone\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // CONTACT ROUTES\n  app.get(\"/api/contacts\", async (req: Request, res: Response) => {\n    try {\n      const params = getContactsQuerySchema.parse(req.query);\n      const result = await storage.getContacts(params);\n      \n      const nextCursor = result.hasNext && result.contacts.length > 0 \n        ? result.contacts[result.contacts.length - 1].updatedAt.toISOString()\n        : null;\n\n      res.json({\n        data: result.contacts,\n        meta: {\n          count: result.contacts.length,\n          total: result.total,\n          hasNext: result.hasNext,\n        },\n        links: {\n          next: nextCursor ? `/api/contacts?cursor=${nextCursor}&limit=${params.limit}` : null,\n        },\n      });\n    } catch (error) {\n      console.error(\"Error fetching contacts:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid query parameters\" : \"Failed to fetch contacts\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  app.get(\"/api/contacts/:id\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const { include } = req.query;\n      \n      const includeRelated = include ? include.toString().split(\",\").some(i => [\"addresses\", \"emails\", \"phones\", \"company\"].includes(i)) : false;\n      const contact = await storage.getContact(id, includeRelated);\n      \n      if (!contact) {\n        return res.status(404).json({ message: \"Contact not found\" });\n      }\n\n      let responseData: any = contact;\n\n      if (include) {\n        const includeFields = include.toString().split(\",\");\n        const related: any = {};\n\n        if (includeFields.includes(\"addresses\")) {\n          related.addresses = await storage.getAddresses(\"contact\", id);\n        }\n        if (includeFields.includes(\"emails\")) {\n          related.emails = await storage.getEmails(\"contact\", id);\n        }\n        if (includeFields.includes(\"phones\")) {\n          related.phones = await storage.getPhones(\"contact\", id);\n        }\n        if (includeFields.includes(\"company\") && contact.companyId) {\n          related.company = await storage.getCompany(contact.companyId);\n        }\n\n        responseData = { ...contact, ...related };\n      }\n\n      res.json({ data: responseData });\n    } catch (error) {\n      console.error(\"Error fetching contact:\", error);\n      res.status(500).json({ message: \"Failed to fetch contact\" });\n    }\n  });\n\n  app.post(\"/api/contacts\", async (req: Request, res: Response) => {\n    try {\n      const contactData = insertContactSchema.parse(req.body);\n      const contact = await storage.createContact(contactData);\n      \n      res.status(201).json({ data: contact });\n    } catch (error) {\n      console.error(\"Error creating contact:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid contact data\" : \"Failed to create contact\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  app.patch(\"/api/contacts/:id\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const updateData = insertContactSchema.partial().parse(req.body);\n      \n      const contact = await storage.updateContact(id, updateData);\n      \n      if (!contact) {\n        return res.status(404).json({ message: \"Contact not found\" });\n      }\n\n      res.json({ data: contact });\n    } catch (error) {\n      console.error(\"Error updating contact:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid contact data\" : \"Failed to update contact\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  app.delete(\"/api/contacts/:id\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteContact(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Contact not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting contact:\", error);\n      res.status(500).json({ message: \"Failed to delete contact\" });\n    }\n  });\n\n  app.post(\"/api/contacts/:id/addresses\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const addressData = insertAddressSchema.parse({\n        ...req.body,\n        entityType: \"contact\",\n        entityId: id,\n      });\n      \n      const address = await storage.createAddress(addressData);\n      res.status(201).json({ data: address });\n    } catch (error) {\n      console.error(\"Error creating address:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid address data\" : \"Failed to create address\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  app.post(\"/api/contacts/:id/emails\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const emailData = insertEmailSchema.parse({\n        ...req.body,\n        entityType: \"contact\",\n        entityId: id,\n      });\n      \n      const email = await storage.createEmail(emailData);\n      res.status(201).json({ data: email });\n    } catch (error) {\n      console.error(\"Error creating email:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid email data\" : \"Failed to create email\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  app.post(\"/api/contacts/:id/phones\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const phoneData = insertPhoneSchema.parse({\n        ...req.body,\n        entityType: \"contact\",\n        entityId: id,\n      });\n      \n      const phone = await storage.createPhone(phoneData);\n      res.status(201).json({ data: phone });\n    } catch (error) {\n      console.error(\"Error creating phone:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid phone data\" : \"Failed to create phone\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // FIELD DEFINITION ROUTES\n  app.get(\"/api/field-definitions\", async (req: Request, res: Response) => {\n    try {\n      const { entityType } = getFieldDefinitionsQuerySchema.parse(req.query);\n      const fieldDefinitions = await storage.getFieldDefinitions(entityType);\n      \n      res.json({ data: fieldDefinitions });\n    } catch (error) {\n      console.error(\"Error fetching field definitions:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid query parameters\" : \"Failed to fetch field definitions\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  app.post(\"/api/field-definitions\", async (req: Request, res: Response) => {\n    try {\n      const fieldDefData = insertFieldDefinitionSchema.parse(req.body);\n      const fieldDefinition = await storage.createFieldDefinition(fieldDefData);\n      \n      res.status(201).json({ data: fieldDefinition });\n    } catch (error) {\n      console.error(\"Error creating field definition:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid field definition data\" : \"Failed to create field definition\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  app.patch(\"/api/field-definitions/:id\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const updateData = insertFieldDefinitionSchema.partial().parse(req.body);\n      \n      const fieldDefinition = await storage.updateFieldDefinition(id, updateData);\n      \n      if (!fieldDefinition) {\n        return res.status(404).json({ message: \"Field definition not found\" });\n      }\n\n      res.json({ data: fieldDefinition });\n    } catch (error) {\n      console.error(\"Error updating field definition:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid field definition data\" : \"Failed to update field definition\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  app.delete(\"/api/field-definitions/:id\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteFieldDefinition(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Field definition not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting field definition:\", error);\n      res.status(500).json({ message: \"Failed to delete field definition\" });\n    }\n  });\n\n  // JOBS ROUTES\n  app.get(\"/api/jobs\", async (req: Request, res: Response) => {\n    try {\n      const query = getJobsQuerySchema.parse(req.query);\n      // Mock data for now - replace with actual storage calls\n      const jobs: any[] = [];\n      \n      res.json({ \n        data: jobs,\n        meta: {\n          count: jobs.length,\n          total: jobs.length,\n          hasNext: false,\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching jobs:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid query parameters\" : \"Failed to fetch jobs\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  app.post(\"/api/jobs\", async (req: Request, res: Response) => {\n    try {\n      const jobData = insertJobSchema.parse(req.body);\n      // Mock response for now - replace with actual storage call\n      const job = { id: \"job_1\", ...jobData, createdAt: new Date(), updatedAt: new Date() };\n      \n      res.status(201).json({ data: job });\n    } catch (error) {\n      console.error(\"Error creating job:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid job data\" : \"Failed to create job\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // ANALYTICS ROUTES\n  app.get(\"/api/analytics\", async (req: Request, res: Response) => {\n    try {\n      const query = getAnalyticsQuerySchema.parse(req.query);\n      \n      // Mock analytics data\n      const analytics = {\n        metrics: {\n          totalJobs: 156,\n          activeJobs: 89,\n          totalApplications: 2847,\n          hiredCandidates: 42,\n          avgTimeToHire: 18,\n          conversionRate: 0.128,\n        },\n        charts: {\n          applicationsOverTime: [],\n          hiringFunnel: [],\n          sourceBreakdown: [],\n          performanceMetrics: [],\n        }\n      };\n      \n      res.json({ data: analytics });\n    } catch (error) {\n      console.error(\"Error fetching analytics:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid query parameters\" : \"Failed to fetch analytics\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // REPORTS ROUTES\n  app.get(\"/api/reports\", async (req: Request, res: Response) => {\n    try {\n      const query = getReportsQuerySchema.parse(req.query);\n      \n      // Mock reports data\n      const reports: any[] = [];\n      \n      res.json({ \n        data: reports,\n        meta: {\n          count: reports.length,\n          total: reports.length,\n          hasNext: false,\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching reports:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid query parameters\" : \"Failed to fetch reports\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  app.post(\"/api/reports\", async (req: Request, res: Response) => {\n    try {\n      // Mock report creation for now\n      const reportData = req.body;\n      const report = { \n        id: \"report_1\", \n        ...reportData, \n        createdAt: new Date(), \n        updatedAt: new Date() \n      };\n      \n      res.status(201).json({ data: report });\n    } catch (error) {\n      console.error(\"Error creating report:\", error);\n      res.status(400).json({ \n        message: \"Failed to create report\"\n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":23747},"server/storage.ts":{"content":"import { \n  users, companies, contacts, addresses, emails, phones, fieldDefinitions,\n  type User, type InsertUser, type Company, type InsertCompany, \n  type Contact, type InsertContact, type Address, type InsertAddress,\n  type Email, type InsertEmail, type Phone, type InsertPhone,\n  type FieldDefinition, type InsertFieldDefinition\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, or, like, ilike, desc, asc, isNull, sql, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User | undefined>;\n\n  // Company methods\n  getCompany(id: string, includeRelated?: boolean): Promise<Company | undefined>;\n  getCompanies(params: GetCompaniesParams): Promise<{ companies: Company[]; hasNext: boolean; total: number }>;\n  createCompany(company: InsertCompany): Promise<Company>;\n  updateCompany(id: string, company: Partial<InsertCompany>): Promise<Company | undefined>;\n  deleteCompany(id: string): Promise<boolean>;\n\n  // Contact methods\n  getContact(id: string, includeRelated?: boolean): Promise<Contact | undefined>;\n  getContacts(params: GetContactsParams): Promise<{ contacts: Contact[]; hasNext: boolean; total: number }>;\n  createContact(contact: InsertContact): Promise<Contact>;\n  updateContact(id: string, contact: Partial<InsertContact>): Promise<Contact | undefined>;\n  deleteContact(id: string): Promise<boolean>;\n\n  // Address methods\n  getAddresses(entityType: string, entityId: string): Promise<Address[]>;\n  createAddress(address: InsertAddress): Promise<Address>;\n  updateAddress(id: string, address: Partial<InsertAddress>): Promise<Address | undefined>;\n  deleteAddress(id: string): Promise<boolean>;\n\n  // Email methods\n  getEmails(entityType: string, entityId: string): Promise<Email[]>;\n  createEmail(email: InsertEmail): Promise<Email>;\n  updateEmail(id: string, email: Partial<InsertEmail>): Promise<Email | undefined>;\n  deleteEmail(id: string): Promise<boolean>;\n\n  // Phone methods\n  getPhones(entityType: string, entityId: string): Promise<Phone[]>;\n  createPhone(phone: InsertPhone): Promise<Phone>;\n  updatePhone(id: string, phone: Partial<InsertPhone>): Promise<Phone | undefined>;\n  deletePhone(id: string): Promise<boolean>;\n\n  // Field definition methods\n  getFieldDefinitions(entityType?: string): Promise<FieldDefinition[]>;\n  createFieldDefinition(fieldDef: InsertFieldDefinition): Promise<FieldDefinition>;\n  updateFieldDefinition(id: string, fieldDef: Partial<InsertFieldDefinition>): Promise<FieldDefinition | undefined>;\n  deleteFieldDefinition(id: string): Promise<boolean>;\n}\n\nexport interface GetCompaniesParams {\n  q?: string;\n  industry?: string;\n  companyType?: string;\n  employeeCountRange?: string;\n  recordStatus?: string;\n  country?: string;\n  sort?: string;\n  limit?: number;\n  cursor?: string;\n  includeDeleted?: boolean;\n}\n\nexport interface GetContactsParams {\n  q?: string;\n  companyId?: string;\n  seniority?: string;\n  lifecycleStage?: string;\n  recordStatus?: string;\n  country?: string;\n  sort?: string;\n  limit?: number;\n  cursor?: string;\n  includeDeleted?: boolean;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updateUser: Partial<InsertUser>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updateUser, updatedAt: sql`now()` })\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async getCompany(id: string, includeRelated = false): Promise<Company | undefined> {\n    if (includeRelated) {\n      const result = await db.query.companies.findFirst({\n        where: eq(companies.id, id),\n        with: {\n          addresses: true,\n          emails: true,\n          phones: true,\n          contacts: true,\n        },\n      });\n      return result || undefined;\n    }\n\n    const [company] = await db.select().from(companies).where(eq(companies.id, id));\n    return company || undefined;\n  }\n\n  async getCompanies(params: GetCompaniesParams): Promise<{ companies: Company[]; hasNext: boolean; total: number }> {\n    const {\n      q,\n      industry,\n      companyType,\n      employeeCountRange,\n      recordStatus,\n      country,\n      sort = \"updatedAt:desc\",\n      limit = 25,\n      cursor,\n      includeDeleted = false,\n    } = params;\n\n    let query = db.select().from(companies);\n    const conditions = [];\n\n    // Base condition - exclude deleted unless specified\n    if (!includeDeleted) {\n      conditions.push(eq(companies.isDeleted, false));\n    }\n\n    // Search query\n    if (q) {\n      conditions.push(\n        or(\n          ilike(companies.name, `%${q}%`),\n          ilike(companies.legalName, `%${q}%`),\n          sql`${companies.emailDomains} @> ARRAY[${q}]`,\n          ilike(companies.description, `%${q}%`)\n        )\n      );\n    }\n\n    // Filters\n    if (industry) conditions.push(eq(companies.industry, industry as any));\n    if (companyType) conditions.push(eq(companies.companyType, companyType as any));\n    if (employeeCountRange) conditions.push(eq(companies.employeeCountRange, employeeCountRange as any));\n    if (recordStatus) conditions.push(eq(companies.recordStatus, recordStatus as any));\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    // Country filter (requires join with addresses)\n    if (country) {\n      query = query\n        .leftJoin(addresses, and(\n          eq(addresses.entityType, \"company\"),\n          eq(addresses.entityId, companies.id)\n        ))\n        .where(and(\n          ...conditions,\n          eq(addresses.countryCode, country)\n        ));\n    }\n\n    // Cursor pagination\n    if (cursor) {\n      conditions.push(sql`${companies.updatedAt} < ${cursor}`);\n    }\n\n    // Sorting\n    const [sortField, sortOrder] = sort.split(\":\");\n    const orderBy = sortOrder === \"desc\" ? desc : asc;\n\n    switch (sortField) {\n      case \"name\":\n        query = query.orderBy(orderBy(companies.name));\n        break;\n      case \"createdAt\":\n        query = query.orderBy(orderBy(companies.createdAt));\n        break;\n      default:\n        query = query.orderBy(orderBy(companies.updatedAt));\n    }\n\n    // Apply limit + 1 to check for next page\n    query = query.limit(limit + 1);\n\n    const results = await query;\n    const hasNext = results.length > limit;\n    const companyResults = hasNext ? results.slice(0, -1) : results;\n\n    // Get total count\n    const [totalResult] = await db\n      .select({ count: count() })\n      .from(companies)\n      .where(includeDeleted ? undefined : eq(companies.isDeleted, false));\n\n    return {\n      companies: companyResults.map(r => 'companies' in r ? r.companies : r),\n      hasNext,\n      total: totalResult.count,\n    };\n  }\n\n  async createCompany(insertCompany: InsertCompany): Promise<Company> {\n    const [company] = await db.insert(companies).values(insertCompany).returning();\n    return company;\n  }\n\n  async updateCompany(id: string, updateCompany: Partial<InsertCompany>): Promise<Company | undefined> {\n    const [company] = await db\n      .update(companies)\n      .set({ ...updateCompany, updatedAt: sql`now()` })\n      .where(eq(companies.id, id))\n      .returning();\n    return company || undefined;\n  }\n\n  async deleteCompany(id: string): Promise<boolean> {\n    const [result] = await db\n      .update(companies)\n      .set({ isDeleted: true, updatedAt: sql`now()` })\n      .where(eq(companies.id, id))\n      .returning();\n    return !!result;\n  }\n\n  async getContact(id: string, includeRelated = false): Promise<Contact | undefined> {\n    if (includeRelated) {\n      const result = await db.query.contacts.findFirst({\n        where: eq(contacts.id, id),\n        with: {\n          company: true,\n          addresses: true,\n          emails: true,\n          phones: true,\n        },\n      });\n      return result || undefined;\n    }\n\n    const [contact] = await db.select().from(contacts).where(eq(contacts.id, id));\n    return contact || undefined;\n  }\n\n  async getContacts(params: GetContactsParams): Promise<{ contacts: Contact[]; hasNext: boolean; total: number }> {\n    const {\n      q,\n      companyId,\n      seniority,\n      lifecycleStage,\n      recordStatus,\n      country,\n      sort = \"updatedAt:desc\",\n      limit = 25,\n      cursor,\n      includeDeleted = false,\n    } = params;\n\n    let query = db.select().from(contacts);\n    const conditions = [];\n\n    // Base condition - exclude deleted unless specified\n    if (!includeDeleted) {\n      conditions.push(eq(contacts.isDeleted, false));\n    }\n\n    // Search query\n    if (q) {\n      conditions.push(\n        or(\n          ilike(contacts.firstName, `%${q}%`),\n          ilike(contacts.lastName, `%${q}%`),\n          ilike(contacts.title, `%${q}%`),\n          ilike(contacts.headline, `%${q}%`),\n          ilike(contacts.companyNameSnapshot, `%${q}%`)\n        )\n      );\n    }\n\n    // Filters\n    if (companyId) conditions.push(eq(contacts.companyId, companyId));\n    if (seniority) conditions.push(eq(contacts.seniority, seniority as any));\n    if (lifecycleStage) conditions.push(eq(contacts.lifecycleStage, lifecycleStage as any));\n    if (recordStatus) conditions.push(eq(contacts.recordStatus, recordStatus as any));\n\n    if (conditions.length > 0) {\n      query = query.where(and(...conditions));\n    }\n\n    // Country filter (requires join with addresses)\n    if (country) {\n      query = query\n        .leftJoin(addresses, and(\n          eq(addresses.entityType, \"contact\"),\n          eq(addresses.entityId, contacts.id)\n        ))\n        .where(and(\n          ...conditions,\n          eq(addresses.countryCode, country)\n        ));\n    }\n\n    // Cursor pagination\n    if (cursor) {\n      conditions.push(sql`${contacts.updatedAt} < ${cursor}`);\n    }\n\n    // Sorting\n    const [sortField, sortOrder] = sort.split(\":\");\n    const orderBy = sortOrder === \"desc\" ? desc : asc;\n\n    switch (sortField) {\n      case \"lastName\":\n        query = query.orderBy(orderBy(contacts.lastName));\n        break;\n      case \"firstName\":\n        query = query.orderBy(orderBy(contacts.firstName));\n        break;\n      case \"createdAt\":\n        query = query.orderBy(orderBy(contacts.createdAt));\n        break;\n      default:\n        query = query.orderBy(orderBy(contacts.updatedAt));\n    }\n\n    // Apply limit + 1 to check for next page\n    query = query.limit(limit + 1);\n\n    const results = await query;\n    const hasNext = results.length > limit;\n    const contactResults = hasNext ? results.slice(0, -1) : results;\n\n    // Get total count\n    const [totalResult] = await db\n      .select({ count: count() })\n      .from(contacts)\n      .where(includeDeleted ? undefined : eq(contacts.isDeleted, false));\n\n    return {\n      contacts: contactResults.map(r => 'contacts' in r ? r.contacts : r),\n      hasNext,\n      total: totalResult.count,\n    };\n  }\n\n  async createContact(insertContact: InsertContact): Promise<Contact> {\n    const [contact] = await db.insert(contacts).values(insertContact).returning();\n    return contact;\n  }\n\n  async updateContact(id: string, updateContact: Partial<InsertContact>): Promise<Contact | undefined> {\n    const [contact] = await db\n      .update(contacts)\n      .set({ ...updateContact, updatedAt: sql`now()` })\n      .where(eq(contacts.id, id))\n      .returning();\n    return contact || undefined;\n  }\n\n  async deleteContact(id: string): Promise<boolean> {\n    const [result] = await db\n      .update(contacts)\n      .set({ isDeleted: true, updatedAt: sql`now()` })\n      .where(eq(contacts.id, id))\n      .returning();\n    return !!result;\n  }\n\n  async getAddresses(entityType: string, entityId: string): Promise<Address[]> {\n    return await db\n      .select()\n      .from(addresses)\n      .where(and(\n        eq(addresses.entityType, entityType),\n        eq(addresses.entityId, entityId)\n      ))\n      .orderBy(desc(addresses.isPrimary), addresses.createdAt);\n  }\n\n  async createAddress(insertAddress: InsertAddress): Promise<Address> {\n    const [address] = await db.insert(addresses).values(insertAddress).returning();\n    return address;\n  }\n\n  async updateAddress(id: string, updateAddress: Partial<InsertAddress>): Promise<Address | undefined> {\n    const [address] = await db\n      .update(addresses)\n      .set({ ...updateAddress, updatedAt: sql`now()` })\n      .where(eq(addresses.id, id))\n      .returning();\n    return address || undefined;\n  }\n\n  async deleteAddress(id: string): Promise<boolean> {\n    const [result] = await db.delete(addresses).where(eq(addresses.id, id)).returning();\n    return !!result;\n  }\n\n  async getEmails(entityType: string, entityId: string): Promise<Email[]> {\n    return await db\n      .select()\n      .from(emails)\n      .where(and(\n        eq(emails.entityType, entityType),\n        eq(emails.entityId, entityId)\n      ))\n      .orderBy(desc(emails.isPrimary), emails.createdAt);\n  }\n\n  async createEmail(insertEmail: InsertEmail): Promise<Email> {\n    const [email] = await db.insert(emails).values(insertEmail).returning();\n    return email;\n  }\n\n  async updateEmail(id: string, updateEmail: Partial<InsertEmail>): Promise<Email | undefined> {\n    const [email] = await db\n      .update(emails)\n      .set({ ...updateEmail, updatedAt: sql`now()` })\n      .where(eq(emails.id, id))\n      .returning();\n    return email || undefined;\n  }\n\n  async deleteEmail(id: string): Promise<boolean> {\n    const [result] = await db.delete(emails).where(eq(emails.id, id)).returning();\n    return !!result;\n  }\n\n  async getPhones(entityType: string, entityId: string): Promise<Phone[]> {\n    return await db\n      .select()\n      .from(phones)\n      .where(and(\n        eq(phones.entityType, entityType),\n        eq(phones.entityId, entityId)\n      ))\n      .orderBy(desc(phones.isPrimary), phones.createdAt);\n  }\n\n  async createPhone(insertPhone: InsertPhone): Promise<Phone> {\n    const [phone] = await db.insert(phones).values(insertPhone).returning();\n    return phone;\n  }\n\n  async updatePhone(id: string, updatePhone: Partial<InsertPhone>): Promise<Phone | undefined> {\n    const [phone] = await db\n      .update(phones)\n      .set({ ...updatePhone, updatedAt: sql`now()` })\n      .where(eq(phones.id, id))\n      .returning();\n    return phone || undefined;\n  }\n\n  async deletePhone(id: string): Promise<boolean> {\n    const [result] = await db.delete(phones).where(eq(phones.id, id)).returning();\n    return !!result;\n  }\n\n  async getFieldDefinitions(entityType?: string): Promise<FieldDefinition[]> {\n    const conditions = [eq(fieldDefinitions.isActive, true)];\n    if (entityType) {\n      conditions.push(eq(fieldDefinitions.entityType, entityType));\n    }\n\n    return await db\n      .select()\n      .from(fieldDefinitions)\n      .where(and(...conditions))\n      .orderBy(fieldDefinitions.label);\n  }\n\n  async createFieldDefinition(insertFieldDef: InsertFieldDefinition): Promise<FieldDefinition> {\n    const [fieldDef] = await db.insert(fieldDefinitions).values(insertFieldDef).returning();\n    return fieldDef;\n  }\n\n  async updateFieldDefinition(id: string, updateFieldDef: Partial<InsertFieldDefinition>): Promise<FieldDefinition | undefined> {\n    const [fieldDef] = await db\n      .update(fieldDefinitions)\n      .set({ ...updateFieldDef, updatedAt: sql`now()` })\n      .where(eq(fieldDefinitions.id, id))\n      .returning();\n    return fieldDef || undefined;\n  }\n\n  async deleteFieldDefinition(id: string): Promise<boolean> {\n    const [result] = await db\n      .update(fieldDefinitions)\n      .set({ isActive: false, updatedAt: sql`now()` })\n      .where(eq(fieldDefinitions.id, id))\n      .returning();\n    return !!result;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":16569},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, varchar, text, timestamp, boolean, jsonb, integer, uuid, pgEnum } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const companyTypeEnum = pgEnum('company_type', [\n  'public', 'private', 'nonprofit', 'government', 'partnership', 'sole_proprietorship'\n]);\n\nexport const employeeCountRangeEnum = pgEnum('employee_count_range', [\n  '1', '2-10', '11-50', '51-200', '201-500', '501-1000', '1001-5000', '5001-10000', '10001+'\n]);\n\nexport const industryEnum = pgEnum('industry', [\n  'technology', 'finance', 'healthcare', 'retail', 'manufacturing', 'consulting',\n  'education', 'real_estate', 'transportation', 'energy', 'media', 'hospitality'\n]);\n\nexport const lifecycleStageEnum = pgEnum('lifecycle_stage', [\n  'subscriber', 'lead', 'marketing_qualified_lead', 'sales_qualified_lead',\n  'opportunity', 'customer', 'evangelist', 'other'\n]);\n\nexport const recordStatusEnum = pgEnum('record_status', [\n  'active', 'inactive', 'archived'\n]);\n\nexport const addressTypeEnum = pgEnum('address_type', [\n  'hq', 'billing', 'shipping', 'office', 'remote', 'home', 'other'\n]);\n\nexport const emailTypeEnum = pgEnum('email_type', [\n  'work', 'personal', 'sales', 'support', 'billing', 'other'\n]);\n\nexport const phoneTypeEnum = pgEnum('phone_type', [\n  'work', 'personal', 'mobile', 'fax', 'other'\n]);\n\nexport const seniorityEnum = pgEnum('seniority', [\n  'intern', 'entry', 'mid', 'senior', 'lead', 'principal', 'manager', 'director', 'vp', 'c_level', 'owner'\n]);\n\nexport const roleEnum = pgEnum('role', [\n  'admin', 'manager', 'recruiter', 'viewer'\n]);\n\nexport const fieldTypeEnum = pgEnum('field_type', [\n  'text', 'number', 'boolean', 'date', 'select', 'multi_select', 'email', 'url', 'phone'\n]);\n\nexport const employmentTypeEnum = pgEnum('employment_type', [\n  'full_time', 'part_time', 'contract', 'freelance', 'internship', 'temporary'\n]);\n\nexport const experienceLevelEnum = pgEnum('experience_level', [\n  'entry', 'mid', 'senior', 'lead', 'principal', 'executive'\n]);\n\nexport const jobStatusEnum = pgEnum('job_status', [\n  'draft', 'active', 'paused', 'closed', 'cancelled'\n]);\n\nexport const applicationStatusEnum = pgEnum('application_status', [\n  'applied', 'screening', 'interview', 'assessment', 'reference_check', 'offer', 'hired', 'rejected', 'withdrawn'\n]);\n\nexport const interviewStatusEnum = pgEnum('interview_status', [\n  'scheduled', 'completed', 'cancelled', 'no_show', 'rescheduled'\n]);\n\nexport const priorityEnum = pgEnum('priority', [\n  'low', 'medium', 'high', 'urgent'\n]);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  role: roleEnum(\"role\").notNull().default(\"viewer\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Field definitions for custom fields\nexport const fieldDefinitions = pgTable(\"field_definitions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  entityType: text(\"entity_type\").notNull(), // 'company' or 'contact'\n  key: text(\"key\").notNull(),\n  label: text(\"label\").notNull(),\n  type: fieldTypeEnum(\"type\").notNull(),\n  options: jsonb(\"options\"), // For select/multi-select fields\n  isRequired: boolean(\"is_required\").notNull().default(false),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Companies table\nexport const companies = pgTable(\"companies\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  legalName: text(\"legal_name\"),\n  emailDomains: text(\"email_domains\").array(),\n  companyType: companyTypeEnum(\"company_type\"),\n  employeeCountRange: employeeCountRangeEnum(\"employee_count_range\"),\n  industry: industryEnum(\"industry\"),\n  specialties: text(\"specialties\").array(),\n  foundedYear: integer(\"founded_year\"),\n  description: text(\"description\"),\n  websiteUrl: text(\"website_url\"),\n  linkedinUrl: text(\"linkedin_url\"),\n  logoUrl: text(\"logo_url\"),\n  bannerUrl: text(\"banner_url\"),\n  lifecycleStage: lifecycleStageEnum(\"lifecycle_stage\").default(\"lead\"),\n  recordStatus: recordStatusEnum(\"record_status\").notNull().default(\"active\"),\n  ownerId: uuid(\"owner_id\").references(() => users.id),\n  tags: text(\"tags\").array(),\n  customFields: jsonb(\"custom_fields\"),\n  isDeleted: boolean(\"is_deleted\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Contacts table\nexport const contacts = pgTable(\"contacts\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  prefix: text(\"prefix\"),\n  firstName: text(\"first_name\").notNull(),\n  middleName: text(\"middle_name\"),\n  lastName: text(\"last_name\").notNull(),\n  suffix: text(\"suffix\"),\n  preferredName: text(\"preferred_name\"),\n  pronouns: text(\"pronouns\"),\n  headline: text(\"headline\"),\n  title: text(\"title\"),\n  department: text(\"department\"),\n  seniority: seniorityEnum(\"seniority\"),\n  companyId: uuid(\"company_id\").references(() => companies.id),\n  companyNameSnapshot: text(\"company_name_snapshot\"),\n  linkedinUrl: text(\"linkedin_url\"),\n  locationLabel: text(\"location_label\"),\n  timeZone: text(\"time_zone\"),\n  employmentStartDate: timestamp(\"employment_start_date\"),\n  employmentEndDate: timestamp(\"employment_end_date\"),\n  isCurrentEmployee: boolean(\"is_current_employee\").notNull().default(true),\n  employmentHistory: jsonb(\"employment_history\"),\n  lifecycleStage: lifecycleStageEnum(\"lifecycle_stage\").default(\"lead\"),\n  recordStatus: recordStatusEnum(\"record_status\").notNull().default(\"active\"),\n  ownerId: uuid(\"owner_id\").references(() => users.id),\n  tags: text(\"tags\").array(),\n  notes: text(\"notes\"),\n  customFields: jsonb(\"custom_fields\"),\n  isDeleted: boolean(\"is_deleted\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Addresses table\nexport const addresses = pgTable(\"addresses\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  entityType: text(\"entity_type\").notNull(), // 'company' or 'contact'\n  entityId: uuid(\"entity_id\").notNull(),\n  type: addressTypeEnum(\"type\").notNull().default(\"other\"),\n  label: text(\"label\"),\n  street1: text(\"street1\"),\n  street2: text(\"street2\"),\n  city: text(\"city\"),\n  state: text(\"state\"),\n  postalCode: text(\"postal_code\"),\n  countryCode: text(\"country_code\"), // ISO 3166-1 alpha-2\n  latitude: text(\"latitude\"),\n  longitude: text(\"longitude\"),\n  isPrimary: boolean(\"is_primary\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Emails table\nexport const emails = pgTable(\"emails\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  entityType: text(\"entity_type\").notNull(), // 'company' or 'contact'\n  entityId: uuid(\"entity_id\").notNull(),\n  type: emailTypeEnum(\"type\").notNull().default(\"other\"),\n  email: text(\"email\").notNull(),\n  isPrimary: boolean(\"is_primary\").notNull().default(false),\n  isVerified: boolean(\"is_verified\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Phones table\nexport const phones = pgTable(\"phones\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  entityType: text(\"entity_type\").notNull(), // 'company' or 'contact'\n  entityId: uuid(\"entity_id\").notNull(),\n  type: phoneTypeEnum(\"type\").notNull().default(\"other\"),\n  phone: text(\"phone\").notNull(),\n  isPrimary: boolean(\"is_primary\").notNull().default(false),\n  isVerified: boolean(\"is_verified\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Jobs/Positions Management\nexport const jobs = pgTable(\"jobs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  companyId: uuid(\"company_id\").references(() => companies.id),\n  department: text(\"department\"),\n  location: text(\"location\"),\n  employmentType: employmentTypeEnum(\"employment_type\").default(\"full_time\"),\n  experienceLevel: experienceLevelEnum(\"experience_level\").default(\"mid\"),\n  salaryMin: integer(\"salary_min\"),\n  salaryMax: integer(\"salary_max\"),\n  salaryCurrency: text(\"salary_currency\").default(\"USD\"),\n  requirements: jsonb(\"requirements\"),\n  responsibilities: jsonb(\"responsibilities\"),\n  benefits: jsonb(\"benefits\"),\n  skills: text(\"skills\").array(),\n  status: jobStatusEnum(\"status\").default(\"draft\"),\n  priority: priorityEnum(\"priority\").default(\"medium\"),\n  openings: integer(\"openings\").default(1),\n  applicationDeadline: timestamp(\"application_deadline\"),\n  hiringManagerId: uuid(\"hiring_manager_id\").references(() => users.id),\n  createdBy: uuid(\"created_by\").references(() => users.id),\n  publishedAt: timestamp(\"published_at\"),\n  isRemote: boolean(\"is_remote\").default(false),\n  isDeleted: boolean(\"is_deleted\").default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Job Applications\nexport const jobApplications = pgTable(\"job_applications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  jobId: uuid(\"job_id\").references(() => jobs.id).notNull(),\n  contactId: uuid(\"contact_id\").references(() => contacts.id).notNull(),\n  status: applicationStatusEnum(\"status\").default(\"applied\"),\n  stage: text(\"stage\"),\n  source: text(\"source\"),\n  coverLetter: text(\"cover_letter\"),\n  resumeUrl: text(\"resume_url\"),\n  portfolioUrl: text(\"portfolio_url\"),\n  expectedSalary: integer(\"expected_salary\"),\n  availabilityDate: timestamp(\"availability_date\"),\n  notes: text(\"notes\"),\n  rating: integer(\"rating\"),\n  assignedTo: uuid(\"assigned_to\").references(() => users.id),\n  appliedAt: timestamp(\"applied_at\").default(sql`now()`),\n  lastUpdated: timestamp(\"last_updated\").default(sql`now()`),\n  isDeleted: boolean(\"is_deleted\").default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Interview Schedules\nexport const interviews = pgTable(\"interviews\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  applicationId: uuid(\"application_id\").references(() => jobApplications.id).notNull(),\n  interviewerIds: text(\"interviewer_ids\").array(),\n  scheduledAt: timestamp(\"scheduled_at\").notNull(),\n  duration: integer(\"duration\").default(60),\n  type: text(\"type\").default(\"video\"),\n  location: text(\"location\"),\n  status: interviewStatusEnum(\"status\").default(\"scheduled\"),\n  notes: text(\"notes\"),\n  feedback: text(\"feedback\"),\n  rating: integer(\"rating\"),\n  createdBy: uuid(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Analytics Events for tracking\nexport const analyticsEvents = pgTable(\"analytics_events\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventType: text(\"event_type\").notNull(),\n  entityType: text(\"entity_type\").notNull(),\n  entityId: uuid(\"entity_id\").notNull(),\n  userId: uuid(\"user_id\").references(() => users.id),\n  sessionId: text(\"session_id\"),\n  properties: jsonb(\"properties\"),\n  timestamp: timestamp(\"timestamp\").default(sql`now()`),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Reports Configuration\nexport const reportConfigurations = pgTable(\"report_configurations\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  type: text(\"type\").notNull(),\n  category: text(\"category\"),\n  dataSource: text(\"data_source\").notNull(),\n  filters: jsonb(\"filters\"),\n  groupBy: jsonb(\"group_by\"),\n  metrics: jsonb(\"metrics\"),\n  chartType: text(\"chart_type\"),\n  refreshInterval: integer(\"refresh_interval\").default(3600),\n  isPublic: boolean(\"is_public\").default(false),\n  isActive: boolean(\"is_active\").default(true),\n  createdBy: uuid(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Saved Dashboards\nexport const dashboards = pgTable(\"dashboards\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  layout: jsonb(\"layout\"),\n  widgets: jsonb(\"widgets\"),\n  isDefault: boolean(\"is_default\").default(false),\n  isPublic: boolean(\"is_public\").default(false),\n  createdBy: uuid(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  ownedCompanies: many(companies, { relationName: \"owner\" }),\n  ownedContacts: many(contacts, { relationName: \"owner\" }),\n  createdJobs: many(jobs, { relationName: \"creator\" }),\n  managingJobs: many(jobs, { relationName: \"hiringManager\" }),\n  assignedApplications: many(jobApplications, { relationName: \"assignee\" }),\n  conductedInterviews: many(interviews, { relationName: \"creator\" }),\n  createdReports: many(reportConfigurations, { relationName: \"creator\" }),\n  createdDashboards: many(dashboards, { relationName: \"creator\" }),\n}));\n\nexport const companiesRelations = relations(companies, ({ one, many }) => ({\n  owner: one(users, {\n    fields: [companies.ownerId],\n    references: [users.id],\n    relationName: \"owner\",\n  }),\n  contacts: many(contacts),\n  addresses: many(addresses),\n  emails: many(emails),\n  phones: many(phones),\n  jobs: many(jobs),\n}));\n\nexport const jobsRelations = relations(jobs, ({ one, many }) => ({\n  company: one(companies, {\n    fields: [jobs.companyId],\n    references: [companies.id],\n  }),\n  hiringManager: one(users, {\n    fields: [jobs.hiringManagerId],\n    references: [users.id],\n    relationName: \"hiringManager\",\n  }),\n  creator: one(users, {\n    fields: [jobs.createdBy],\n    references: [users.id],\n    relationName: \"creator\",\n  }),\n  applications: many(jobApplications),\n}));\n\nexport const jobApplicationsRelations = relations(jobApplications, ({ one, many }) => ({\n  job: one(jobs, {\n    fields: [jobApplications.jobId],\n    references: [jobs.id],\n  }),\n  contact: one(contacts, {\n    fields: [jobApplications.contactId],\n    references: [contacts.id],\n  }),\n  assignee: one(users, {\n    fields: [jobApplications.assignedTo],\n    references: [users.id],\n    relationName: \"assignee\",\n  }),\n  interviews: many(interviews),\n}));\n\nexport const interviewsRelations = relations(interviews, ({ one }) => ({\n  application: one(jobApplications, {\n    fields: [interviews.applicationId],\n    references: [jobApplications.id],\n  }),\n  creator: one(users, {\n    fields: [interviews.createdBy],\n    references: [users.id],\n    relationName: \"creator\",\n  }),\n}));\n\nexport const reportConfigurationsRelations = relations(reportConfigurations, ({ one }) => ({\n  creator: one(users, {\n    fields: [reportConfigurations.createdBy],\n    references: [users.id],\n    relationName: \"creator\",\n  }),\n}));\n\nexport const dashboardsRelations = relations(dashboards, ({ one }) => ({\n  creator: one(users, {\n    fields: [dashboards.createdBy],\n    references: [users.id],\n    relationName: \"creator\",\n  }),\n}));\n\nexport const contactsRelations = relations(contacts, ({ one, many }) => ({\n  company: one(companies, {\n    fields: [contacts.companyId],\n    references: [companies.id],\n  }),\n  owner: one(users, {\n    fields: [contacts.ownerId],\n    references: [users.id],\n    relationName: \"owner\",\n  }),\n  addresses: many(addresses),\n  emails: many(emails),\n  phones: many(phones),\n  applications: many(jobApplications),\n}));\n\nexport const addressesRelations = relations(addresses, ({ one }) => ({\n  company: one(companies, {\n    fields: [addresses.entityId],\n    references: [companies.id],\n  }),\n  contact: one(contacts, {\n    fields: [addresses.entityId],\n    references: [contacts.id],\n  }),\n}));\n\nexport const emailsRelations = relations(emails, ({ one }) => ({\n  company: one(companies, {\n    fields: [emails.entityId],\n    references: [companies.id],\n  }),\n  contact: one(contacts, {\n    fields: [emails.entityId],\n    references: [contacts.id],\n  }),\n}));\n\nexport const phonesRelations = relations(phones, ({ one }) => ({\n  company: one(companies, {\n    fields: [phones.entityId],\n    references: [companies.id],\n  }),\n  contact: one(contacts, {\n    fields: [phones.entityId],\n    references: [contacts.id],\n  }),\n}));\n\n// Zod schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCompanySchema = createInsertSchema(companies).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertContactSchema = createInsertSchema(contacts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAddressSchema = createInsertSchema(addresses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmailSchema = createInsertSchema(emails).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPhoneSchema = createInsertSchema(phones).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFieldDefinitionSchema = createInsertSchema(fieldDefinitions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertJobSchema = createInsertSchema(jobs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertJobApplicationSchema = createInsertSchema(jobApplications).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  appliedAt: true,\n  lastUpdated: true,\n});\n\nexport const insertInterviewSchema = createInsertSchema(interviews).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAnalyticsEventSchema = createInsertSchema(analyticsEvents).omit({\n  id: true,\n  timestamp: true,\n  createdAt: true,\n});\n\nexport const insertReportConfigurationSchema = createInsertSchema(reportConfigurations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDashboardSchema = createInsertSchema(dashboards).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Company = typeof companies.$inferSelect;\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\nexport type Contact = typeof contacts.$inferSelect;\nexport type InsertContact = z.infer<typeof insertContactSchema>;\nexport type Address = typeof addresses.$inferSelect;\nexport type InsertAddress = z.infer<typeof insertAddressSchema>;\nexport type Email = typeof emails.$inferSelect;\nexport type InsertEmail = z.infer<typeof insertEmailSchema>;\nexport type Phone = typeof phones.$inferSelect;\nexport type InsertPhone = z.infer<typeof insertPhoneSchema>;\nexport type FieldDefinition = typeof fieldDefinitions.$inferSelect;\nexport type InsertFieldDefinition = z.infer<typeof insertFieldDefinitionSchema>;\nexport type Job = typeof jobs.$inferSelect;\nexport type InsertJob = z.infer<typeof insertJobSchema>;\nexport type JobApplication = typeof jobApplications.$inferSelect;\nexport type InsertJobApplication = z.infer<typeof insertJobApplicationSchema>;\nexport type Interview = typeof interviews.$inferSelect;\nexport type InsertInterview = z.infer<typeof insertInterviewSchema>;\nexport type AnalyticsEvent = typeof analyticsEvents.$inferSelect;\nexport type InsertAnalyticsEvent = z.infer<typeof insertAnalyticsEventSchema>;\nexport type ReportConfiguration = typeof reportConfigurations.$inferSelect;\nexport type InsertReportConfiguration = z.infer<typeof insertReportConfigurationSchema>;\nexport type Dashboard = typeof dashboards.$inferSelect;\nexport type InsertDashboard = z.infer<typeof insertDashboardSchema>;\n","size_bytes":20789},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Layout from \"@/pages/layout\";\nimport Companies from \"@/pages/companies\";\nimport CompanyCreate from \"@/pages/company-create\";\nimport CompanyEdit from \"@/pages/company-edit\";\nimport CompanyOverview from \"@/pages/company-overview\";\nimport Contacts from \"@/pages/contacts\";\nimport Jobs from \"@/pages/jobs\";\nimport Analytics from \"@/pages/analytics\";\nimport Reports from \"@/pages/reports\";\nimport Insights from \"@/pages/insights\";\nimport CompanyDetail from \"@/pages/company-detail\";\nimport ContactDetail from \"@/pages/contact-detail\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={Companies} />\n        <Route path=\"/companies\" component={Companies} />\n        <Route path=\"/companies/create\" component={CompanyCreate} />\n        <Route path=\"/companies/:id/edit\" component={CompanyEdit} />\n        <Route path=\"/companies/:id/overview\" component={CompanyOverview} />\n        <Route path=\"/companies/:id\" component={CompanyDetail} />\n        <Route path=\"/contacts\" component={Contacts} />\n        <Route path=\"/contacts/:id\" component={ContactDetail} />\n        <Route path=\"/jobs\" component={Jobs} />\n        <Route path=\"/analytics\" component={Analytics} />\n        <Route path=\"/reports\" component={Reports} />\n        <Route path=\"/insights\" component={Insights} />\n        <Route path=\"/settings\" component={() => <div className=\"p-8 text-center text-muted-foreground\">Settings feature coming soon</div>} />\n        <Route path=\"/user-management\" component={() => <div className=\"p-8 text-center text-muted-foreground\">User Management feature coming soon</div>} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2219},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222 15% 25%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222 15% 25%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222 15% 25%);\n  --primary: hsl(142 76% 36%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(220 13% 96%);\n  --secondary-foreground: hsl(222 15% 25%);\n  --muted: hsl(220 13% 96%);\n  --muted-foreground: hsl(220 9% 46%);\n  --accent: hsl(220 13% 96%);\n  --accent-foreground: hsl(222 15% 25%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(220 13% 91%);\n  --input: hsl(0 0% 100%);\n  --ring: hsl(142 76% 36%);\n  --chart-1: hsl(142 76% 36%);\n  --chart-2: hsl(280 65% 60%);\n  --chart-3: hsl(45 90% 60%);\n  --chart-4: hsl(340 75% 55%);\n  --chart-5: hsl(217 91% 60%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(222 15% 25%);\n  --sidebar-primary: hsl(142 76% 36%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(220 13% 96%);\n  --sidebar-accent-foreground: hsl(222 15% 25%);\n  --sidebar-border: hsl(220 13% 91%);\n  --sidebar-ring: hsl(142 76% 36%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 69% / 0.15);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 69% / 0.20);\n  --shadow-sm: 0px 1px 2px 0px hsl(220 13% 69% / 0.10), 0px 1px 3px -1px hsl(220 13% 69% / 0.15);\n  --shadow: 0px 1px 3px 0px hsl(220 13% 69% / 0.15), 0px 1px 2px -1px hsl(220 13% 69% / 0.15);\n  --shadow-md: 0px 4px 6px -1px hsl(220 13% 69% / 0.15), 0px 2px 4px -2px hsl(220 13% 69% / 0.15);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 13% 69% / 0.15), 0px 4px 6px -4px hsl(220 13% 69% / 0.15);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 13% 69% / 0.15), 0px 8px 10px -6px hsl(220 13% 69% / 0.15);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 13% 69% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222 84% 5%);\n  --foreground: hsl(213 31% 91%);\n  --card: hsl(222 84% 5%);\n  --card-foreground: hsl(213 31% 91%);\n  --popover: hsl(222 84% 5%);\n  --popover-foreground: hsl(213 31% 91%);\n  --primary: hsl(142 76% 36%);\n  --primary-foreground: hsl(222 84% 5%);\n  --secondary: hsl(217 32% 17%);\n  --secondary-foreground: hsl(213 31% 91%);\n  --muted: hsl(217 32% 17%);\n  --muted-foreground: hsl(215 20% 65%);\n  --accent: hsl(217 32% 17%);\n  --accent-foreground: hsl(213 31% 91%);\n  --destructive: hsl(0 62% 56%);\n  --destructive-foreground: hsl(0 85% 97%);\n  --border: hsl(217 32% 17%);\n  --input: hsl(217 32% 17%);\n  --ring: hsl(142 76% 36%);\n  --chart-1: hsl(142 76% 36%);\n  --chart-2: hsl(280 65% 60%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(340 75% 55%);\n  --chart-5: hsl(217 91% 60%);\n  --sidebar: hsl(222 84% 5%);\n  --sidebar-foreground: hsl(213 31% 91%);\n  --sidebar-primary: hsl(142 76% 36%);\n  --sidebar-primary-foreground: hsl(222 84% 5%);\n  --sidebar-accent: hsl(217 32% 17%);\n  --sidebar-accent-foreground: hsl(213 31% 91%);\n  --sidebar-border: hsl(217 32% 17%);\n  --sidebar-ring: hsl(142 76% 36%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 13% 69% / 0.15);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 13% 69% / 0.20);\n  --shadow-sm: 0px 1px 2px 0px hsl(220 13% 69% / 0.10), 0px 1px 3px -1px hsl(220 13% 69% / 0.15);\n  --shadow: 0px 1px 3px 0px hsl(220 13% 69% / 0.15), 0px 1px 2px -1px hsl(220 13% 69% / 0.15);\n  --shadow-md: 0px 4px 6px -1px hsl(220 13% 69% / 0.15), 0px 2px 4px -2px hsl(220 13% 69% / 0.15);\n  --shadow-lg: 0px 10px 15px -3px hsl(220 13% 69% / 0.15), 0px 4px 6px -4px hsl(220 13% 69% / 0.15);\n  --shadow-xl: 0px 20px 25px -5px hsl(220 13% 69% / 0.15), 0px 8px 10px -6px hsl(220 13% 69% / 0.15);\n  --shadow-2xl: 0px 25px 50px -12px hsl(220 13% 69% / 0.25);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n  :root {\n    --sidebar-background: 0 0% 100%;\n    --sidebar-foreground: 222 15% 25%;\n    --sidebar-primary: 142 76% 36%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 220 13% 96%;\n    --sidebar-accent-foreground: 222 15% 25%;\n    --sidebar-border: 220 13% 91%;\n    --sidebar-ring: 142 76% 36%;\n  }\n  .dark {\n    --sidebar-background: 222 84% 5%;\n    --sidebar-foreground: 213 31% 91%;\n    --sidebar-primary: 142 76% 36%;\n    --sidebar-primary-foreground: 222 84% 5%;\n    --sidebar-accent: 217 32% 17%;\n    --sidebar-accent-foreground: 213 31% 91%;\n    --sidebar-border: 217 32% 17%;\n    --sidebar-ring: 142 76% 36%;\n  }\n}\n\n\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}","size_bytes":4847},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/api/auth.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { storage } from \"../storage\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport bcrypt from \"bcryptjs\";\n\nconst loginSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(1),\n});\n\nconst registerSchema = insertUserSchema.extend({\n  password: z.string().min(6),\n});\n\nexport function registerAuthRoutes(app: Express) {\n  // POST /api/auth/login - User login\n  app.post(\"/api/auth/login\", async (req: Request, res: Response) => {\n    try {\n      const { email, password } = loginSchema.parse(req.body);\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.isActive) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      const validPassword = await bcrypt.compare(password, user.password);\n      if (!validPassword) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // In a real app, you'd create a JWT token or session here\n      const { password: _, ...userWithoutPassword } = user;\n      res.json({ \n        data: userWithoutPassword,\n        message: \"Login successful\" \n      });\n    } catch (error) {\n      console.error(\"Error during login:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid login data\" : \"Login failed\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // POST /api/auth/register - User registration\n  app.post(\"/api/auth/register\", async (req: Request, res: Response) => {\n    try {\n      const userData = registerSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res.status(409).json({ message: \"User already exists\" });\n      }\n\n      const existingUsername = await storage.getUserByUsername(userData.username);\n      if (existingUsername) {\n        return res.status(409).json({ message: \"Username already taken\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(userData.password, 12);\n      \n      const user = await storage.createUser({\n        ...userData,\n        password: hashedPassword,\n      });\n\n      const { password: _, ...userWithoutPassword } = user;\n      res.status(201).json({ \n        data: userWithoutPassword,\n        message: \"User created successfully\" \n      });\n    } catch (error) {\n      console.error(\"Error during registration:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid registration data\" : \"Registration failed\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // GET /api/auth/me - Get current user (placeholder for session-based auth)\n  app.get(\"/api/auth/me\", async (req: Request, res: Response) => {\n    // In a real app, you'd extract user ID from JWT token or session\n    res.status(401).json({ message: \"Not implemented - requires session management\" });\n  });\n\n  // POST /api/auth/logout - User logout\n  app.post(\"/api/auth/logout\", async (req: Request, res: Response) => {\n    // In a real app, you'd invalidate the JWT token or destroy session\n    res.json({ message: \"Logged out successfully\" });\n  });\n}\n","size_bytes":3364},"server/api/companies.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { storage } from \"../storage\";\nimport { insertCompanySchema, insertAddressSchema, insertEmailSchema, insertPhoneSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst getCompaniesQuerySchema = z.object({\n  q: z.string().optional(),\n  industry: z.string().optional(),\n  companyType: z.string().optional(),\n  employeeCountRange: z.string().optional(),\n  recordStatus: z.string().optional(),\n  country: z.string().optional(),\n  sort: z.string().default(\"updatedAt:desc\"),\n  limit: z.coerce.number().min(1).max(100).default(25),\n  cursor: z.string().optional(),\n  includeDeleted: z.coerce.boolean().default(false),\n  include: z.string().optional(),\n});\n\nexport function registerCompaniesRoutes(app: Express) {\n  // GET /api/companies - List companies with search and filters\n  app.get(\"/api/companies\", async (req: Request, res: Response) => {\n    try {\n      const params = getCompaniesQuerySchema.parse(req.query);\n      const result = await storage.getCompanies(params);\n      \n      const nextCursor = result.hasNext && result.companies.length > 0 \n        ? result.companies[result.companies.length - 1].updatedAt.toISOString()\n        : null;\n\n      res.json({\n        data: result.companies,\n        meta: {\n          count: result.companies.length,\n          total: result.total,\n          hasNext: result.hasNext,\n        },\n        links: {\n          next: nextCursor ? `/api/companies?cursor=${nextCursor}&limit=${params.limit}` : null,\n        },\n      });\n    } catch (error) {\n      console.error(\"Error fetching companies:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid query parameters\" : \"Failed to fetch companies\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // GET /api/companies/:id - Get single company\n  app.get(\"/api/companies/:id\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const { include } = req.query;\n      \n      const includeRelated = include ? include.toString().split(\",\").some(i => [\"addresses\", \"emails\", \"phones\", \"contacts\"].includes(i)) : false;\n      const company = await storage.getCompany(id, includeRelated);\n      \n      if (!company) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n\n      let responseData: any = company;\n\n      // Include related data if requested\n      if (include) {\n        const includeFields = include.toString().split(\",\");\n        const related: any = {};\n\n        if (includeFields.includes(\"addresses\")) {\n          related.addresses = await storage.getAddresses(\"company\", id);\n        }\n        if (includeFields.includes(\"emails\")) {\n          related.emails = await storage.getEmails(\"company\", id);\n        }\n        if (includeFields.includes(\"phones\")) {\n          related.phones = await storage.getPhones(\"company\", id);\n        }\n        if (includeFields.includes(\"contacts\")) {\n          const contactsResult = await storage.getContacts({ companyId: id, limit: 100 });\n          related.contacts = contactsResult.contacts;\n        }\n\n        responseData = { ...company, ...related };\n      }\n\n      res.json({ data: responseData });\n    } catch (error) {\n      console.error(\"Error fetching company:\", error);\n      res.status(500).json({ message: \"Failed to fetch company\" });\n    }\n  });\n\n  // POST /api/companies - Create new company\n  app.post(\"/api/companies\", async (req: Request, res: Response) => {\n    try {\n      const companyData = insertCompanySchema.parse(req.body);\n      const company = await storage.createCompany(companyData);\n      \n      res.status(201).json({ data: company });\n    } catch (error) {\n      console.error(\"Error creating company:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid company data\" : \"Failed to create company\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // PATCH /api/companies/:id - Update company\n  app.patch(\"/api/companies/:id\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const updateData = insertCompanySchema.partial().parse(req.body);\n      \n      const company = await storage.updateCompany(id, updateData);\n      \n      if (!company) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n\n      res.json({ data: company });\n    } catch (error) {\n      console.error(\"Error updating company:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid company data\" : \"Failed to update company\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // DELETE /api/companies/:id - Soft delete company\n  app.delete(\"/api/companies/:id\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteCompany(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Company not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting company:\", error);\n      res.status(500).json({ message: \"Failed to delete company\" });\n    }\n  });\n\n  // POST /api/companies/:id/addresses - Add address to company\n  app.post(\"/api/companies/:id/addresses\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const addressData = insertAddressSchema.parse({\n        ...req.body,\n        entityType: \"company\",\n        entityId: id,\n      });\n      \n      const address = await storage.createAddress(addressData);\n      res.status(201).json({ data: address });\n    } catch (error) {\n      console.error(\"Error creating address:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid address data\" : \"Failed to create address\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // POST /api/companies/:id/emails - Add email to company\n  app.post(\"/api/companies/:id/emails\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const emailData = insertEmailSchema.parse({\n        ...req.body,\n        entityType: \"company\",\n        entityId: id,\n      });\n      \n      const email = await storage.createEmail(emailData);\n      res.status(201).json({ data: email });\n    } catch (error) {\n      console.error(\"Error creating email:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid email data\" : \"Failed to create email\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // POST /api/companies/:id/phones - Add phone to company\n  app.post(\"/api/companies/:id/phones\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const phoneData = insertPhoneSchema.parse({\n        ...req.body,\n        entityType: \"company\",\n        entityId: id,\n      });\n      \n      const phone = await storage.createPhone(phoneData);\n      res.status(201).json({ data: phone });\n    } catch (error) {\n      console.error(\"Error creating phone:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid phone data\" : \"Failed to create phone\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n}\n","size_bytes":7516},"server/api/contacts.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { storage } from \"../storage\";\nimport { insertContactSchema, insertAddressSchema, insertEmailSchema, insertPhoneSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst getContactsQuerySchema = z.object({\n  q: z.string().optional(),\n  companyId: z.string().optional(),\n  seniority: z.string().optional(),\n  lifecycleStage: z.string().optional(),\n  recordStatus: z.string().optional(),\n  country: z.string().optional(),\n  sort: z.string().default(\"updatedAt:desc\"),\n  limit: z.coerce.number().min(1).max(100).default(25),\n  cursor: z.string().optional(),\n  includeDeleted: z.coerce.boolean().default(false),\n  include: z.string().optional(),\n});\n\nexport function registerContactsRoutes(app: Express) {\n  // GET /api/contacts - List contacts with search and filters\n  app.get(\"/api/contacts\", async (req: Request, res: Response) => {\n    try {\n      const params = getContactsQuerySchema.parse(req.query);\n      const result = await storage.getContacts(params);\n      \n      const nextCursor = result.hasNext && result.contacts.length > 0 \n        ? result.contacts[result.contacts.length - 1].updatedAt.toISOString()\n        : null;\n\n      res.json({\n        data: result.contacts,\n        meta: {\n          count: result.contacts.length,\n          total: result.total,\n          hasNext: result.hasNext,\n        },\n        links: {\n          next: nextCursor ? `/api/contacts?cursor=${nextCursor}&limit=${params.limit}` : null,\n        },\n      });\n    } catch (error) {\n      console.error(\"Error fetching contacts:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid query parameters\" : \"Failed to fetch contacts\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // GET /api/contacts/:id - Get single contact\n  app.get(\"/api/contacts/:id\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const { include } = req.query;\n      \n      const includeRelated = include ? include.toString().split(\",\").some(i => [\"addresses\", \"emails\", \"phones\", \"company\"].includes(i)) : false;\n      const contact = await storage.getContact(id, includeRelated);\n      \n      if (!contact) {\n        return res.status(404).json({ message: \"Contact not found\" });\n      }\n\n      let responseData: any = contact;\n\n      // Include related data if requested\n      if (include) {\n        const includeFields = include.toString().split(\",\");\n        const related: any = {};\n\n        if (includeFields.includes(\"addresses\")) {\n          related.addresses = await storage.getAddresses(\"contact\", id);\n        }\n        if (includeFields.includes(\"emails\")) {\n          related.emails = await storage.getEmails(\"contact\", id);\n        }\n        if (includeFields.includes(\"phones\")) {\n          related.phones = await storage.getPhones(\"contact\", id);\n        }\n        if (includeFields.includes(\"company\") && contact.companyId) {\n          related.company = await storage.getCompany(contact.companyId);\n        }\n\n        responseData = { ...contact, ...related };\n      }\n\n      res.json({ data: responseData });\n    } catch (error) {\n      console.error(\"Error fetching contact:\", error);\n      res.status(500).json({ message: \"Failed to fetch contact\" });\n    }\n  });\n\n  // POST /api/contacts - Create new contact\n  app.post(\"/api/contacts\", async (req: Request, res: Response) => {\n    try {\n      const contactData = insertContactSchema.parse(req.body);\n      const contact = await storage.createContact(contactData);\n      \n      res.status(201).json({ data: contact });\n    } catch (error) {\n      console.error(\"Error creating contact:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid contact data\" : \"Failed to create contact\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // PATCH /api/contacts/:id - Update contact\n  app.patch(\"/api/contacts/:id\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const updateData = insertContactSchema.partial().parse(req.body);\n      \n      const contact = await storage.updateContact(id, updateData);\n      \n      if (!contact) {\n        return res.status(404).json({ message: \"Contact not found\" });\n      }\n\n      res.json({ data: contact });\n    } catch (error) {\n      console.error(\"Error updating contact:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid contact data\" : \"Failed to update contact\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // DELETE /api/contacts/:id - Soft delete contact\n  app.delete(\"/api/contacts/:id\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteContact(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Contact not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting contact:\", error);\n      res.status(500).json({ message: \"Failed to delete contact\" });\n    }\n  });\n\n  // POST /api/contacts/:id/addresses - Add address to contact\n  app.post(\"/api/contacts/:id/addresses\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const addressData = insertAddressSchema.parse({\n        ...req.body,\n        entityType: \"contact\",\n        entityId: id,\n      });\n      \n      const address = await storage.createAddress(addressData);\n      res.status(201).json({ data: address });\n    } catch (error) {\n      console.error(\"Error creating address:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid address data\" : \"Failed to create address\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // POST /api/contacts/:id/emails - Add email to contact\n  app.post(\"/api/contacts/:id/emails\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const emailData = insertEmailSchema.parse({\n        ...req.body,\n        entityType: \"contact\",\n        entityId: id,\n      });\n      \n      const email = await storage.createEmail(emailData);\n      res.status(201).json({ data: email });\n    } catch (error) {\n      console.error(\"Error creating email:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid email data\" : \"Failed to create email\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // POST /api/contacts/:id/phones - Add phone to contact\n  app.post(\"/api/contacts/:id/phones\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const phoneData = insertPhoneSchema.parse({\n        ...req.body,\n        entityType: \"contact\",\n        entityId: id,\n      });\n      \n      const phone = await storage.createPhone(phoneData);\n      res.status(201).json({ data: phone });\n    } catch (error) {\n      console.error(\"Error creating phone:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid phone data\" : \"Failed to create phone\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n}\n","size_bytes":7429},"server/api/field-definitions.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { storage } from \"../storage\";\nimport { insertFieldDefinitionSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst getFieldDefinitionsQuerySchema = z.object({\n  entityType: z.string().optional(),\n});\n\nexport function registerFieldDefinitionsRoutes(app: Express) {\n  // GET /api/field-definitions - List field definitions\n  app.get(\"/api/field-definitions\", async (req: Request, res: Response) => {\n    try {\n      const { entityType } = getFieldDefinitionsQuerySchema.parse(req.query);\n      const fieldDefinitions = await storage.getFieldDefinitions(entityType);\n      \n      res.json({ data: fieldDefinitions });\n    } catch (error) {\n      console.error(\"Error fetching field definitions:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid query parameters\" : \"Failed to fetch field definitions\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // POST /api/field-definitions - Create new field definition\n  app.post(\"/api/field-definitions\", async (req: Request, res: Response) => {\n    try {\n      const fieldDefData = insertFieldDefinitionSchema.parse(req.body);\n      const fieldDefinition = await storage.createFieldDefinition(fieldDefData);\n      \n      res.status(201).json({ data: fieldDefinition });\n    } catch (error) {\n      console.error(\"Error creating field definition:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid field definition data\" : \"Failed to create field definition\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // PATCH /api/field-definitions/:id - Update field definition\n  app.patch(\"/api/field-definitions/:id\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const updateData = insertFieldDefinitionSchema.partial().parse(req.body);\n      \n      const fieldDefinition = await storage.updateFieldDefinition(id, updateData);\n      \n      if (!fieldDefinition) {\n        return res.status(404).json({ message: \"Field definition not found\" });\n      }\n\n      res.json({ data: fieldDefinition });\n    } catch (error) {\n      console.error(\"Error updating field definition:\", error);\n      res.status(400).json({ \n        message: error instanceof z.ZodError ? \"Invalid field definition data\" : \"Failed to update field definition\",\n        errors: error instanceof z.ZodError ? error.errors : undefined,\n      });\n    }\n  });\n\n  // DELETE /api/field-definitions/:id - Soft delete field definition\n  app.delete(\"/api/field-definitions/:id\", async (req: Request, res: Response) => {\n    try {\n      const { id } = req.params;\n      const success = await storage.deleteFieldDefinition(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Field definition not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting field definition:\", error);\n      res.status(500).json({ message: \"Failed to delete field definition\" });\n    }\n  });\n}\n","size_bytes":3155},"client/src/components/address-form.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Trash2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport CountrySelect from \"./country-select\";\nimport type { Address, InsertAddress } from \"@/lib/types\";\n\nconst addressSchema = z.object({\n  type: z.enum(['hq', 'billing', 'shipping', 'office', 'remote', 'home', 'other']),\n  label: z.string().optional(),\n  street1: z.string().optional(),\n  street2: z.string().optional(),\n  city: z.string().optional(),\n  state: z.string().optional(),\n  postalCode: z.string().optional(),\n  countryCode: z.string().optional(),\n  isPrimary: z.boolean().default(false),\n});\n\ntype AddressFormData = z.infer<typeof addressSchema>;\n\ninterface AddressFormProps {\n  address?: Address;\n  onSubmit?: (data: Omit<InsertAddress, 'entityType' | 'entityId'>) => void;\n  onDelete?: () => void;\n  showDelete?: boolean;\n  isPrimary?: boolean;\n  className?: string;\n}\n\nexport default function AddressForm({\n  address,\n  onSubmit,\n  onDelete,\n  showDelete = false,\n  isPrimary = false,\n  className,\n}: AddressFormProps) {\n  const form = useForm<AddressFormData>({\n    resolver: zodResolver(addressSchema),\n    defaultValues: {\n      type: address?.type || 'office',\n      label: address?.label || '',\n      street1: address?.street1 || '',\n      street2: address?.street2 || '',\n      city: address?.city || '',\n      state: address?.state || '',\n      postalCode: address?.postalCode || '',\n      countryCode: address?.countryCode || '',\n      isPrimary: address?.isPrimary || isPrimary,\n    },\n  });\n\n  const handleSubmit = (data: AddressFormData) => {\n    onSubmit?.(data);\n  };\n\n  const addressTypeLabels = {\n    hq: 'Headquarters',\n    billing: 'Billing',\n    shipping: 'Shipping',\n    office: 'Office',\n    remote: 'Remote',\n    home: 'Home',\n    other: 'Other',\n  };\n\n  return (\n    <Card className={className}>\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-base flex items-center gap-2\">\n            {address ? 'Edit Address' : 'Add Address'}\n            {form.watch('isPrimary') && (\n              <span className=\"inline-flex px-2 py-1 text-xs font-medium rounded bg-primary/10 text-primary\">\n                Primary\n              </span>\n            )}\n          </CardTitle>\n          {showDelete && onDelete && (\n            <Button\n              type=\"button\"\n              variant=\"destructive\"\n              size=\"sm\"\n              onClick={onDelete}\n              data-testid=\"button-delete-address\"\n            >\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"type\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Address Type</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-address-type\">\n                          <SelectValue placeholder=\"Select type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {Object.entries(addressTypeLabels).map(([value, label]) => (\n                          <SelectItem key={value} value={value}>\n                            {label}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"label\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Label (Optional)</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., Main Office\" {...field} data-testid=\"input-address-label\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"street1\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Street Address</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"123 Main Street\" {...field} data-testid=\"input-street1\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"street2\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Street Address 2 (Optional)</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Suite 100\" {...field} data-testid=\"input-street2\" />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"city\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>City</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"San Francisco\" {...field} data-testid=\"input-city\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"state\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>State/Province</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"CA\" {...field} data-testid=\"input-state\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"postalCode\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Postal Code</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"94105\" {...field} data-testid=\"input-postal-code\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"countryCode\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Country</FormLabel>\n                    <FormControl>\n                      <CountrySelect\n                        value={field.value}\n                        onValueChange={field.onChange}\n                        placeholder=\"Select country\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"isPrimary\"\n              render={({ field }) => (\n                <FormItem className=\"flex items-center justify-between\">\n                  <FormLabel>Primary Address</FormLabel>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                      data-testid=\"switch-primary-address\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end\">\n              <Button type=\"submit\" data-testid=\"button-save-address\">\n                {address ? 'Update Address' : 'Add Address'}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8993},"client/src/components/company-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Building, Globe, MapPin, Phone, Info } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport TagInput from \"./tag-input\";\nimport EmailList from \"./email-list\";\nimport PhoneList from \"./phone-list\";\nimport AddressForm from \"./address-form\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Company } from \"@shared/schema\";\n\nconst companySchema = z.object({\n  name: z.string().min(1, \"Company name is required\"),\n  legalName: z.string().optional(),\n  industry: z.enum([\"technology\", \"finance\", \"healthcare\", \"retail\", \"manufacturing\", \"consulting\", \"education\", \"real_estate\", \"transportation\", \"energy\", \"media\", \"hospitality\"]).optional(),\n  companyType: z.enum([\"public\", \"private\", \"nonprofit\", \"government\", \"partnership\", \"sole_proprietorship\"]).optional(),\n  employeeCountRange: z.enum([\"1\", \"2-10\", \"11-50\", \"51-200\", \"201-500\", \"501-1000\", \"1001-5000\", \"5001-10000\", \"10001+\"]).optional(),\n  foundedYear: z.coerce.number().min(1800).max(new Date().getFullYear()).optional(),\n  websiteUrl: z.string().url().optional().or(z.literal(\"\")),\n  linkedinUrl: z.string().url().optional().or(z.literal(\"\")),\n  description: z.string().optional(),\n  lifecycleStage: z.enum([\"subscriber\", \"lead\", \"marketing_qualified_lead\", \"sales_qualified_lead\", \"opportunity\", \"customer\", \"evangelist\", \"other\"]).optional(),\n  recordStatus: z.enum([\"active\", \"inactive\", \"archived\"]).default(\"active\"),\n  emailDomains: z.array(z.string()).optional(),\n  specialties: z.array(z.string()).optional(),\n  tags: z.array(z.string()).optional(),\n});\n\ntype CompanyFormData = z.infer<typeof companySchema>;\n\ninterface CompanyFormProps {\n  company?: Company;\n  onSuccess?: () => void;\n  className?: string;\n}\n\nexport default function CompanyForm({ company, onSuccess, className }: CompanyFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CompanyFormData>({\n    resolver: zodResolver(companySchema),\n    defaultValues: {\n      name: company?.name || \"\",\n      legalName: company?.legalName || \"\",\n      industry: company?.industry || undefined,\n      companyType: company?.companyType || undefined,\n      employeeCountRange: company?.employeeCountRange || undefined,\n      foundedYear: company?.foundedYear || undefined,\n      websiteUrl: company?.websiteUrl || \"\",\n      linkedinUrl: company?.linkedinUrl || \"\",\n      description: company?.description || \"\",\n      lifecycleStage: company?.lifecycleStage || \"lead\",\n      recordStatus: company?.recordStatus || \"active\",\n      emailDomains: company?.emailDomains || [],\n      specialties: company?.specialties || [],\n      tags: company?.tags || [],\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: CompanyFormData) => {\n      return apiRequest(\"POST\", \"/api/companies\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      toast({\n        title: \"Success\",\n        description: \"Company created successfully\",\n      });\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to create company\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: CompanyFormData) => {\n      return apiRequest(\"PATCH\", `/api/companies/${company!.id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\", company!.id] });\n      toast({\n        title: \"Success\",\n        description: \"Company updated successfully\",\n      });\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to update company\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (data: CompanyFormData) => {\n    setIsSubmitting(true);\n    try {\n      const submitData = {\n        ...data,\n        foundedYear: data.foundedYear || undefined,\n        websiteUrl: data.websiteUrl || undefined,\n        linkedinUrl: data.linkedinUrl || undefined,\n        description: data.description || undefined,\n        emailDomains: data.emailDomains?.filter(domain => domain.trim()) || undefined,\n        specialties: data.specialties?.filter(specialty => specialty.trim()) || undefined,\n        tags: data.tags?.filter(tag => tag.trim()) || undefined,\n      };\n\n      if (company) {\n        await updateMutation.mutateAsync(submitData);\n      } else {\n        await createMutation.mutateAsync(submitData);\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const industries = [\n    { value: \"technology\", label: \"Technology\" },\n    { value: \"finance\", label: \"Finance\" },\n    { value: \"healthcare\", label: \"Healthcare\" },\n    { value: \"retail\", label: \"Retail\" },\n    { value: \"manufacturing\", label: \"Manufacturing\" },\n    { value: \"consulting\", label: \"Consulting\" },\n    { value: \"education\", label: \"Education\" },\n    { value: \"real_estate\", label: \"Real Estate\" },\n    { value: \"transportation\", label: \"Transportation\" },\n    { value: \"energy\", label: \"Energy\" },\n    { value: \"media\", label: \"Media\" },\n    { value: \"hospitality\", label: \"Hospitality\" },\n  ];\n\n  const companyTypes = [\n    { value: \"public\", label: \"Public Company\" },\n    { value: \"private\", label: \"Private Company\" },\n    { value: \"nonprofit\", label: \"Non-profit\" },\n    { value: \"government\", label: \"Government\" },\n    { value: \"partnership\", label: \"Partnership\" },\n    { value: \"sole_proprietorship\", label: \"Sole Proprietorship\" },\n  ];\n\n  const employeeCounts = [\n    { value: \"1\", label: \"1 employee\" },\n    { value: \"2-10\", label: \"2-10 employees\" },\n    { value: \"11-50\", label: \"11-50 employees\" },\n    { value: \"51-200\", label: \"51-200 employees\" },\n    { value: \"201-500\", label: \"201-500 employees\" },\n    { value: \"501-1000\", label: \"501-1000 employees\" },\n    { value: \"1001-5000\", label: \"1001-5000 employees\" },\n    { value: \"5001-10000\", label: \"5001-10000 employees\" },\n    { value: \"10001+\", label: \"10001+ employees\" },\n  ];\n\n  const lifecycleStages = [\n    { value: \"subscriber\", label: \"Subscriber\" },\n    { value: \"lead\", label: \"Lead\" },\n    { value: \"marketing_qualified_lead\", label: \"Marketing Qualified Lead\" },\n    { value: \"sales_qualified_lead\", label: \"Sales Qualified Lead\" },\n    { value: \"opportunity\", label: \"Opportunity\" },\n    { value: \"customer\", label: \"Customer\" },\n    { value: \"evangelist\", label: \"Evangelist\" },\n    { value: \"other\", label: \"Other\" },\n  ];\n\n  return (\n    <div className={className}>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-8\">\n          \n          {/* Basic Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Building className=\"h-5 w-5 text-primary\" />\n                Basic Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Company Name *</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter company name\" {...field} data-testid=\"input-company-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"legalName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Legal Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Legal entity name\" {...field} data-testid=\"input-legal-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"industry\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Industry</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-industry\">\n                            <SelectValue placeholder=\"Select industry\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {industries.map(industry => (\n                            <SelectItem key={industry.value} value={industry.value}>\n                              {industry.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"companyType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Company Type</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-company-type\">\n                            <SelectValue placeholder=\"Select type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {companyTypes.map(type => (\n                            <SelectItem key={type.value} value={type.value}>\n                              {type.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"employeeCountRange\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Employee Count</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-employee-count\">\n                            <SelectValue placeholder=\"Select range\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {employeeCounts.map(count => (\n                            <SelectItem key={count.value} value={count.value}>\n                              {count.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"foundedYear\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Founded Year</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          min=\"1800\" \n                          max={new Date().getFullYear()}\n                          placeholder=\"e.g., 2010\" \n                          {...field}\n                          value={field.value || ''}\n                          data-testid=\"input-founded-year\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Web & Social */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Globe className=\"h-5 w-5 text-primary\" />\n                Web & Social\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"websiteUrl\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Website URL</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"url\" \n                          placeholder=\"https://company.com\" \n                          {...field} \n                          data-testid=\"input-website-url\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"linkedinUrl\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>LinkedIn URL</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"url\" \n                          placeholder=\"https://linkedin.com/company/...\" \n                          {...field} \n                          data-testid=\"input-linkedin-url\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"emailDomains\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email Domains</FormLabel>\n                    <FormControl>\n                      <TagInput\n                        value={field.value}\n                        onChange={field.onChange}\n                        placeholder=\"Add email domain (e.g., company.com)\"\n                        data-testid=\"tag-input-email-domains\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Additional Details */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Info className=\"h-5 w-5 text-primary\" />\n                Additional Details\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        rows={3} \n                        placeholder=\"Brief description of the company...\" \n                        {...field} \n                        data-testid=\"textarea-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"specialties\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Specialties/Tags</FormLabel>\n                    <FormControl>\n                      <TagInput\n                        value={field.value}\n                        onChange={field.onChange}\n                        placeholder=\"Add specialty tags...\"\n                        data-testid=\"tag-input-specialties\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"lifecycleStage\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Lifecycle Stage</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-lifecycle-stage\">\n                            <SelectValue placeholder=\"Select stage\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {lifecycleStages.map(stage => (\n                            <SelectItem key={stage.value} value={stage.value}>\n                              {stage.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"recordStatus\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-record-status\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"active\">Active</SelectItem>\n                          <SelectItem value=\"inactive\">Inactive</SelectItem>\n                          <SelectItem value=\"archived\">Archived</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"tags\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Tags</FormLabel>\n                    <FormControl>\n                      <TagInput\n                        value={field.value}\n                        onChange={field.onChange}\n                        placeholder=\"Add tags...\"\n                        data-testid=\"tag-input-tags\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n          <div className=\"flex justify-end space-x-3\">\n            <Button \n              type=\"submit\" \n              disabled={isSubmitting}\n              data-testid=\"button-save-company\"\n            >\n              {isSubmitting ? \"Saving...\" : company ? \"Update Company\" : \"Save Company\"}\n            </Button>\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n}\n","size_bytes":20591},"client/src/components/contact-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { User, Building, Briefcase, Info } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport TagInput from \"./tag-input\";\nimport { apiClient } from \"@/lib/api\";\nimport type { Contact, InsertContact, Company } from \"@/lib/types\";\n\nconst contactSchema = z.object({\n  prefix: z.string().optional(),\n  firstName: z.string().min(1, \"First name is required\"),\n  middleName: z.string().optional(),\n  lastName: z.string().min(1, \"Last name is required\"),\n  suffix: z.string().optional(),\n  preferredName: z.string().optional(),\n  pronouns: z.string().optional(),\n  headline: z.string().optional(),\n  title: z.string().optional(),\n  department: z.string().optional(),\n  seniority: z.string().optional(),\n  companyId: z.string().optional(),\n  companyNameSnapshot: z.string().optional(),\n  linkedinUrl: z.string().url().optional().or(z.literal(\"\")),\n  locationLabel: z.string().optional(),\n  timeZone: z.string().optional(),\n  employmentStartDate: z.string().optional(),\n  employmentEndDate: z.string().optional(),\n  isCurrentEmployee: z.boolean().default(true),\n  lifecycleStage: z.string().optional(),\n  recordStatus: z.string().default(\"active\"),\n  notes: z.string().optional(),\n  tags: z.array(z.string()).optional(),\n});\n\ntype ContactFormData = z.infer<typeof contactSchema>;\n\ninterface ContactFormProps {\n  contact?: Contact;\n  onSuccess?: () => void;\n  className?: string;\n}\n\nexport default function ContactForm({ contact, onSuccess, className }: ContactFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<ContactFormData>({\n    resolver: zodResolver(contactSchema),\n    defaultValues: {\n      prefix: contact?.prefix || \"\",\n      firstName: contact?.firstName || \"\",\n      middleName: contact?.middleName || \"\",\n      lastName: contact?.lastName || \"\",\n      suffix: contact?.suffix || \"\",\n      preferredName: contact?.preferredName || \"\",\n      pronouns: contact?.pronouns || \"\",\n      headline: contact?.headline || \"\",\n      title: contact?.title || \"\",\n      department: contact?.department || \"\",\n      seniority: contact?.seniority || \"\",\n      companyId: contact?.companyId || \"\",\n      companyNameSnapshot: contact?.companyNameSnapshot || \"\",\n      linkedinUrl: contact?.linkedinUrl || \"\",\n      locationLabel: contact?.locationLabel || \"\",\n      timeZone: contact?.timeZone || \"\",\n      employmentStartDate: contact?.employmentStartDate ? new Date(contact.employmentStartDate).toISOString().split('T')[0] : \"\",\n      employmentEndDate: contact?.employmentEndDate ? new Date(contact.employmentEndDate).toISOString().split('T')[0] : \"\",\n      isCurrentEmployee: contact?.isCurrentEmployee ?? true,\n      lifecycleStage: contact?.lifecycleStage || \"lead\",\n      recordStatus: contact?.recordStatus || \"active\",\n      notes: contact?.notes || \"\",\n      tags: contact?.tags || [],\n    },\n  });\n\n  // Fetch companies for company selection\n  const { data: companiesData } = useQuery({\n    queryKey: [\"/api/companies\", { limit: 100, sort: \"name:asc\" }],\n    refetchOnWindowFocus: false,\n  });\n\n  const companies = companiesData?.data || [];\n\n  const createMutation = useMutation({\n    mutationFn: apiClient.contacts.create,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n      toast({\n        title: \"Success\",\n        description: \"Contact created successfully\",\n      });\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to create contact\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: Partial<InsertContact>) => apiClient.contacts.update(contact!.id, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/contacts\", contact!.id] });\n      toast({\n        title: \"Success\",\n        description: \"Contact updated successfully\",\n      });\n      onSuccess?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to update contact\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = async (data: ContactFormData) => {\n    setIsSubmitting(true);\n    try {\n      const submitData: InsertContact = {\n        ...data,\n        prefix: data.prefix || null,\n        middleName: data.middleName || null,\n        suffix: data.suffix || null,\n        preferredName: data.preferredName || null,\n        pronouns: data.pronouns || null,\n        headline: data.headline || null,\n        title: data.title || null,\n        department: data.department || null,\n        seniority: data.seniority as any || null,\n        companyId: data.companyId || null,\n        companyNameSnapshot: data.companyNameSnapshot || null,\n        linkedinUrl: data.linkedinUrl || null,\n        locationLabel: data.locationLabel || null,\n        timeZone: data.timeZone || null,\n        employmentStartDate: data.employmentStartDate ? new Date(data.employmentStartDate) : null,\n        employmentEndDate: data.employmentEndDate ? new Date(data.employmentEndDate) : null,\n        notes: data.notes || null,\n        tags: data.tags?.filter(tag => tag.trim()) || null,\n        lifecycleStage: data.lifecycleStage as any || \"lead\",\n        recordStatus: data.recordStatus as any || \"active\",\n      };\n\n      if (contact) {\n        await updateMutation.mutateAsync(submitData);\n      } else {\n        await createMutation.mutateAsync(submitData);\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const prefixes = [\n    { value: \"Mr.\", label: \"Mr.\" },\n    { value: \"Ms.\", label: \"Ms.\" },\n    { value: \"Mrs.\", label: \"Mrs.\" },\n    { value: \"Dr.\", label: \"Dr.\" },\n    { value: \"Prof.\", label: \"Prof.\" },\n  ];\n\n  const suffixes = [\n    { value: \"Jr.\", label: \"Jr.\" },\n    { value: \"Sr.\", label: \"Sr.\" },\n    { value: \"II\", label: \"II\" },\n    { value: \"III\", label: \"III\" },\n    { value: \"PhD\", label: \"PhD\" },\n    { value: \"MD\", label: \"MD\" },\n  ];\n\n  const seniorities = [\n    { value: \"intern\", label: \"Intern\" },\n    { value: \"entry\", label: \"Entry\" },\n    { value: \"mid\", label: \"Mid\" },\n    { value: \"senior\", label: \"Senior\" },\n    { value: \"lead\", label: \"Lead\" },\n    { value: \"principal\", label: \"Principal\" },\n    { value: \"manager\", label: \"Manager\" },\n    { value: \"director\", label: \"Director\" },\n    { value: \"vp\", label: \"VP\" },\n    { value: \"c_level\", label: \"C-Level\" },\n    { value: \"owner\", label: \"Owner\" },\n  ];\n\n  const lifecycleStages = [\n    { value: \"subscriber\", label: \"Subscriber\" },\n    { value: \"lead\", label: \"Lead\" },\n    { value: \"marketing_qualified_lead\", label: \"Marketing Qualified Lead\" },\n    { value: \"sales_qualified_lead\", label: \"Sales Qualified Lead\" },\n    { value: \"opportunity\", label: \"Opportunity\" },\n    { value: \"customer\", label: \"Customer\" },\n    { value: \"evangelist\", label: \"Evangelist\" },\n    { value: \"other\", label: \"Other\" },\n  ];\n\n  return (\n    <div className={className}>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-8\">\n          \n          {/* Personal Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <User className=\"h-5 w-5 text-primary\" />\n                Personal Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-12 gap-4\">\n                <div className=\"col-span-2\">\n                  <FormField\n                    control={form.control}\n                    name=\"prefix\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Prefix</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-prefix\">\n                              <SelectValue placeholder=\"Prefix\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {prefixes.map(prefix => (\n                              <SelectItem key={prefix.value} value={prefix.value}>\n                                {prefix.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"col-span-3\">\n                  <FormField\n                    control={form.control}\n                    name=\"firstName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>First Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"First name\" {...field} data-testid=\"input-first-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"col-span-3\">\n                  <FormField\n                    control={form.control}\n                    name=\"middleName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Middle Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Middle name\" {...field} data-testid=\"input-middle-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"col-span-3\">\n                  <FormField\n                    control={form.control}\n                    name=\"lastName\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Last Name *</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Last name\" {...field} data-testid=\"input-last-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"col-span-1\">\n                  <FormField\n                    control={form.control}\n                    name=\"suffix\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Suffix</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-suffix\">\n                              <SelectValue placeholder=\"Suffix\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {suffixes.map(suffix => (\n                              <SelectItem key={suffix.value} value={suffix.value}>\n                                {suffix.label}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"preferredName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Preferred Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"How they prefer to be called\" {...field} data-testid=\"input-preferred-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"pronouns\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Pronouns</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., they/them, she/her, he/him\" {...field} data-testid=\"input-pronouns\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"headline\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Headline</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"Professional headline or tagline\" {...field} data-testid=\"input-headline\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"linkedinUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>LinkedIn URL</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"url\" \n                        placeholder=\"https://linkedin.com/in/...\" \n                        {...field} \n                        data-testid=\"input-linkedin-url\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Company & Employment */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Building className=\"h-5 w-5 text-primary\" />\n                Company & Employment\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"companyId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Company</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-company\">\n                          <SelectValue placeholder=\"Select company\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {companies.map((company: Company) => (\n                          <SelectItem key={company.id} value={company.id}>\n                            {company.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"companyNameSnapshot\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Company Name (Snapshot)</FormLabel>\n                    <FormControl>\n                      <Input \n                        placeholder=\"Company name at time of contact creation\" \n                        {...field} \n                        data-testid=\"input-company-snapshot\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Job Title</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Software Engineer\" {...field} data-testid=\"input-title\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"department\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Department</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Engineering\" {...field} data-testid=\"input-department\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"seniority\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Seniority</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-seniority\">\n                            <SelectValue placeholder=\"Select seniority\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {seniorities.map(seniority => (\n                            <SelectItem key={seniority.value} value={seniority.value}>\n                              {seniority.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"locationLabel\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"San Francisco, CA\" {...field} data-testid=\"input-location\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"employmentStartDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Employment Start Date</FormLabel>\n                      <FormControl>\n                        <Input type=\"date\" {...field} data-testid=\"input-start-date\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"employmentEndDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Employment End Date</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"date\" \n                          {...field} \n                          disabled={form.watch('isCurrentEmployee')}\n                          data-testid=\"input-end-date\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"isCurrentEmployee\"\n                render={({ field }) => (\n                  <FormItem className=\"flex items-center justify-between\">\n                    <FormLabel>Current Employee</FormLabel>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-current-employee\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n          {/* Additional Details */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg flex items-center gap-2\">\n                <Info className=\"h-5 w-5 text-primary\" />\n                Additional Details\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"lifecycleStage\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Lifecycle Stage</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-lifecycle-stage\">\n                            <SelectValue placeholder=\"Select stage\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {lifecycleStages.map(stage => (\n                            <SelectItem key={stage.value} value={stage.value}>\n                              {stage.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"recordStatus\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-record-status\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"active\">Active</SelectItem>\n                          <SelectItem value=\"inactive\">Inactive</SelectItem>\n                          <SelectItem value=\"archived\">Archived</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"notes\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Notes</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        rows={3} \n                        placeholder=\"Additional notes about this contact...\" \n                        {...field} \n                        data-testid=\"textarea-notes\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"tags\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Tags</FormLabel>\n                    <FormControl>\n                      <TagInput\n                        value={field.value}\n                        onChange={field.onChange}\n                        placeholder=\"Add tags...\"\n                        data-testid=\"tag-input-tags\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </CardContent>\n          </Card>\n\n          <div className=\"flex justify-end space-x-3\">\n            <Button \n              type=\"submit\" \n              disabled={isSubmitting}\n              data-testid=\"button-save-contact\"\n            >\n              {isSubmitting ? \"Saving...\" : contact ? \"Update Contact\" : \"Save Contact\"}\n            </Button>\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n}\n","size_bytes":25962},"client/src/components/country-select.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Check, ChevronDown } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport countries from \"../../../data/countries.json\";\nimport type { Country } from \"@/lib/types\";\n\ninterface CountrySelectProps {\n  value?: string;\n  onValueChange?: (value: string) => void;\n  placeholder?: string;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport default function CountrySelect({\n  value,\n  onValueChange,\n  placeholder = \"Select country\",\n  disabled = false,\n  className,\n}: CountrySelectProps) {\n  const [open, setOpen] = useState(false);\n\n  const selectedCountry = useMemo(() => {\n    return countries.find((country: Country) => country.code === value);\n  }, [value]);\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"outline\"\n          role=\"combobox\"\n          aria-expanded={open}\n          className={cn(\"w-full justify-between\", className)}\n          disabled={disabled}\n          data-testid=\"button-country-select\"\n        >\n          {selectedCountry ? (\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-lg\">{selectedCountry.flag}</span>\n              <span>{selectedCountry.name}</span>\n            </div>\n          ) : (\n            placeholder\n          )}\n          <ChevronDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-full p-0\" align=\"start\">\n        <Command>\n          <CommandInput placeholder=\"Search countries...\" data-testid=\"input-country-search\" />\n          <CommandList>\n            <CommandEmpty>No country found.</CommandEmpty>\n            <CommandGroup>\n              {countries.map((country: Country) => (\n                <CommandItem\n                  key={country.code}\n                  value={`${country.name} ${country.code}`}\n                  onSelect={() => {\n                    onValueChange?.(country.code);\n                    setOpen(false);\n                  }}\n                  data-testid={`option-country-${country.code}`}\n                >\n                  <div className=\"flex items-center space-x-2 flex-1\">\n                    <span className=\"text-lg\">{country.flag}</span>\n                    <span>{country.name}</span>\n                  </div>\n                  <Check\n                    className={cn(\n                      \"ml-2 h-4 w-4\",\n                      value === country.code ? \"opacity-100\" : \"opacity-0\"\n                    )}\n                  />\n                </CommandItem>\n              ))}\n            </CommandGroup>\n          </CommandList>\n        </Command>\n      </PopoverContent>\n    </Popover>\n  );\n}\n","size_bytes":2994},"client/src/components/data-table.tsx":{"content":"import { ReactNode, useState } from \"react\";\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface Column<T> {\n  key: string;\n  label: string;\n  render?: (item: T) => ReactNode;\n  sortable?: boolean;\n  width?: string;\n}\n\ninterface Action<T> {\n  label: string;\n  onClick: (item: T) => void;\n  variant?: \"default\" | \"destructive\";\n}\n\ninterface DataTableProps<T> {\n  data: T[];\n  columns: Column<T>[];\n  actions?: Action<T>[];\n  loading?: boolean;\n  pagination?: {\n    page: number;\n    pageSize: number;\n    total: number;\n    hasNext: boolean;\n    onPageChange: (page: number) => void;\n    onPageSizeChange: (pageSize: number) => void;\n  };\n  sorting?: {\n    sortBy: string;\n    onSortChange: (sortBy: string) => void;\n    options: { value: string; label: string }[];\n  };\n  selection?: {\n    selectedItems: Set<string>;\n    onSelectionChange: (selectedItems: Set<string>) => void;\n    getItemId: (item: T) => string;\n  };\n  emptyMessage?: string;\n  className?: string;\n}\n\nexport default function DataTable<T>({\n  data,\n  columns,\n  actions,\n  loading = false,\n  pagination,\n  sorting,\n  selection,\n  emptyMessage = \"No data available\",\n  className,\n}: DataTableProps<T>) {\n  const [hoveredRow, setHoveredRow] = useState<string | null>(null);\n\n  const handleSelectAll = (checked: boolean) => {\n    if (!selection) return;\n    \n    if (checked) {\n      const allIds = new Set(data.map(selection.getItemId));\n      selection.onSelectionChange(allIds);\n    } else {\n      selection.onSelectionChange(new Set());\n    }\n  };\n\n  const handleSelectItem = (itemId: string, checked: boolean) => {\n    if (!selection) return;\n    \n    const newSelection = new Set(selection.selectedItems);\n    if (checked) {\n      newSelection.add(itemId);\n    } else {\n      newSelection.delete(itemId);\n    }\n    selection.onSelectionChange(newSelection);\n  };\n\n  const isAllSelected = selection\n    ? data.length > 0 && data.every(item => selection.selectedItems.has(selection.getItemId(item)))\n    : false;\n\n  const isIndeterminate = selection\n    ? selection.selectedItems.size > 0 && !isAllSelected\n    : false;\n\n  return (\n    <div className={className}>\n      {/* Table Header */}\n      {(pagination || sorting) && (\n        <div className=\"flex items-center justify-between p-4 border-b border-border\">\n          <div className=\"flex items-center space-x-4\">\n            {pagination && (\n              <span className=\"text-sm text-muted-foreground\" data-testid=\"table-count\">\n                Showing <span className=\"font-medium text-foreground\">{data.length}</span> of{\" \"}\n                <span className=\"font-medium text-foreground\">{pagination.total}</span> items\n              </span>\n            )}\n          </div>\n\n          {sorting && (\n            <div className=\"flex items-center space-x-3\">\n              <Select value={sorting.sortBy} onValueChange={sorting.onSortChange}>\n                <SelectTrigger className=\"w-48\" data-testid=\"table-sort\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {sorting.options.map(option => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Table Content */}\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              {selection && (\n                <TableHead className=\"w-12\">\n                  <Checkbox\n                    checked={isAllSelected}\n                    onCheckedChange={handleSelectAll}\n                    data-testid=\"checkbox-select-all\"\n                  />\n                </TableHead>\n              )}\n              {columns.map(column => (\n                <TableHead key={column.key} style={{ width: column.width }}>\n                  {column.label}\n                </TableHead>\n              ))}\n              {actions && actions.length > 0 && (\n                <TableHead className=\"text-right\">Actions</TableHead>\n              )}\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {loading ? (\n              Array.from({ length: 5 }).map((_, index) => (\n                <TableRow key={index}>\n                  {selection && (\n                    <TableCell><Skeleton className=\"h-4 w-4\" /></TableCell>\n                  )}\n                  {columns.map(column => (\n                    <TableCell key={column.key}>\n                      <Skeleton className=\"h-4 w-24\" />\n                    </TableCell>\n                  ))}\n                  {actions && actions.length > 0 && (\n                    <TableCell><Skeleton className=\"h-8 w-24\" /></TableCell>\n                  )}\n                </TableRow>\n              ))\n            ) : data.length === 0 ? (\n              <TableRow>\n                <TableCell \n                  colSpan={columns.length + (selection ? 1 : 0) + (actions?.length ? 1 : 0)} \n                  className=\"text-center py-8\"\n                >\n                  <div className=\"text-muted-foreground\">\n                    <p className=\"text-sm\">{emptyMessage}</p>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ) : (\n              data.map((item, index) => {\n                const itemId = selection?.getItemId(item) || index.toString();\n                const isSelected = selection?.selectedItems.has(itemId) || false;\n                \n                return (\n                  <TableRow\n                    key={itemId}\n                    className=\"hover:bg-muted/30 transition-colors\"\n                    onMouseEnter={() => setHoveredRow(itemId)}\n                    onMouseLeave={() => setHoveredRow(null)}\n                    data-testid={`table-row-${itemId}`}\n                  >\n                    {selection && (\n                      <TableCell>\n                        <Checkbox\n                          checked={isSelected}\n                          onCheckedChange={(checked) => handleSelectItem(itemId, !!checked)}\n                          data-testid={`checkbox-item-${itemId}`}\n                        />\n                      </TableCell>\n                    )}\n                    {columns.map(column => (\n                      <TableCell key={column.key} data-testid={`cell-${column.key}-${itemId}`}>\n                        {column.render ? column.render(item) : String((item as any)[column.key] || '')}\n                      </TableCell>\n                    ))}\n                    {actions && actions.length > 0 && (\n                      <TableCell className=\"text-right\">\n                        <div className=\"flex items-center justify-end space-x-2\">\n                          {actions.length <= 3 ? (\n                            actions.map((action, actionIndex) => (\n                              <Button\n                                key={actionIndex}\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => action.onClick(item)}\n                                className={action.variant === \"destructive\" ? \"text-destructive hover:text-destructive\" : \"\"}\n                                data-testid={`action-${action.label.toLowerCase().replace(/\\s+/g, '-')}-${itemId}`}\n                              >\n                                {action.label}\n                              </Button>\n                            ))\n                          ) : (\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  data-testid={`actions-menu-${itemId}`}\n                                >\n                                  <MoreHorizontal className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                {actions.map((action, actionIndex) => (\n                                  <DropdownMenuItem\n                                    key={actionIndex}\n                                    onClick={() => action.onClick(item)}\n                                    className={action.variant === \"destructive\" ? \"text-destructive\" : \"\"}\n                                  >\n                                    {action.label}\n                                  </DropdownMenuItem>\n                                ))}\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          )}\n                        </div>\n                      </TableCell>\n                    )}\n                  </TableRow>\n                );\n              })\n            )}\n          </TableBody>\n        </Table>\n      </div>\n\n      {/* Pagination */}\n      {pagination && (\n        <div className=\"flex items-center justify-between px-4 py-3 border-t border-border\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-muted-foreground\">Show</span>\n            <Select \n              value={pagination.pageSize.toString()} \n              onValueChange={(value) => pagination.onPageSizeChange(parseInt(value))}\n            >\n              <SelectTrigger className=\"w-20\" data-testid=\"page-size-select\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"25\">25</SelectItem>\n                <SelectItem value=\"50\">50</SelectItem>\n                <SelectItem value=\"100\">100</SelectItem>\n              </SelectContent>\n            </Select>\n            <span className=\"text-sm text-muted-foreground\">per page</span>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              disabled={pagination.page <= 1}\n              onClick={() => pagination.onPageChange(pagination.page - 1)}\n              data-testid=\"previous-page\"\n            >\n              <ChevronLeft className=\"h-4 w-4 mr-1\" />\n              Previous\n            </Button>\n\n            <span className=\"text-sm text-muted-foreground\">\n              Page {pagination.page}\n            </span>\n\n            <Button \n              variant=\"outline\" \n              size=\"sm\" \n              disabled={!pagination.hasNext}\n              onClick={() => pagination.onPageChange(pagination.page + 1)}\n              data-testid=\"next-page\"\n            >\n              Next\n              <ChevronRight className=\"h-4 w-4 ml-1\" />\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":11459},"client/src/components/email-list.tsx":{"content":"import { useState } from \"react\";\nimport { Plus, Trash2, Mail } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Email, InsertEmail } from \"@/lib/types\";\n\ninterface EmailEntry {\n  id?: string;\n  type: string;\n  email: string;\n  isPrimary: boolean;\n  isVerified?: boolean;\n}\n\ninterface EmailListProps {\n  emails?: Email[];\n  onChange?: (emails: Omit<InsertEmail, 'entityType' | 'entityId'>[]) => void;\n  className?: string;\n}\n\nexport default function EmailList({ emails = [], onChange, className }: EmailListProps) {\n  const [emailList, setEmailList] = useState<EmailEntry[]>(\n    emails.length > 0\n      ? emails.map(email => ({\n          id: email.id,\n          type: email.type,\n          email: email.email,\n          isPrimary: email.isPrimary,\n          isVerified: email.isVerified,\n        }))\n      : [{ type: 'work', email: '', isPrimary: true }]\n  );\n\n  const emailTypes = [\n    { value: 'work', label: 'Work' },\n    { value: 'personal', label: 'Personal' },\n    { value: 'sales', label: 'Sales' },\n    { value: 'support', label: 'Support' },\n    { value: 'billing', label: 'Billing' },\n    { value: 'other', label: 'Other' },\n  ];\n\n  const updateEmail = (index: number, field: keyof EmailEntry, value: any) => {\n    const updated = [...emailList];\n    updated[index] = { ...updated[index], [field]: value };\n\n    // Ensure only one primary email\n    if (field === 'isPrimary' && value) {\n      updated.forEach((email, i) => {\n        if (i !== index) {\n          email.isPrimary = false;\n        }\n      });\n    }\n\n    setEmailList(updated);\n    onChange?.(updated.filter(email => email.email.trim()));\n  };\n\n  const addEmail = () => {\n    setEmailList([...emailList, { type: 'work', email: '', isPrimary: false }]);\n  };\n\n  const removeEmail = (index: number) => {\n    const updated = emailList.filter((_, i) => i !== index);\n    setEmailList(updated);\n    onChange?.(updated.filter(email => email.email.trim()));\n  };\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"text-base flex items-center gap-2\">\n          <Mail className=\"h-4 w-4\" />\n          Email Addresses\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {emailList.map((emailEntry, index) => (\n          <div key={index} className=\"flex items-center gap-3 p-3 border rounded-none\" data-testid={`email-entry-${index}`}>\n            <Select\n              value={emailEntry.type}\n              onValueChange={(value) => updateEmail(index, 'type', value)}\n            >\n              <SelectTrigger className=\"w-32\" data-testid={`select-email-type-${index}`}>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {emailTypes.map(type => (\n                  <SelectItem key={type.value} value={type.value}>\n                    {type.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Input\n              type=\"email\"\n              placeholder=\"email@example.com\"\n              value={emailEntry.email}\n              onChange={(e) => updateEmail(index, 'email', e.target.value)}\n              className=\"flex-1\"\n              data-testid={`input-email-${index}`}\n            />\n\n            <div className=\"flex items-center gap-2\">\n              <div className=\"text-xs text-muted-foreground\">Primary</div>\n              <Switch\n                checked={emailEntry.isPrimary}\n                onCheckedChange={(checked) => updateEmail(index, 'isPrimary', checked)}\n                data-testid={`switch-email-primary-${index}`}\n              />\n            </div>\n\n            {emailEntry.isVerified && (\n              <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                Verified\n              </Badge>\n            )}\n\n            {emailList.length > 1 && (\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => removeEmail(index)}\n                className=\"text-destructive hover:text-destructive\"\n                data-testid={`button-remove-email-${index}`}\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        ))}\n\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={addEmail}\n          className=\"w-full\"\n          data-testid=\"button-add-email\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Email\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4970},"client/src/components/filter-chips.tsx":{"content":"import { X } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface FilterChip {\n  key: string;\n  label: string;\n  value: string;\n}\n\ninterface FilterChipsProps {\n  filters: FilterChip[];\n  onRemove?: (key: string) => void;\n  onClearAll?: () => void;\n  className?: string;\n}\n\nexport default function FilterChips({ \n  filters, \n  onRemove, \n  onClearAll, \n  className \n}: FilterChipsProps) {\n  if (filters.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={`flex items-center gap-2 ${className}`} data-testid=\"filter-chips-container\">\n      <span className=\"text-sm text-muted-foreground\">Active filters:</span>\n      \n      {filters.map((filter) => (\n        <Badge \n          key={filter.key} \n          variant=\"secondary\" \n          className=\"flex items-center gap-2 px-3 py-1\"\n          data-testid={`filter-chip-${filter.key}`}\n        >\n          <span>{filter.label}: {filter.value}</span>\n          {onRemove && (\n            <Button\n              type=\"button\"\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-4 w-4 p-0 hover:bg-secondary/80\"\n              onClick={() => onRemove(filter.key)}\n              data-testid={`button-remove-filter-${filter.key}`}\n            >\n              <X className=\"h-3 w-3\" />\n            </Button>\n          )}\n        </Badge>\n      ))}\n      \n      {onClearAll && filters.length > 1 && (\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onClearAll}\n          className=\"text-xs text-muted-foreground hover:text-foreground\"\n          data-testid=\"button-clear-all-filters\"\n        >\n          Clear all\n        </Button>\n      )}\n    </div>\n  );\n}\n","size_bytes":1774},"client/src/components/phone-list.tsx":{"content":"import { useState } from \"react\";\nimport { Plus, Trash2, Phone } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Phone as PhoneType, InsertPhone } from \"@/lib/types\";\n\ninterface PhoneEntry {\n  id?: string;\n  type: string;\n  phone: string;\n  isPrimary: boolean;\n  isVerified?: boolean;\n}\n\ninterface PhoneListProps {\n  phones?: PhoneType[];\n  onChange?: (phones: Omit<InsertPhone, 'entityType' | 'entityId'>[]) => void;\n  className?: string;\n}\n\nexport default function PhoneList({ phones = [], onChange, className }: PhoneListProps) {\n  const [phoneList, setPhoneList] = useState<PhoneEntry[]>(\n    phones.length > 0\n      ? phones.map(phone => ({\n          id: phone.id,\n          type: phone.type,\n          phone: phone.phone,\n          isPrimary: phone.isPrimary,\n          isVerified: phone.isVerified,\n        }))\n      : [{ type: 'work', phone: '', isPrimary: true }]\n  );\n\n  const phoneTypes = [\n    { value: 'work', label: 'Work' },\n    { value: 'personal', label: 'Personal' },\n    { value: 'mobile', label: 'Mobile' },\n    { value: 'fax', label: 'Fax' },\n    { value: 'other', label: 'Other' },\n  ];\n\n  const updatePhone = (index: number, field: keyof PhoneEntry, value: any) => {\n    const updated = [...phoneList];\n    updated[index] = { ...updated[index], [field]: value };\n\n    // Ensure only one primary phone\n    if (field === 'isPrimary' && value) {\n      updated.forEach((phone, i) => {\n        if (i !== index) {\n          phone.isPrimary = false;\n        }\n      });\n    }\n\n    setPhoneList(updated);\n    onChange?.(updated.filter(phone => phone.phone.trim()));\n  };\n\n  const addPhone = () => {\n    setPhoneList([...phoneList, { type: 'work', phone: '', isPrimary: false }]);\n  };\n\n  const removePhone = (index: number) => {\n    const updated = phoneList.filter((_, i) => i !== index);\n    setPhoneList(updated);\n    onChange?.(updated.filter(phone => phone.phone.trim()));\n  };\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"text-base flex items-center gap-2\">\n          <Phone className=\"h-4 w-4\" />\n          Phone Numbers\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {phoneList.map((phoneEntry, index) => (\n          <div key={index} className=\"flex items-center gap-3 p-3 border rounded-none\" data-testid={`phone-entry-${index}`}>\n            <Select\n              value={phoneEntry.type}\n              onValueChange={(value) => updatePhone(index, 'type', value)}\n            >\n              <SelectTrigger className=\"w-32\" data-testid={`select-phone-type-${index}`}>\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                {phoneTypes.map(type => (\n                  <SelectItem key={type.value} value={type.value}>\n                    {type.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Input\n              type=\"tel\"\n              placeholder=\"+1 (555) 123-4567\"\n              value={phoneEntry.phone}\n              onChange={(e) => updatePhone(index, 'phone', e.target.value)}\n              className=\"flex-1\"\n              data-testid={`input-phone-${index}`}\n            />\n\n            <div className=\"flex items-center gap-2\">\n              <div className=\"text-xs text-muted-foreground\">Primary</div>\n              <Switch\n                checked={phoneEntry.isPrimary}\n                onCheckedChange={(checked) => updatePhone(index, 'isPrimary', checked)}\n                data-testid={`switch-phone-primary-${index}`}\n              />\n            </div>\n\n            {phoneEntry.isVerified && (\n              <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                Verified\n              </Badge>\n            )}\n\n            {phoneList.length > 1 && (\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => removePhone(index)}\n                className=\"text-destructive hover:text-destructive\"\n                data-testid={`button-remove-phone-${index}`}\n              >\n                <Trash2 className=\"h-4 w-4\" />\n              </Button>\n            )}\n          </div>\n        ))}\n\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          onClick={addPhone}\n          className=\"w-full\"\n          data-testid=\"button-add-phone\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Add Phone\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4935},"client/src/components/search-input.tsx":{"content":"import { useState, useEffect, useCallback } from \"react\";\nimport { Search, X } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SearchInputProps {\n  value?: string;\n  onChange?: (value: string) => void;\n  placeholder?: string;\n  debounceMs?: number;\n  className?: string;\n  disabled?: boolean;\n}\n\nexport default function SearchInput({\n  value = \"\",\n  onChange,\n  placeholder = \"Search...\",\n  debounceMs = 300,\n  className,\n  disabled = false,\n}: SearchInputProps) {\n  const [localValue, setLocalValue] = useState(value);\n\n  const debouncedOnChange = useCallback(\n    debounce((searchValue: string) => {\n      onChange?.(searchValue);\n    }, debounceMs),\n    [onChange, debounceMs]\n  );\n\n  useEffect(() => {\n    debouncedOnChange(localValue);\n  }, [localValue, debouncedOnChange]);\n\n  useEffect(() => {\n    setLocalValue(value);\n  }, [value]);\n\n  const handleClear = () => {\n    setLocalValue(\"\");\n    onChange?.(\"\");\n  };\n\n  return (\n    <div className={cn(\"relative\", className)}>\n      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n      <Input\n        type=\"text\"\n        value={localValue}\n        onChange={(e) => setLocalValue(e.target.value)}\n        placeholder={placeholder}\n        className={cn(\"pl-10\", localValue && \"pr-10\")}\n        disabled={disabled}\n        data-testid=\"search-input\"\n      />\n      {localValue && (\n        <Button\n          type=\"button\"\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleClear}\n          className=\"absolute right-1 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0 hover:bg-muted\"\n          data-testid=\"button-clear-search\"\n        >\n          <X className=\"h-4 w-4\" />\n        </Button>\n      )}\n    </div>\n  );\n}\n\n// Debounce utility function\nfunction debounce<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n}\n","size_bytes":2164},"client/src/components/sort-picker.tsx":{"content":"import { ChevronDown } from \"lucide-react\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\ninterface SortOption {\n  value: string;\n  label: string;\n}\n\ninterface SortPickerProps {\n  value?: string;\n  onValueChange?: (value: string) => void;\n  options: SortOption[];\n  placeholder?: string;\n  className?: string;\n  disabled?: boolean;\n}\n\nexport default function SortPicker({\n  value,\n  onValueChange,\n  options,\n  placeholder = \"Sort by...\",\n  className,\n  disabled = false,\n}: SortPickerProps) {\n  return (\n    <Select \n      value={value} \n      onValueChange={onValueChange} \n      disabled={disabled}\n    >\n      <SelectTrigger className={className} data-testid=\"sort-picker\">\n        <SelectValue placeholder={placeholder} />\n        <ChevronDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n      </SelectTrigger>\n      <SelectContent>\n        {options.map(option => (\n          <SelectItem \n            key={option.value} \n            value={option.value}\n            data-testid={`sort-option-${option.value}`}\n          >\n            {option.label}\n          </SelectItem>\n        ))}\n      </SelectContent>\n    </Select>\n  );\n}\n","size_bytes":1197},"client/src/components/tag-input.tsx":{"content":"import { useState, KeyboardEvent } from \"react\";\nimport { X } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface TagInputProps {\n  value?: string[];\n  onChange?: (tags: string[]) => void;\n  placeholder?: string;\n  className?: string;\n  disabled?: boolean;\n  maxTags?: number;\n}\n\nexport default function TagInput({\n  value = [],\n  onChange,\n  placeholder = \"Add tags...\",\n  className,\n  disabled = false,\n  maxTags,\n}: TagInputProps) {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const addTag = (tag: string) => {\n    const trimmedTag = tag.trim();\n    if (trimmedTag && !value.includes(trimmedTag)) {\n      if (!maxTags || value.length < maxTags) {\n        onChange?.([...value, trimmedTag]);\n        setInputValue(\"\");\n      }\n    }\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    onChange?.(value.filter(tag => tag !== tagToRemove));\n  };\n\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\" || e.key === \",\") {\n      e.preventDefault();\n      addTag(inputValue);\n    } else if (e.key === \"Backspace\" && !inputValue && value.length > 0) {\n      removeTag(value[value.length - 1]);\n    }\n  };\n\n  const handleBlur = () => {\n    if (inputValue.trim()) {\n      addTag(inputValue);\n    }\n  };\n\n  return (\n    <div className={cn(\"space-y-2\", className)}>\n      {value.length > 0 && (\n        <div className=\"flex flex-wrap gap-2\" data-testid=\"tag-container\">\n          {value.map((tag, index) => (\n            <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1 px-2 py-1\" data-testid={`tag-${index}`}>\n              <span>{tag}</span>\n              {!disabled && (\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"h-4 w-4 p-0 hover:bg-secondary/80\"\n                  onClick={() => removeTag(tag)}\n                  data-testid={`button-remove-tag-${index}`}\n                >\n                  <X className=\"h-3 w-3\" />\n                </Button>\n              )}\n            </Badge>\n          ))}\n        </div>\n      )}\n      \n      <Input\n        type=\"text\"\n        value={inputValue}\n        onChange={(e) => setInputValue(e.target.value)}\n        onKeyDown={handleKeyDown}\n        onBlur={handleBlur}\n        placeholder={placeholder}\n        disabled={disabled || (maxTags ? value.length >= maxTags : false)}\n        data-testid=\"input-tag\"\n      />\n      \n      {maxTags && (\n        <div className=\"text-xs text-muted-foreground\">\n          {value.length} / {maxTags} tags\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":2760},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import { apiRequest } from \"./queryClient\";\nimport type { \n  Company, \n  Contact, \n  InsertCompany, \n  InsertContact,\n  Address,\n  Email,\n  Phone,\n  InsertAddress,\n  InsertEmail,\n  InsertPhone,\n  CompanySearchParams,\n  ContactSearchParams,\n  ApiResponse \n} from \"./types\";\n\nexport const apiClient = {\n  // Company endpoints\n  companies: {\n    list: (params: CompanySearchParams = {}) => {\n      const searchParams = new URLSearchParams();\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== '') {\n          searchParams.append(key, value.toString());\n        }\n      });\n      const queryString = searchParams.toString();\n      return `/api/companies${queryString ? `?${queryString}` : ''}`;\n    },\n    \n    get: (id: string, include?: string) => {\n      const params = include ? `?include=${include}` : '';\n      return `/api/companies/${id}${params}`;\n    },\n    \n    create: async (data: InsertCompany): Promise<Company> => {\n      const response = await apiRequest(\"POST\", \"/api/companies\", data);\n      const result = await response.json();\n      return result.data;\n    },\n    \n    update: async (id: string, data: Partial<InsertCompany>): Promise<Company> => {\n      const response = await apiRequest(\"PATCH\", `/api/companies/${id}`, data);\n      const result = await response.json();\n      return result.data;\n    },\n    \n    delete: async (id: string): Promise<void> => {\n      await apiRequest(\"DELETE\", `/api/companies/${id}`);\n    },\n    \n    addAddress: async (id: string, data: Omit<InsertAddress, 'entityType' | 'entityId'>): Promise<Address> => {\n      const response = await apiRequest(\"POST\", `/api/companies/${id}/addresses`, data);\n      const result = await response.json();\n      return result.data;\n    },\n    \n    addEmail: async (id: string, data: Omit<InsertEmail, 'entityType' | 'entityId'>): Promise<Email> => {\n      const response = await apiRequest(\"POST\", `/api/companies/${id}/emails`, data);\n      const result = await response.json();\n      return result.data;\n    },\n    \n    addPhone: async (id: string, data: Omit<InsertPhone, 'entityType' | 'entityId'>): Promise<Phone> => {\n      const response = await apiRequest(\"POST\", `/api/companies/${id}/phones`, data);\n      const result = await response.json();\n      return result.data;\n    },\n  },\n  \n  // Contact endpoints\n  contacts: {\n    list: (params: ContactSearchParams = {}) => {\n      const searchParams = new URLSearchParams();\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== '') {\n          searchParams.append(key, value.toString());\n        }\n      });\n      const queryString = searchParams.toString();\n      return `/api/contacts${queryString ? `?${queryString}` : ''}`;\n    },\n    \n    get: (id: string, include?: string) => {\n      const params = include ? `?include=${include}` : '';\n      return `/api/contacts/${id}${params}`;\n    },\n    \n    create: async (data: InsertContact): Promise<Contact> => {\n      const response = await apiRequest(\"POST\", \"/api/contacts\", data);\n      const result = await response.json();\n      return result.data;\n    },\n    \n    update: async (id: string, data: Partial<InsertContact>): Promise<Contact> => {\n      const response = await apiRequest(\"PATCH\", `/api/contacts/${id}`, data);\n      const result = await response.json();\n      return result.data;\n    },\n    \n    delete: async (id: string): Promise<void> => {\n      await apiRequest(\"DELETE\", `/api/contacts/${id}`);\n    },\n    \n    addAddress: async (id: string, data: Omit<InsertAddress, 'entityType' | 'entityId'>): Promise<Address> => {\n      const response = await apiRequest(\"POST\", `/api/contacts/${id}/addresses`, data);\n      const result = await response.json();\n      return result.data;\n    },\n    \n    addEmail: async (id: string, data: Omit<InsertEmail, 'entityType' | 'entityId'>): Promise<Email> => {\n      const response = await apiRequest(\"POST\", `/api/contacts/${id}/emails`, data);\n      const result = await response.json();\n      return result.data;\n    },\n    \n    addPhone: async (id: string, data: Omit<InsertPhone, 'entityType' | 'entityId'>): Promise<Phone> => {\n      const response = await apiRequest(\"POST\", `/api/contacts/${id}/phones`, data);\n      const result = await response.json();\n      return result.data;\n    },\n  },\n  \n  // Field definitions\n  fieldDefinitions: {\n    list: (entityType?: string) => {\n      const params = entityType ? `?entityType=${entityType}` : '';\n      return `/api/field-definitions${params}`;\n    },\n  },\n};\n","size_bytes":4573},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    // Handle query keys that contain parameters\n    let url = queryKey[0] as string;\n    if (queryKey.length > 1 && queryKey[1] && typeof queryKey[1] === 'object') {\n      const params = new URLSearchParams();\n      Object.entries(queryKey[1] as Record<string, any>).forEach(([key, value]) => {\n        if (value !== undefined && value !== null && value !== '') {\n          params.append(key, value.toString());\n        }\n      });\n      const queryString = params.toString();\n      url = `${url}${queryString ? `?${queryString}` : ''}`;\n    } else if (queryKey.length > 1) {\n      // Simple path joining for non-object query keys\n      url = queryKey.join(\"/\") as string;\n    }\n    \n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2043},"client/src/lib/types.ts":{"content":"// Re-export types from shared schema for frontend use\nexport type {\n  User,\n  InsertUser,\n  Company,\n  InsertCompany,\n  Contact,\n  InsertContact,\n  Address,\n  InsertAddress,\n  Email,\n  InsertEmail,\n  Phone,\n  InsertPhone,\n  FieldDefinition,\n  InsertFieldDefinition,\n  Job,\n  InsertJob,\n  JobApplication,\n  InsertJobApplication,\n  Interview,\n  InsertInterview,\n  AnalyticsEvent,\n  InsertAnalyticsEvent,\n  ReportConfiguration,\n  InsertReportConfiguration,\n  Dashboard,\n  InsertDashboard,\n} from \"@shared/schema\";\n\n// Additional frontend-specific types\nexport interface ApiResponse<T> {\n  data: T;\n  meta?: {\n    count: number;\n    total: number;\n    hasNext: boolean;\n  };\n  links?: {\n    next: string | null;\n  };\n}\n\nexport interface SearchParams {\n  q?: string;\n  sort?: string;\n  limit?: number;\n  cursor?: string;\n  includeDeleted?: boolean;\n}\n\nexport interface CompanySearchParams extends SearchParams {\n  industry?: string;\n  companyType?: string;\n  employeeCountRange?: string;\n  recordStatus?: string;\n  country?: string;\n  include?: string;\n}\n\nexport interface ContactSearchParams extends SearchParams {\n  companyId?: string;\n  seniority?: string;\n  lifecycleStage?: string;\n  recordStatus?: string;\n  country?: string;\n  include?: string;\n}\n\nexport interface Country {\n  code: string;\n  name: string;\n  flag: string;\n}\n\nexport interface FormFieldDefinition {\n  key: string;\n  label: string;\n  type: 'text' | 'number' | 'boolean' | 'date' | 'select' | 'multi_select' | 'email' | 'url' | 'phone';\n  options?: string[];\n  isRequired?: boolean;\n}\n","size_bytes":1552},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/companies.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Plus, Search, Eye, Edit, MoreHorizontal, Filter, Building2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Separator } from \"@/components/ui/separator\";\nimport AdvancedTable from \"@/components/ui/advanced-table\";\nimport type { Company } from \"@shared/schema\";\n\nexport default function Companies() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [industryFilter, setIndustryFilter] = useState(\"all\");\n  const [sizeFilter, setSizeFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"updatedAt:desc\");\n  const [pageSize, setPageSize] = useState(25);\n  const [activeTab, setActiveTab] = useState(\"all\");\n\n  const { data: companiesData, isLoading, error } = useQuery({\n    queryKey: [\"/api/companies\", { \n      q: searchQuery || undefined, \n      industry: industryFilter !== \"all\" ? industryFilter : undefined, \n      employeeCountRange: sizeFilter !== \"all\" ? sizeFilter : undefined, \n      recordStatus: statusFilter !== \"all\" ? statusFilter : undefined, \n      sort: sortBy, \n      limit: pageSize \n    }],\n    refetchOnWindowFocus: false,\n  });\n\n  const companies: Company[] = (companiesData as any)?.data || [];\n  const meta = (companiesData as any)?.meta || { count: 0, total: 0, hasNext: false };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"prospect\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n      case \"customer\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"inactive\":\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n    }\n  };\n\n  const getCompanyInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(word => word[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const formatTimeAgo = (date: string) => {\n    const now = new Date();\n    const updated = new Date(date);\n    const diffInHours = Math.floor((now.getTime() - updated.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Just now\";\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 30) return `${diffInDays} days ago`;\n    const diffInMonths = Math.floor(diffInDays / 30);\n    return `${diffInMonths} months ago`;\n  };\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <h2 className=\"text-lg font-semibold text-destructive\">Error loading companies</h2>\n          <p className=\"text-muted-foreground\">Please try again later</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Modern 21st.dev Header */}\n      <div className=\"flex flex-col space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-green-100 rounded-none\">\n              <Building2 className=\"h-6 w-6 text-green-600\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">Companies</h1>\n              <p className=\"text-muted-foreground\">Manage and organize your company database</p>\n            </div>\n          </div>\n          <Link href=\"/companies/create\">\n            <Button className=\"bg-green-600 hover:bg-green-700\" data-testid=\"button-add-company\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Company\n            </Button>\n          </Link>\n        </div>\n        \n        {/* Modern 21st.dev Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Companies</CardTitle>\n              <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{meta.total}</div>\n              <p className=\"text-xs text-muted-foreground\">+2.5% from last month</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active</CardTitle>\n              <div className=\"h-2 w-2 bg-green-500 rounded-none\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{companies.filter(c => c.recordStatus === 'active').length}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Prospects</CardTitle>\n              <div className=\"h-2 w-2 bg-yellow-500 rounded-none\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{companies.filter(c => c.recordStatus === 'prospect').length}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Customers</CardTitle>\n              <div className=\"h-2 w-2 bg-green-500 rounded-none\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{companies.filter(c => c.recordStatus === 'customer').length}</div>\n            </CardContent>\n          </Card>\n        </div>\n        \n        {/* Enhanced Filter Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">Companies</CardTitle>\n            <CardDescription>Filter and search through your company database</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col lg:flex-row gap-4 mb-6\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                  <Input \n                    type=\"text\"\n                    placeholder=\"Search companies by name, domain, industry...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-companies\"\n                  />\n                </div>\n              </div>\n              <div className=\"flex gap-2\">\n                <Select value={industryFilter} onValueChange={setIndustryFilter}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-industry-filter\">\n                    <SelectValue placeholder=\"Industry\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Industries</SelectItem>\n                    <SelectItem value=\"technology\">Technology</SelectItem>\n                    <SelectItem value=\"finance\">Finance</SelectItem>\n                    <SelectItem value=\"healthcare\">Healthcare</SelectItem>\n                    <SelectItem value=\"retail\">Retail</SelectItem>\n                    <SelectItem value=\"manufacturing\">Manufacturing</SelectItem>\n                  </SelectContent>\n                </Select>\n                \n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-32\" data-testid=\"select-status-filter\">\n                    <SelectValue placeholder=\"Status\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Status</SelectItem>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"prospect\">Prospect</SelectItem>\n                    <SelectItem value=\"customer\">Customer</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n        \n        {/* Modern 21st.dev Tabs */}\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"all\">All Companies</TabsTrigger>\n            <TabsTrigger value=\"active\">Active</TabsTrigger>\n            <TabsTrigger value=\"prospects\">Prospects</TabsTrigger>\n            <TabsTrigger value=\"customers\">Customers</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"all\" className=\"mt-4\">\n            <AdvancedTable \n              data={companies.map(company => ({\n                id: company.id,\n                name: company.name,\n                domain: company.emailDomains?.[0] || company.websiteUrl,\n                status: company.recordStatus || 'inactive' as any,\n                industry: company.industry,\n                size: company.employeeCountRange,\n                location: 'Unknown',\n                createdAt: formatTimeAgo(company.createdAt),\n                contacts: [\n                  {\n                    name: 'Contact',\n                    email: 'contact@' + (company.emailDomains?.[0] || 'company.com'),\n                    role: 'Manager'\n                  }\n                ]\n              }))}\n              isLoading={isLoading}\n              onView={(id) => window.location.href = `/companies/${id}/overview`}\n              onEdit={(id) => window.location.href = `/companies/${id}/edit`}\n            />\n          </TabsContent>\n          \n          <TabsContent value=\"active\" className=\"mt-4\">\n            <AdvancedTable \n              data={companies.filter(c => c.recordStatus === 'active').map(company => ({\n                id: company.id,\n                name: company.name,\n                domain: company.emailDomains?.[0] || company.websiteUrl,\n                status: company.recordStatus || 'inactive' as any,\n                industry: company.industry,\n                size: company.employeeCountRange,\n                location: 'Unknown',\n                createdAt: formatTimeAgo(company.createdAt),\n                contacts: [\n                  {\n                    name: 'Contact',\n                    email: 'contact@' + (company.emailDomains?.[0] || 'company.com'),\n                    role: 'Manager'\n                  }\n                ]\n              }))}\n              isLoading={isLoading}\n              onView={(id) => window.location.href = `/companies/${id}/overview`}\n              onEdit={(id) => window.location.href = `/companies/${id}/edit`}\n            />\n          </TabsContent>\n          \n          <TabsContent value=\"prospects\" className=\"mt-4\">\n            <AdvancedTable \n              data={companies.filter(c => c.recordStatus === 'prospect').map(company => ({\n                id: company.id,\n                name: company.name,\n                domain: company.emailDomains?.[0] || company.websiteUrl,\n                status: company.recordStatus || 'inactive' as any,\n                industry: company.industry,\n                size: company.employeeCountRange,\n                location: 'Unknown',\n                createdAt: formatTimeAgo(company.createdAt),\n                contacts: [\n                  {\n                    name: 'Contact',\n                    email: 'contact@' + (company.emailDomains?.[0] || 'company.com'),\n                    role: 'Manager'\n                  }\n                ]\n              }))}\n              isLoading={isLoading}\n              onView={(id) => window.location.href = `/companies/${id}/overview`}\n              onEdit={(id) => window.location.href = `/companies/${id}/edit`}\n            />\n          </TabsContent>\n          \n          <TabsContent value=\"customers\" className=\"mt-4\">\n            <AdvancedTable \n              data={companies.filter(c => c.recordStatus === 'customer').map(company => ({\n                id: company.id,\n                name: company.name,\n                domain: company.emailDomains?.[0] || company.websiteUrl,\n                status: company.recordStatus || 'inactive' as any,\n                industry: company.industry,\n                size: company.employeeCountRange,\n                location: 'Unknown',\n                createdAt: formatTimeAgo(company.createdAt),\n                contacts: [\n                  {\n                    name: 'Contact',\n                    email: 'contact@' + (company.emailDomains?.[0] || 'company.com'),\n                    role: 'Manager'\n                  }\n                ]\n              }))}\n              isLoading={isLoading}\n              onView={(id) => window.location.href = `/companies/${id}/overview`}\n              onEdit={(id) => window.location.href = `/companies/${id}/edit`}\n            />\n          </TabsContent>\n        </Tabs>\n          </CardContent>\n        </Card>\n\n      </div>\n    </div>\n  );\n}\n\n","size_bytes":14188},"client/src/pages/company-detail.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ArrowLeft, Building, Globe, MapPin, Phone, Mail, Edit } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport type { Company, Contact } from \"@/lib/types\";\n\nexport default function CompanyDetail() {\n  const { id } = useParams();\n\n  const { data: companyData, isLoading, error } = useQuery({\n    queryKey: [\"/api/companies\", id, { include: \"addresses,emails,phones,contacts\" }],\n    enabled: !!id,\n  });\n\n  const company = companyData?.data as Company & {\n    addresses?: any[];\n    emails?: any[];\n    phones?: any[];\n    contacts?: Contact[];\n  };\n\n  const getCompanyInitials = (name: string) => {\n    return name\n      .split(\" \")\n      .map(word => word[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"prospect\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n      case \"customer\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"inactive\":\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n    }\n  };\n\n  const formatDate = (date: string) => {\n    return new Date(date).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  };\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <h2 className=\"text-lg font-semibold text-destructive\">Error loading company</h2>\n          <p className=\"text-muted-foreground\">Please try again later</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Skeleton className=\"h-6 w-6\" />\n            <Skeleton className=\"h-8 w-48\" />\n          </div>\n          <Skeleton className=\"h-10 w-24\" />\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2 space-y-6\">\n            <Skeleton className=\"h-64 w-full\" />\n          </div>\n          <div className=\"space-y-6\">\n            <Skeleton className=\"h-32 w-full\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!company) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <h2 className=\"text-lg font-semibold\">Company not found</h2>\n          <p className=\"text-muted-foreground\">The company you're looking for doesn't exist</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/companies\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-to-companies\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Companies\n            </Button>\n          </Link>\n        </div>\n        <Button data-testid=\"button-edit-company\">\n          <Edit className=\"h-4 w-4 mr-2\" />\n          Edit Company\n        </Button>\n      </div>\n\n      {/* Company Header */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-start space-x-6\">\n            <div className=\"h-20 w-20 rounded-none bg-gradient-to-br from-blue-500 to-green-600 flex items-center justify-center text-white font-bold text-2xl\">\n              {getCompanyInitials(company.name)}\n            </div>\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-company-name\">\n                  {company.name}\n                </h1>\n                <Badge className={`${getStatusColor(company.recordStatus)} border-0`}>\n                  {company.recordStatus}\n                </Badge>\n              </div>\n              {company.legalName && company.legalName !== company.name && (\n                <p className=\"text-lg text-muted-foreground mb-2\">\n                  Legal Name: {company.legalName}\n                </p>\n              )}\n              {company.description && (\n                <p className=\"text-muted-foreground mb-4\" data-testid=\"text-company-description\">\n                  {company.description}\n                </p>\n              )}\n              <div className=\"flex flex-wrap gap-4 text-sm text-muted-foreground\">\n                {company.industry && (\n                  <div className=\"flex items-center gap-1\">\n                    <Building className=\"h-4 w-4\" />\n                    <span>{company.industry}</span>\n                  </div>\n                )}\n                {company.employeeCountRange && (\n                  <div className=\"flex items-center gap-1\">\n                    <span>{company.employeeCountRange} employees</span>\n                  </div>\n                )}\n                {company.foundedYear && (\n                  <div className=\"flex items-center gap-1\">\n                    <span>Founded {company.foundedYear}</span>\n                  </div>\n                )}\n                {company.websiteUrl && (\n                  <div className=\"flex items-center gap-1\">\n                    <Globe className=\"h-4 w-4\" />\n                    <a \n                      href={company.websiteUrl} \n                      target=\"_blank\" \n                      rel=\"noopener noreferrer\"\n                      className=\"text-primary hover:underline\"\n                    >\n                      Website\n                    </a>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"contacts\">Contacts ({company.contacts?.length || 0})</TabsTrigger>\n          <TabsTrigger value=\"activity\">Activity</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Main Content */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              {/* Company Details */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Company Details</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground\">Company Type</span>\n                      <p className=\"text-sm\">{company.companyType || \"—\"}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground\">Industry</span>\n                      <p className=\"text-sm\">{company.industry || \"—\"}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground\">Employee Count</span>\n                      <p className=\"text-sm\">{company.employeeCountRange || \"—\"}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground\">Founded</span>\n                      <p className=\"text-sm\">{company.foundedYear || \"—\"}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground\">Lifecycle Stage</span>\n                      <p className=\"text-sm\">{company.lifecycleStage || \"—\"}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground\">Created</span>\n                      <p className=\"text-sm\">{formatDate(company.createdAt)}</p>\n                    </div>\n                  </div>\n\n                  {company.specialties && company.specialties.length > 0 && (\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground\">Specialties</span>\n                      <div className=\"flex flex-wrap gap-2 mt-2\">\n                        {company.specialties.map((specialty, index) => (\n                          <Badge key={index} variant=\"outline\">\n                            {specialty}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {company.tags && company.tags.length > 0 && (\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground\">Tags</span>\n                      <div className=\"flex flex-wrap gap-2 mt-2\">\n                        {company.tags.map((tag, index) => (\n                          <Badge key={index} variant=\"secondary\">\n                            {tag}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Addresses */}\n              {company.addresses && company.addresses.length > 0 && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <MapPin className=\"h-5 w-5\" />\n                      Addresses\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {company.addresses.map((address, index) => (\n                      <div key={index} className=\"border rounded-none p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"font-medium text-sm\">\n                            {address.label || address.type}\n                          </span>\n                          {address.isPrimary && (\n                            <Badge variant=\"outline\">Primary</Badge>\n                          )}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {address.street1 && <div>{address.street1}</div>}\n                          {address.street2 && <div>{address.street2}</div>}\n                          <div>\n                            {[address.city, address.state, address.postalCode]\n                              .filter(Boolean)\n                              .join(\", \")}\n                          </div>\n                          {address.countryCode && <div>{address.countryCode}</div>}\n                        </div>\n                      </div>\n                    ))}\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n\n            {/* Sidebar */}\n            <div className=\"space-y-6\">\n              {/* Contact Information */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Contact Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Emails */}\n                  {company.emails && company.emails.length > 0 && (\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground flex items-center gap-1 mb-2\">\n                        <Mail className=\"h-4 w-4\" />\n                        Email Addresses\n                      </span>\n                      {company.emails.map((email, index) => (\n                        <div key={index} className=\"flex items-center justify-between text-sm\">\n                          <div>\n                            <div className=\"font-medium\">{email.email}</div>\n                            <div className=\"text-xs text-muted-foreground\">{email.type}</div>\n                          </div>\n                          {email.isPrimary && (\n                            <Badge variant=\"outline\" className=\"text-xs\">Primary</Badge>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n\n                  {/* Phones */}\n                  {company.phones && company.phones.length > 0 && (\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground flex items-center gap-1 mb-2\">\n                        <Phone className=\"h-4 w-4\" />\n                        Phone Numbers\n                      </span>\n                      {company.phones.map((phone, index) => (\n                        <div key={index} className=\"flex items-center justify-between text-sm\">\n                          <div>\n                            <div className=\"font-medium\">{phone.phone}</div>\n                            <div className=\"text-xs text-muted-foreground\">{phone.type}</div>\n                          </div>\n                          {phone.isPrimary && (\n                            <Badge variant=\"outline\" className=\"text-xs\">Primary</Badge>\n                          )}\n                        </div>\n                      ))}\n                    </div>\n                  )}\n\n                  {/* Email Domains */}\n                  {company.emailDomains && company.emailDomains.length > 0 && (\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground mb-2 block\">\n                        Email Domains\n                      </span>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {company.emailDomains.map((domain, index) => (\n                          <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                            {domain}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Quick Stats */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Quick Stats</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Contacts</span>\n                    <span className=\"text-sm font-medium\">{company.contacts?.length || 0}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Addresses</span>\n                    <span className=\"text-sm font-medium\">{company.addresses?.length || 0}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Email Addresses</span>\n                    <span className=\"text-sm font-medium\">{company.emails?.length || 0}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Phone Numbers</span>\n                    <span className=\"text-sm font-medium\">{company.phones?.length || 0}</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"contacts\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Company Contacts</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {company.contacts && company.contacts.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {company.contacts.map((contact) => (\n                    <div key={contact.id} className=\"flex items-center space-x-4 p-4 border rounded-none\">\n                      <Avatar className=\"h-12 w-12\">\n                        <AvatarFallback className=\"text-sm font-medium\">\n                          {contact.firstName[0]}{contact.lastName[0]}\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <div className=\"font-medium\">\n                          {contact.firstName} {contact.lastName}\n                        </div>\n                        {contact.title && (\n                          <div className=\"text-sm text-muted-foreground\">{contact.title}</div>\n                        )}\n                        {contact.headline && (\n                          <div className=\"text-xs text-muted-foreground mt-1\">{contact.headline}</div>\n                        )}\n                      </div>\n                      <div className=\"text-right\">\n                        <Badge variant=\"outline\">\n                          {contact.lifecycleStage?.replace(\"_\", \" \") || \"lead\"}\n                        </Badge>\n                        <div className=\"text-xs text-muted-foreground mt-1\">\n                          {contact.seniority || \"—\"}\n                        </div>\n                      </div>\n                      <Button variant=\"outline\" size=\"sm\">\n                        View\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <p>No contacts found for this company</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"activity\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Activity Timeline</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center py-8 text-muted-foreground\">\n                <p>Activity tracking coming soon</p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":18927},"client/src/pages/contact-detail.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ArrowLeft, User, Building, Mail, Phone, MapPin, Edit, Briefcase } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport type { Contact, Company } from \"@/lib/types\";\n\nexport default function ContactDetail() {\n  const { id } = useParams();\n\n  const { data: contactData, isLoading, error } = useQuery({\n    queryKey: [\"/api/contacts\", id, { include: \"addresses,emails,phones,company\" }],\n    enabled: !!id,\n  });\n\n  const contact = contactData?.data as Contact & {\n    addresses?: any[];\n    emails?: any[];\n    phones?: any[];\n    company?: Company;\n  };\n\n  const getContactInitials = (firstName: string, lastName: string) => {\n    return `${firstName[0] || \"\"}${lastName[0] || \"\"}`.toUpperCase();\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"inactive\":\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n      case \"archived\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n    }\n  };\n\n  const getLifecycleStageColor = (stage: string) => {\n    switch (stage) {\n      case \"lead\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"marketing_qualified_lead\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"sales_qualified_lead\":\n        return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\";\n      case \"opportunity\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n      case \"customer\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n    }\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  };\n\n  const formatSeniority = (seniority: string) => {\n    return seniority.replace(\"_\", \" \").replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  const formatLifecycleStage = (stage: string) => {\n    return stage.replace(/_/g, \" \").replace(/\\b\\w/g, l => l.toUpperCase());\n  };\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <h2 className=\"text-lg font-semibold text-destructive\">Error loading contact</h2>\n          <p className=\"text-muted-foreground\">Please try again later</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Skeleton className=\"h-6 w-6\" />\n            <Skeleton className=\"h-8 w-48\" />\n          </div>\n          <Skeleton className=\"h-10 w-24\" />\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2 space-y-6\">\n            <Skeleton className=\"h-64 w-full\" />\n          </div>\n          <div className=\"space-y-6\">\n            <Skeleton className=\"h-32 w-full\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!contact) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <h2 className=\"text-lg font-semibold\">Contact not found</h2>\n          <p className=\"text-muted-foreground\">The contact you're looking for doesn't exist</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/contacts\">\n            <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-back-to-contacts\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Contacts\n            </Button>\n          </Link>\n        </div>\n        <Button data-testid=\"button-edit-contact\">\n          <Edit className=\"h-4 w-4 mr-2\" />\n          Edit Contact\n        </Button>\n      </div>\n\n      {/* Contact Header */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-start space-x-6\">\n            <Avatar className=\"h-20 w-20\">\n              <AvatarFallback className=\"text-2xl font-bold\">\n                {getContactInitials(contact.firstName, contact.lastName)}\n              </AvatarFallback>\n            </Avatar>\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <h1 className=\"text-3xl font-bold text-foreground\" data-testid=\"text-contact-name\">\n                  {contact.preferredName || `${contact.firstName} ${contact.lastName}`}\n                </h1>\n                <Badge className={`${getStatusColor(contact.recordStatus)} border-0`}>\n                  {contact.recordStatus}\n                </Badge>\n                <Badge className={`${getLifecycleStageColor(contact.lifecycleStage || \"lead\")} border-0`}>\n                  {formatLifecycleStage(contact.lifecycleStage || \"lead\")}\n                </Badge>\n              </div>\n              {contact.headline && (\n                <p className=\"text-lg text-muted-foreground mb-2\" data-testid=\"text-contact-headline\">\n                  {contact.headline}\n                </p>\n              )}\n              <div className=\"flex flex-wrap gap-4 text-sm text-muted-foreground\">\n                {contact.title && (\n                  <div className=\"flex items-center gap-1\">\n                    <Briefcase className=\"h-4 w-4\" />\n                    <span>{contact.title}</span>\n                  </div>\n                )}\n                {contact.company && (\n                  <div className=\"flex items-center gap-1\">\n                    <Building className=\"h-4 w-4\" />\n                    <Link href={`/companies/${contact.company.id}`}>\n                      <span className=\"text-primary hover:underline\">\n                        {contact.company.name}\n                      </span>\n                    </Link>\n                  </div>\n                )}\n                {contact.seniority && (\n                  <div className=\"flex items-center gap-1\">\n                    <span>{formatSeniority(contact.seniority)}</span>\n                  </div>\n                )}\n                {contact.locationLabel && (\n                  <div className=\"flex items-center gap-1\">\n                    <MapPin className=\"h-4 w-4\" />\n                    <span>{contact.locationLabel}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tabs */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"employment\">Company & Employment</TabsTrigger>\n          <TabsTrigger value=\"contact-info\">Contact Info</TabsTrigger>\n          <TabsTrigger value=\"notes\">Notes</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Main Content */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              {/* Personal Information */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <User className=\"h-5 w-5\" />\n                    Personal Information\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground\">Full Name</span>\n                      <p className=\"text-sm\">\n                        {[contact.prefix, contact.firstName, contact.middleName, contact.lastName, contact.suffix]\n                          .filter(Boolean)\n                          .join(\" \")}\n                      </p>\n                    </div>\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground\">Preferred Name</span>\n                      <p className=\"text-sm\">{contact.preferredName || \"—\"}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground\">Pronouns</span>\n                      <p className=\"text-sm\">{contact.pronouns || \"—\"}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground\">Lifecycle Stage</span>\n                      <p className=\"text-sm\">{formatLifecycleStage(contact.lifecycleStage || \"lead\")}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground\">Record Status</span>\n                      <p className=\"text-sm\">{contact.recordStatus}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground\">Created</span>\n                      <p className=\"text-sm\">{formatDate(contact.createdAt)}</p>\n                    </div>\n                  </div>\n\n                  {contact.linkedinUrl && (\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground\">LinkedIn</span>\n                      <p className=\"text-sm\">\n                        <a \n                          href={contact.linkedinUrl} \n                          target=\"_blank\" \n                          rel=\"noopener noreferrer\"\n                          className=\"text-primary hover:underline\"\n                        >\n                          View LinkedIn Profile\n                        </a>\n                      </p>\n                    </div>\n                  )}\n\n                  {contact.tags && contact.tags.length > 0 && (\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground\">Tags</span>\n                      <div className=\"flex flex-wrap gap-2 mt-2\">\n                        {contact.tags.map((tag, index) => (\n                          <Badge key={index} variant=\"secondary\">\n                            {tag}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Current Employment */}\n              {contact.company && (\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Building className=\"h-5 w-5\" />\n                      Current Employment\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <span className=\"text-sm font-medium text-muted-foreground\">Company</span>\n                        <p className=\"text-sm\">\n                          <Link href={`/companies/${contact.company.id}`}>\n                            <span className=\"text-primary hover:underline\">\n                              {contact.company.name}\n                            </span>\n                          </Link>\n                        </p>\n                      </div>\n                      <div>\n                        <span className=\"text-sm font-medium text-muted-foreground\">Job Title</span>\n                        <p className=\"text-sm\">{contact.title || \"—\"}</p>\n                      </div>\n                      <div>\n                        <span className=\"text-sm font-medium text-muted-foreground\">Department</span>\n                        <p className=\"text-sm\">{contact.department || \"—\"}</p>\n                      </div>\n                      <div>\n                        <span className=\"text-sm font-medium text-muted-foreground\">Seniority</span>\n                        <p className=\"text-sm\">{contact.seniority ? formatSeniority(contact.seniority) : \"—\"}</p>\n                      </div>\n                      <div>\n                        <span className=\"text-sm font-medium text-muted-foreground\">Employment Start</span>\n                        <p className=\"text-sm\">\n                          {contact.employmentStartDate ? formatDate(contact.employmentStartDate) : \"—\"}\n                        </p>\n                      </div>\n                      <div>\n                        <span className=\"text-sm font-medium text-muted-foreground\">Current Employee</span>\n                        <p className=\"text-sm\">\n                          {contact.isCurrentEmployee ? \"Yes\" : \"No\"}\n                          {!contact.isCurrentEmployee && contact.employmentEndDate && (\n                            <span className=\"text-muted-foreground ml-1\">\n                              (Until {formatDate(contact.employmentEndDate)})\n                            </span>\n                          )}\n                        </p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n\n            {/* Sidebar */}\n            <div className=\"space-y-6\">\n              {/* Contact Information */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Contact Information</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {/* Emails */}\n                  {contact.emails && contact.emails.length > 0 && (\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground flex items-center gap-1 mb-2\">\n                        <Mail className=\"h-4 w-4\" />\n                        Email Addresses\n                      </span>\n                      {contact.emails.map((email, index) => (\n                        <div key={index} className=\"flex items-center justify-between text-sm mb-2\">\n                          <div>\n                            <div className=\"font-medium\">{email.email}</div>\n                            <div className=\"text-xs text-muted-foreground\">{email.type}</div>\n                          </div>\n                          <div className=\"flex gap-1\">\n                            {email.isPrimary && (\n                              <Badge variant=\"outline\" className=\"text-xs\">Primary</Badge>\n                            )}\n                            {email.isVerified && (\n                              <Badge variant=\"outline\" className=\"text-xs text-green-600 border-green-600\">\n                                Verified\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n\n                  {/* Phones */}\n                  {contact.phones && contact.phones.length > 0 && (\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground flex items-center gap-1 mb-2\">\n                        <Phone className=\"h-4 w-4\" />\n                        Phone Numbers\n                      </span>\n                      {contact.phones.map((phone, index) => (\n                        <div key={index} className=\"flex items-center justify-between text-sm mb-2\">\n                          <div>\n                            <div className=\"font-medium\">{phone.phone}</div>\n                            <div className=\"text-xs text-muted-foreground\">{phone.type}</div>\n                          </div>\n                          <div className=\"flex gap-1\">\n                            {phone.isPrimary && (\n                              <Badge variant=\"outline\" className=\"text-xs\">Primary</Badge>\n                            )}\n                            {phone.isVerified && (\n                              <Badge variant=\"outline\" className=\"text-xs text-green-600 border-green-600\">\n                                Verified\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n\n                  {/* Location */}\n                  {contact.locationLabel && (\n                    <div>\n                      <span className=\"text-sm font-medium text-muted-foreground flex items-center gap-1 mb-2\">\n                        <MapPin className=\"h-4 w-4\" />\n                        Location\n                      </span>\n                      <p className=\"text-sm\">{contact.locationLabel}</p>\n                      {contact.timeZone && (\n                        <p className=\"text-xs text-muted-foreground\">Timezone: {contact.timeZone}</p>\n                      )}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Quick Stats */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Quick Stats</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Addresses</span>\n                    <span className=\"text-sm font-medium\">{contact.addresses?.length || 0}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Email Addresses</span>\n                    <span className=\"text-sm font-medium\">{contact.emails?.length || 0}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Phone Numbers</span>\n                    <span className=\"text-sm font-medium\">{contact.phones?.length || 0}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Current Employee</span>\n                    <span className=\"text-sm font-medium\">{contact.isCurrentEmployee ? \"Yes\" : \"No\"}</span>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"employment\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Employment History</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {contact.employmentHistory && Array.isArray(contact.employmentHistory) && contact.employmentHistory.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {contact.employmentHistory.map((employment: any, index: number) => (\n                    <div key={index} className=\"border rounded-none p-4\">\n                      <div className=\"flex justify-between items-start mb-2\">\n                        <div>\n                          <h4 className=\"font-medium\">{employment.title || \"Position\"}</h4>\n                          <p className=\"text-sm text-muted-foreground\">{employment.company || \"Company\"}</p>\n                        </div>\n                        <div className=\"text-right text-sm text-muted-foreground\">\n                          {employment.startDate && (\n                            <div>{formatDate(employment.startDate)}</div>\n                          )}\n                          {employment.endDate ? (\n                            <div>- {formatDate(employment.endDate)}</div>\n                          ) : (\n                            <div>- Present</div>\n                          )}\n                        </div>\n                      </div>\n                      {employment.description && (\n                        <p className=\"text-sm text-muted-foreground\">{employment.description}</p>\n                      )}\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <p>No employment history available</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"contact-info\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Addresses */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MapPin className=\"h-5 w-5\" />\n                  Addresses\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {contact.addresses && contact.addresses.length > 0 ? (\n                  <div className=\"space-y-4\">\n                    {contact.addresses.map((address, index) => (\n                      <div key={index} className=\"border rounded-none p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"font-medium text-sm\">\n                            {address.label || address.type}\n                          </span>\n                          {address.isPrimary && (\n                            <Badge variant=\"outline\">Primary</Badge>\n                          )}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">\n                          {address.street1 && <div>{address.street1}</div>}\n                          {address.street2 && <div>{address.street2}</div>}\n                          <div>\n                            {[address.city, address.state, address.postalCode]\n                              .filter(Boolean)\n                              .join(\", \")}\n                          </div>\n                          {address.countryCode && <div>{address.countryCode}</div>}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <p>No addresses on file</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Communication Preferences */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Communication</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <span className=\"text-sm font-medium text-muted-foreground\">Primary Email</span>\n                  <p className=\"text-sm\">\n                    {contact.emails?.find(e => e.isPrimary)?.email || \n                     contact.emails?.[0]?.email || \"—\"}\n                  </p>\n                </div>\n                <div>\n                  <span className=\"text-sm font-medium text-muted-foreground\">Primary Phone</span>\n                  <p className=\"text-sm\">\n                    {contact.phones?.find(p => p.isPrimary)?.phone || \n                     contact.phones?.[0]?.phone || \"—\"}\n                  </p>\n                </div>\n                <div>\n                  <span className=\"text-sm font-medium text-muted-foreground\">Preferred Contact Method</span>\n                  <p className=\"text-sm\">Email (Default)</p>\n                </div>\n                <div>\n                  <span className=\"text-sm font-medium text-muted-foreground\">Time Zone</span>\n                  <p className=\"text-sm\">{contact.timeZone || \"Not specified\"}</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"notes\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Notes</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {contact.notes ? (\n                <div className=\"prose prose-sm max-w-none\">\n                  <p className=\"whitespace-pre-wrap\">{contact.notes}</p>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <p>No notes available for this contact</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","size_bytes":25440},"client/src/pages/contacts.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus, Search, Eye, Edit, MoreHorizontal, Users } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport ContactForm from \"@/components/contact-form\";\nimport { Contact } from \"@/lib/types\";\n\nexport default function Contacts() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [seniorityFilter, setSeniorityFilter] = useState(\"all\");\n  const [lifecycleStageFilter, setLifecycleStageFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"updatedAt:desc\");\n  const [pageSize, setPageSize] = useState(25);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n\n  const { data: contactsData, isLoading, error } = useQuery({\n    queryKey: [\"/api/contacts\", { \n      q: searchQuery || undefined, \n      seniority: seniorityFilter !== \"all\" ? seniorityFilter : undefined, \n      lifecycleStage: lifecycleStageFilter !== \"all\" ? lifecycleStageFilter : undefined, \n      recordStatus: statusFilter !== \"all\" ? statusFilter : undefined, \n      sort: sortBy, \n      limit: pageSize \n    }],\n    refetchOnWindowFocus: false,\n  });\n\n  const contacts = contactsData?.data || [];\n  const meta = contactsData?.meta || { count: 0, total: 0, hasNext: false };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"inactive\":\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n      case \"archived\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n    }\n  };\n\n  const getLifecycleStageColor = (stage: string) => {\n    switch (stage) {\n      case \"lead\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"marketing_qualified_lead\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"sales_qualified_lead\":\n        return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\";\n      case \"opportunity\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n      case \"customer\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n    }\n  };\n\n  const getContactInitials = (firstName: string, lastName: string) => {\n    return `${firstName[0] || \"\"}${lastName[0] || \"\"}`.toUpperCase();\n  };\n\n  const formatTimeAgo = (date: string) => {\n    const now = new Date();\n    const updated = new Date(date);\n    const diffInHours = Math.floor((now.getTime() - updated.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Just now\";\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 30) return `${diffInDays} days ago`;\n    const diffInMonths = Math.floor(diffInDays / 30);\n    return `${diffInMonths} months ago`;\n  };\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <h2 className=\"text-lg font-semibold text-destructive\">Error loading contacts</h2>\n          <p className=\"text-muted-foreground\">Please try again later</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Modern 21st.dev Header */}\n      <div className=\"flex flex-col space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-green-100 rounded-none\">\n              <Users className=\"h-6 w-6 text-green-600\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">Contacts</h1>\n              <p className=\"text-muted-foreground\">Manage your professional network and relationships</p>\n            </div>\n          </div>\n          <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"bg-green-600 hover:bg-green-700\" data-testid=\"button-add-contact\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Contact\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\">\n              <DialogHeader>\n                <DialogTitle>Add New Contact</DialogTitle>\n              </DialogHeader>\n              <div className=\"overflow-y-auto max-h-[calc(90vh-120px)]\">\n                <ContactForm onSuccess={() => setIsCreateModalOpen(false)} />\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n        \n        {/* Modern 21st.dev Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Contacts</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{meta.total}</div>\n              <p className=\"text-xs text-muted-foreground\">+12% from last month</p>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active</CardTitle>\n              <div className=\"h-2 w-2 bg-green-500 rounded-none\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{contacts.filter(c => c.recordStatus === 'active').length}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Leads</CardTitle>\n              <div className=\"h-2 w-2 bg-green-500 rounded-none\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{contacts.filter(c => c.lifecycleStage === 'lead').length}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Customers</CardTitle>\n              <div className=\"h-2 w-2 bg-green-500 rounded-none\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{contacts.filter(c => c.lifecycleStage === 'customer').length}</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Filters */}\n        <Card className=\"p-4 space-y-4\">\n          <div className=\"flex flex-wrap items-center gap-4\">\n            <div className=\"flex-1 min-w-64\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input \n                  type=\"text\"\n                  placeholder=\"Search contacts by name, title, email, company...\"\n                  className=\"pl-10\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  data-testid=\"input-search-contacts\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <Select value={seniorityFilter} onValueChange={setSeniorityFilter}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-seniority-filter\">\n                  <SelectValue placeholder=\"All Seniority\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Seniority</SelectItem>\n                  <SelectItem value=\"intern\">Intern</SelectItem>\n                  <SelectItem value=\"entry\">Entry</SelectItem>\n                  <SelectItem value=\"mid\">Mid</SelectItem>\n                  <SelectItem value=\"senior\">Senior</SelectItem>\n                  <SelectItem value=\"lead\">Lead</SelectItem>\n                  <SelectItem value=\"principal\">Principal</SelectItem>\n                  <SelectItem value=\"manager\">Manager</SelectItem>\n                  <SelectItem value=\"director\">Director</SelectItem>\n                  <SelectItem value=\"vp\">VP</SelectItem>\n                  <SelectItem value=\"c_level\">C-Level</SelectItem>\n                  <SelectItem value=\"owner\">Owner</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              <Select value={lifecycleStageFilter} onValueChange={setLifecycleStageFilter}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-lifecycle-filter\">\n                  <SelectValue placeholder=\"All Stages\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Stages</SelectItem>\n                  <SelectItem value=\"lead\">Lead</SelectItem>\n                  <SelectItem value=\"marketing_qualified_lead\">MQL</SelectItem>\n                  <SelectItem value=\"sales_qualified_lead\">SQL</SelectItem>\n                  <SelectItem value=\"opportunity\">Opportunity</SelectItem>\n                  <SelectItem value=\"customer\">Customer</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-32\" data-testid=\"select-status-filter\">\n                  <SelectValue placeholder=\"All Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                  <SelectItem value=\"archived\">Archived</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Data Table */}\n      <Card className=\"shadow-sm\">\n        {/* Table Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-border\">\n          <div className=\"flex items-center space-x-4\">\n            <span className=\"text-sm text-muted-foreground\" data-testid=\"text-results-count\">\n              Showing <span className=\"font-medium text-foreground\">{meta.count}</span> of{\" \"}\n              <span className=\"font-medium text-foreground\">{meta.total}</span> contacts\n            </span>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-sort-by\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"lastName:asc\">Last Name A-Z</SelectItem>\n                <SelectItem value=\"lastName:desc\">Last Name Z-A</SelectItem>\n                <SelectItem value=\"firstName:asc\">First Name A-Z</SelectItem>\n                <SelectItem value=\"firstName:desc\">First Name Z-A</SelectItem>\n                <SelectItem value=\"updatedAt:desc\">Recently Updated</SelectItem>\n                <SelectItem value=\"createdAt:desc\">Recently Added</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n        \n        {/* Table Content */}\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-12\">\n                  <Checkbox data-testid=\"checkbox-select-all\" />\n                </TableHead>\n                <TableHead>Contact</TableHead>\n                <TableHead>Company</TableHead>\n                <TableHead>Title</TableHead>\n                <TableHead>Seniority</TableHead>\n                <TableHead>Stage</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Updated</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {isLoading ? (\n                Array.from({ length: 5 }).map((_, index) => (\n                  <TableRow key={index}>\n                    <TableCell><Skeleton className=\"h-4 w-4\" /></TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-3\">\n                        <Skeleton className=\"h-10 w-10 rounded-none\" />\n                        <div>\n                          <Skeleton className=\"h-4 w-32 mb-1\" />\n                          <Skeleton className=\"h-3 w-24\" />\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-4 w-28\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-4 w-16\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-6 w-16 rounded-none\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-6 w-16 rounded-none\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-8 w-24\" /></TableCell>\n                  </TableRow>\n                ))\n              ) : contacts.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={9} className=\"text-center py-8\">\n                    <div className=\"text-muted-foreground\">\n                      <p className=\"text-sm\">No contacts found</p>\n                      <p className=\"text-xs mt-1\">Try adjusting your search or filters</p>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                contacts.map((contact: Contact) => (\n                  <TableRow key={contact.id} className=\"hover:bg-muted/30 transition-colors\" data-testid={`row-contact-${contact.id}`}>\n                    <TableCell>\n                      <Checkbox data-testid={`checkbox-contact-${contact.id}`} />\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center space-x-3\">\n                        <Avatar className=\"h-10 w-10\">\n                          <AvatarFallback className=\"text-sm font-medium\">\n                            {getContactInitials(contact.firstName, contact.lastName)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <div className=\"text-sm font-medium text-foreground\" data-testid={`text-contact-name-${contact.id}`}>\n                            {contact.firstName} {contact.lastName}\n                          </div>\n                          <div className=\"text-sm text-muted-foreground\" data-testid={`text-contact-headline-${contact.id}`}>\n                            {contact.headline || \"No headline\"}\n                          </div>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm text-muted-foreground\" data-testid={`text-contact-company-${contact.id}`}>\n                        {contact.companyNameSnapshot || \"—\"}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm text-muted-foreground\" data-testid={`text-contact-title-${contact.id}`}>\n                        {contact.title || \"—\"}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm text-muted-foreground\" data-testid={`text-contact-seniority-${contact.id}`}>\n                        {contact.seniority || \"—\"}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={`${getLifecycleStageColor(contact.lifecycleStage || \"lead\")} border-0`} data-testid={`badge-contact-stage-${contact.id}`}>\n                        {contact.lifecycleStage?.replace(\"_\", \" \") || \"lead\"}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={`${getStatusColor(contact.recordStatus)} border-0`} data-testid={`badge-contact-status-${contact.id}`}>\n                        {contact.recordStatus}\n                      </Badge>\n                    </TableCell>\n                    <TableCell className=\"text-sm text-muted-foreground\" data-testid={`text-contact-updated-${contact.id}`}>\n                      {formatTimeAgo(contact.updatedAt instanceof Date ? contact.updatedAt.toISOString() : contact.updatedAt)}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex items-center justify-end space-x-2\">\n                        <Button variant=\"ghost\" size=\"icon\" title=\"View Details\" data-testid={`button-view-contact-${contact.id}`}>\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"icon\" title=\"Edit Contact\" data-testid={`button-edit-contact-${contact.id}`}>\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"icon\" title=\"More Options\" data-testid={`button-more-contact-${contact.id}`}>\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem>View Details</DropdownMenuItem>\n                            <DropdownMenuItem>Edit</DropdownMenuItem>\n                            <DropdownMenuItem>Archive</DropdownMenuItem>\n                            <DropdownMenuItem className=\"text-destructive\">Delete</DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </div>\n        \n        {/* Pagination */}\n        <div className=\"flex items-center justify-between px-4 py-3 border-t border-border\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-muted-foreground\">Show</span>\n            <Select value={pageSize.toString()} onValueChange={(value) => setPageSize(parseInt(value))}>\n              <SelectTrigger className=\"w-20\" data-testid=\"select-page-size\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"25\">25</SelectItem>\n                <SelectItem value=\"50\">50</SelectItem>\n                <SelectItem value=\"100\">100</SelectItem>\n              </SelectContent>\n            </Select>\n            <span className=\"text-sm text-muted-foreground\">per page</span>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" size=\"sm\" disabled data-testid=\"button-previous-page\">\n              Previous\n            </Button>\n            <div className=\"flex space-x-1\">\n              <Button variant=\"default\" size=\"sm\" className=\"bg-primary text-primary-foreground\">1</Button>\n              <Button variant=\"outline\" size=\"sm\">2</Button>\n              <Button variant=\"outline\" size=\"sm\">3</Button>\n              <span className=\"px-3 py-2 text-sm text-muted-foreground\">...</span>\n              <Button variant=\"outline\" size=\"sm\">10</Button>\n            </div>\n            <Button variant=\"outline\" size=\"sm\" disabled={!meta.hasNext} data-testid=\"button-next-page\">\n              Next\n            </Button>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":21679},"client/src/pages/layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { \n  Building2, \n  Users, \n  Briefcase,\n  BarChart3,\n  FileText,\n  Brain,\n  Settings,\n  Home,\n  ChevronUp,\n  User2,\n  Search,\n  Bell\n} from \"lucide-react\";\nimport { \n  Sidebar,\n  SidebarContent,\n  SidebarHeader,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarProvider,\n  SidebarTrigger,\n  SidebarInset,\n} from \"@/components/ui/sidebar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\n// Navigation items\nconst navigationItems = [\n  { name: 'Companies', href: '/companies', icon: Building2 },\n  { name: 'Contacts', href: '/contacts', icon: Users },\n  { name: 'Jobs', href: '/jobs', icon: Briefcase },\n];\n\nconst analyticsItems = [\n  { name: 'Analytics', href: '/analytics', icon: BarChart3 },\n  { name: 'Reports', href: '/reports', icon: FileText },\n  { name: 'Insights', href: '/insights', icon: Brain },\n];\n\n// App Sidebar component\nfunction AppSidebar() {\n  const [location] = useLocation();\n\n  return (\n    <Sidebar \n      collapsible=\"icon\" \n      className=\"border-r bg-white text-black\" \n      variant=\"sidebar\"\n    >\n      <SidebarHeader className=\"border-b border-gray-200\">\n        <div className=\"flex items-center gap-2 px-2 py-1\">\n          <div className=\"flex aspect-square size-8 items-center justify-center rounded-none bg-green-600 text-white font-bold text-sm\">\n            RP\n          </div>\n          <div className=\"grid flex-1 text-left text-sm leading-tight\">\n            <span className=\"truncate font-semibold text-black\">RecruitPortal</span>\n            <span className=\"truncate text-xs text-gray-600\">Enterprise</span>\n          </div>\n        </div>\n      </SidebarHeader>\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-black font-medium\">Main Navigation</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {navigationItems.map((item) => {\n                const isActive = location === item.href || (item.href !== '/companies' && location.startsWith(item.href));\n                return (\n                  <SidebarMenuItem key={item.name}>\n                    <SidebarMenuButton \n                      asChild\n                      isActive={isActive}\n                      tooltip={item.name}\n                      className=\"text-black hover:bg-green-100 hover:text-green-700 data-[active=true]:bg-green-600 data-[active=true]:text-white\"\n                    >\n                      <Link href={item.href}>\n                        <item.icon className=\"h-4 w-4\" />\n                        <span>{item.name}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n        \n        <SidebarGroup>\n          <SidebarGroupLabel className=\"text-black font-medium\">Analytics</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {analyticsItems.map((item) => {\n                const isActive = location === item.href || (item.href !== '/' && location.startsWith(item.href));\n                return (\n                  <SidebarMenuItem key={item.name}>\n                    <SidebarMenuButton \n                      asChild\n                      isActive={isActive}\n                      tooltip={item.name}\n                      className=\"text-black hover:bg-green-100 hover:text-green-700 data-[active=true]:bg-green-600 data-[active=true]:text-white\"\n                    >\n                      <Link href={item.href}>\n                        <item.icon className=\"h-4 w-4\" />\n                        <span>{item.name}</span>\n                      </Link>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                );\n              })}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n      <SidebarFooter className=\"border-t border-gray-200\">\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <SidebarMenuButton\n                  size=\"lg\"\n                  className=\"text-black hover:bg-green-100 hover:text-green-700 data-[state=open]:bg-green-600 data-[state=open]:text-white\"\n                >\n                  <Avatar className=\"h-8 w-8 rounded-none\">\n                    <AvatarImage src=\"/avatars/admin.jpg\" alt=\"Admin\" />\n                    <AvatarFallback className=\"rounded-none bg-green-600 text-white font-semibold\">AD</AvatarFallback>\n                  </Avatar>\n                  <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                    <span className=\"truncate font-semibold text-black\">Admin User</span>\n                    <span className=\"truncate text-xs text-gray-600\">admin@company.com</span>\n                  </div>\n                  <ChevronUp className=\"ml-auto size-4\" />\n                </SidebarMenuButton>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent\n                className=\"w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-none\"\n                side=\"bottom\"\n                align=\"end\"\n                sideOffset={4}\n              >\n                <DropdownMenuItem>\n                  <User2 className=\"h-4 w-4\" />\n                  Account\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  <Settings className=\"h-4 w-4\" />\n                  Settings\n                </DropdownMenuItem>\n                <DropdownMenuItem>\n                  Sign out\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  return (\n    <SidebarProvider>\n      <AppSidebar />\n      <SidebarInset>\n        {/* Top Header */}\n        <header className=\"flex h-16 shrink-0 items-center gap-2 border-b bg-white px-4\">\n          <SidebarTrigger className=\"-ml-1\" />\n          <Separator orientation=\"vertical\" className=\"mr-2 h-4\" />\n          <div className=\"flex flex-1 items-center justify-between\">\n            <div className=\"text-sm font-medium text-foreground\">\n              Welcome back to RecruitPortal\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"hidden md:flex relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input \n                  type=\"text\" \n                  placeholder=\"Search for customer, Name & ID\"\n                  className=\"w-64 pl-10 bg-gray-50 border-gray-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent rounded-none\"\n                  data-testid=\"input-global-search\"\n                />\n              </div>\n              \n              <Button variant=\"ghost\" size=\"icon\" className=\"relative hover:bg-gray-100 rounded-none\" data-testid=\"button-notifications\">\n                <Bell className=\"h-5 w-5 text-gray-600\" />\n              </Button>\n              \n              <Button variant=\"ghost\" size=\"icon\" className=\"hover:bg-gray-100 rounded-none\">\n                <Settings className=\"h-5 w-5 text-gray-600\" />\n              </Button>\n              \n              <Avatar className=\"h-8 w-8\">\n                <AvatarFallback className=\"text-sm font-medium bg-green-500 text-white\">JD</AvatarFallback>\n              </Avatar>\n            </div>\n          </div>\n        </header>\n        \n        {/* Main Content */}\n        <div className=\"flex flex-1 flex-col gap-4 p-6 bg-gray-50\">\n          {children}\n        </div>\n      </SidebarInset>\n    </SidebarProvider>\n  );\n}","size_bytes":8350},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-none\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4422},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-none border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1586},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-none\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-none bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-none border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-none text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-none px-3\",\n        lg: \"h-11 rounded-none px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1907},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-none w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2697},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-none border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1860},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-none\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-none\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-none border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10483},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-none border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1058},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-none bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-none bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-none px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4891},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-none px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-none border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-none border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-none px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-none py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-none py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7440},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-none\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-none opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3852},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-none bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-none px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-none border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-none border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-none px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-none py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-none py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7621},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-none border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1253},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-none border border-gray-300 dark:border-gray-600 bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:border-ring hover:border-gray-400 dark:hover:border-gray-500 transition-colors disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":910},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-none border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-none px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-none px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-none border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-none border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-none px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-none py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-none py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8621},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-none bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-none border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5132},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-none border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1282},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-none bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-none border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-none border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1725},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-none bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-none border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-none border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-none py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5748},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-none opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4283},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-none group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-none md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-none px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-none p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-none p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-none p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-none px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-none px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-none\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-none px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23587},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-none bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":263},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-none bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-none border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-none border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-none bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-none bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-none px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1887},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-none border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":691},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-none border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-none border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-none p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4851},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-none text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1529},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-none border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1211},"client/src/components/ui/advanced-table.tsx":{"content":"\"use client\";\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\nimport {\n  Avatar,\n  AvatarFallback,\n  AvatarImage,\n} from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport { useState } from \"react\";\nimport { Eye, Edit, MoreHorizontal, Building2 } from \"lucide-react\";\n\ntype Contact = {\n  name: string;\n  email: string;\n  avatar?: string;\n  role: string;\n};\n\ntype CompanyData = {\n  id: string;\n  name: string;\n  domain?: string;\n  status: \"active\" | \"inactive\" | \"prospect\" | \"customer\";\n  industry?: string;\n  size?: string;\n  location?: string;\n  createdAt: string;\n  contacts: Contact[];\n};\n\nconst allColumns = [\n  \"Company\",\n  \"Domain\",\n  \"Industry\", \n  \"Size\",\n  \"Location\",\n  \"Contacts\",\n  \"Status\",\n] as const;\n\ninterface AdvancedTableProps {\n  data: CompanyData[];\n  isLoading?: boolean;\n  onEdit?: (id: string) => void;\n  onView?: (id: string) => void;\n}\n\nfunction AdvancedTable({ data, isLoading = false, onEdit, onView }: AdvancedTableProps) {\n  const [visibleColumns, setVisibleColumns] = useState<string[]>([...allColumns]);\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const [industryFilter, setIndustryFilter] = useState(\"\");\n\n  const filteredData = data.filter((company) => {\n    return (\n      (!statusFilter || company.status === statusFilter) &&\n      (!industryFilter || company.industry?.toLowerCase().includes(industryFilter.toLowerCase()))\n    );\n  });\n\n  const toggleColumn = (col: string) => {\n    setVisibleColumns((prev) =>\n      prev.includes(col)\n        ? prev.filter((c) => c !== col)\n        : [...prev, col]\n    );\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-green-500 text-white\";\n      case \"inactive\":\n        return \"bg-gray-400 text-white\";\n      case \"prospect\":\n        return \"bg-green-500 text-white\";\n      case \"customer\":\n        return \"bg-green-500 text-white\";\n      default:\n        return \"bg-gray-400 text-white\";\n    }\n  };\n\n  const getCompanyInitials = (name: string) => {\n    return name.split(' ').map(word => word[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container my-10 space-y-4 p-4 border border-border rounded-none bg-background shadow-sm overflow-x-auto\">\n        <div className=\"animate-pulse\">\n          <div className=\"flex gap-4 items-center justify-between mb-6\">\n            <div className=\"flex gap-2\">\n              <div className=\"h-10 bg-gray-200 rounded w-48\"></div>\n              <div className=\"h-10 bg-gray-200 rounded w-48\"></div>\n            </div>\n            <div className=\"h-10 bg-gray-200 rounded w-24\"></div>\n          </div>\n          <div className=\"space-y-3\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"h-12 bg-gray-100 rounded-none\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container my-10 space-y-4 p-4 border border-border rounded-none bg-background shadow-sm overflow-x-auto\">\n      <div className=\"flex flex-wrap gap-4 items-center justify-between mb-6\">\n        <div className=\"flex gap-2 flex-wrap\">\n          <Input\n            placeholder=\"Filter by industry...\"\n            value={industryFilter}\n            onChange={(e) => setIndustryFilter(e.target.value)}\n            className=\"w-48\"\n            data-testid=\"input-filter-industry\"\n          />\n          <Input\n            placeholder=\"Filter by status...\"\n            value={statusFilter}\n            onChange={(e) => setStatusFilter(e.target.value)}\n            className=\"w-48\"\n            data-testid=\"input-filter-status\"\n          />\n        </div>\n\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-columns\">\n              Columns\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent className=\"w-48\">\n            {allColumns.map((col) => (\n              <DropdownMenuCheckboxItem\n                key={col}\n                checked={visibleColumns.includes(col)}\n                onCheckedChange={() => toggleColumn(col)}\n                data-testid={`checkbox-column-${col.toLowerCase().replace(' ', '-')}`}\n              >\n                {col}\n              </DropdownMenuCheckboxItem>\n            ))}\n          </DropdownMenuContent>\n        </DropdownMenu>\n      </div>\n\n      <Table className=\"w-full\">\n        <TableHeader>\n          <TableRow>\n            {visibleColumns.includes(\"Company\") && <TableHead className=\"w-[180px]\">Company</TableHead>}\n            {visibleColumns.includes(\"Domain\") && <TableHead className=\"w-[200px]\">Domain</TableHead>}\n            {visibleColumns.includes(\"Industry\") && <TableHead className=\"w-[150px]\">Industry</TableHead>}\n            {visibleColumns.includes(\"Size\") && <TableHead className=\"w-[120px]\">Size</TableHead>}\n            {visibleColumns.includes(\"Location\") && <TableHead className=\"w-[150px]\">Location</TableHead>}\n            {visibleColumns.includes(\"Contacts\") && <TableHead className=\"w-[150px]\">Contacts</TableHead>}\n            {visibleColumns.includes(\"Status\") && <TableHead className=\"w-[100px]\">Status</TableHead>}\n            <TableHead className=\"w-[100px]\">Actions</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {filteredData.length ? (\n            filteredData.map((company) => (\n              <TableRow key={company.id} data-testid={`row-company-${company.id}`}>\n                {visibleColumns.includes(\"Company\") && (\n                  <TableCell className=\"font-medium whitespace-nowrap\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"h-10 w-10 rounded-none bg-gradient-to-br from-blue-500 to-green-600 flex items-center justify-center text-white font-semibold text-sm\">\n                        {getCompanyInitials(company.name)}\n                      </div>\n                      <span data-testid={`text-company-name-${company.id}`}>{company.name}</span>\n                    </div>\n                  </TableCell>\n                )}\n                {visibleColumns.includes(\"Domain\") && (\n                  <TableCell className=\"whitespace-nowrap\">\n                    {company.domain ? (\n                      <a\n                        href={`https://${company.domain}`}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-green-500 underline hover:text-green-600\"\n                        data-testid={`link-company-domain-${company.id}`}\n                      >\n                        {company.domain}\n                      </a>\n                    ) : (\n                      <span className=\"text-muted-foreground\">—</span>\n                    )}\n                  </TableCell>\n                )}\n                {visibleColumns.includes(\"Industry\") && (\n                  <TableCell className=\"whitespace-nowrap\" data-testid={`text-company-industry-${company.id}`}>\n                    {company.industry || \"—\"}\n                  </TableCell>\n                )}\n                {visibleColumns.includes(\"Size\") && (\n                  <TableCell className=\"whitespace-nowrap\" data-testid={`text-company-size-${company.id}`}>\n                    {company.size || \"—\"}\n                  </TableCell>\n                )}\n                {visibleColumns.includes(\"Location\") && (\n                  <TableCell className=\"whitespace-nowrap\" data-testid={`text-company-location-${company.id}`}>\n                    {company.location || \"—\"}\n                  </TableCell>\n                )}\n                {visibleColumns.includes(\"Contacts\") && (\n                  <TableCell className=\"min-w-[120px]\">\n                    <div className=\"flex -space-x-2\">\n                      <TooltipProvider>\n                        {company.contacts.slice(0, 3).map((contact, idx) => (\n                          <Tooltip key={idx}>\n                            <TooltipTrigger asChild>\n                              <Avatar className=\"h-8 w-8 ring-2 ring-white hover:z-10\">\n                                <AvatarImage src={contact.avatar} alt={contact.name} />\n                                <AvatarFallback className=\"text-xs\">\n                                  {contact.name.split(' ').map(n => n[0]).join('').toUpperCase()}\n                                </AvatarFallback>\n                              </Avatar>\n                            </TooltipTrigger>\n                            <TooltipContent className=\"text-sm\">\n                              <p className=\"font-semibold\">{contact.name}</p>\n                              <p className=\"text-xs text-muted-foreground\">{contact.email}</p>\n                              <p className=\"text-xs italic\">{contact.role}</p>\n                            </TooltipContent>\n                          </Tooltip>\n                        ))}\n                        {company.contacts.length > 3 && (\n                          <div className=\"h-8 w-8 rounded-none bg-muted border-2 border-white flex items-center justify-center text-xs font-medium\">\n                            +{company.contacts.length - 3}\n                          </div>\n                        )}\n                      </TooltipProvider>\n                    </div>\n                  </TableCell>\n                )}\n                {visibleColumns.includes(\"Status\") && (\n                  <TableCell className=\"whitespace-nowrap\">\n                    <Badge\n                      className={cn(\"whitespace-nowrap\", getStatusColor(company.status))}\n                      data-testid={`badge-company-status-${company.id}`}\n                    >\n                      {company.status}\n                    </Badge>\n                  </TableCell>\n                )}\n                <TableCell className=\"whitespace-nowrap\">\n                  <div className=\"flex items-center space-x-1\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => onView?.(company.id)}\n                      data-testid={`button-view-company-${company.id}`}\n                    >\n                      <Eye className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"icon\"\n                      onClick={() => onEdit?.(company.id)}\n                      data-testid={`button-edit-company-${company.id}`}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          data-testid={`button-more-company-${company.id}`}\n                        >\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuCheckboxItem>Archive</DropdownMenuCheckboxItem>\n                        <DropdownMenuCheckboxItem>Duplicate</DropdownMenuCheckboxItem>\n                        <DropdownMenuCheckboxItem className=\"text-destructive\">Delete</DropdownMenuCheckboxItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))\n          ) : (\n            <TableRow>\n              <TableCell colSpan={visibleColumns.length + 1} className=\"text-center py-6\">\n                No companies found matching your criteria.\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n\nexport default AdvancedTable;","size_bytes":12419},"client/src/hooks/use-mobile.ts":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}","size_bytes":564},"client/src/lib/api-request.ts":{"content":"import { queryClient } from \"./queryClient\";\n\nexport async function apiRequest(\n  endpoint: string,\n  options: RequestInit = {}\n): Promise<any> {\n  const { method = \"GET\", headers = {}, body, ...rest } = options;\n\n  const config: RequestInit = {\n    method,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      ...headers,\n    },\n    ...rest,\n  };\n\n  if (body) {\n    config.body = body;\n  }\n\n  const response = await fetch(endpoint, config);\n\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({ message: \"An error occurred\" }));\n    throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);\n  }\n\n  return response.json();\n}\n\nexport const apiClient = {\n  get: (endpoint: string) => apiRequest(endpoint),\n  post: (endpoint: string, data: any) => apiRequest(endpoint, {\n    method: \"POST\",\n    body: JSON.stringify(data),\n  }),\n  patch: (endpoint: string, data: any) => apiRequest(endpoint, {\n    method: \"PATCH\", \n    body: JSON.stringify(data),\n  }),\n  put: (endpoint: string, data: any) => apiRequest(endpoint, {\n    method: \"PUT\",\n    body: JSON.stringify(data),\n  }),\n  delete: (endpoint: string) => apiRequest(endpoint, {\n    method: \"DELETE\",\n  }),\n};","size_bytes":1225},"client/src/pages/analytics.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { BarChart3, TrendingUp, Users, Briefcase, Calendar, Filter, Download, RefreshCw, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\n\ninterface MetricCardProps {\n  title: string;\n  value: string | number;\n  change?: string;\n  trend?: \"up\" | \"down\" | \"neutral\";\n  icon: React.ReactNode;\n  description?: string;\n}\n\nfunction MetricCard({ title, value, change, trend = \"neutral\", icon, description }: MetricCardProps) {\n  const getTrendColor = () => {\n    switch (trend) {\n      case \"up\":\n        return \"text-green-600 dark:text-green-400\";\n      case \"down\":\n        return \"text-red-600 dark:text-red-400\";\n      default:\n        return \"text-muted-foreground\";\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"text-sm font-medium\">{title}</CardTitle>\n        <div className=\"p-2 bg-muted rounded-none\">{icon}</div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-2xl font-bold\">{value}</div>\n        {change && (\n          <p className={`text-xs ${getTrendColor()}`}>\n            {change}\n          </p>\n        )}\n        {description && (\n          <p className=\"text-xs text-muted-foreground mt-1\">{description}</p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\ninterface ChartPlaceholderProps {\n  title: string;\n  height?: string;\n  type: \"line\" | \"bar\" | \"pie\" | \"area\";\n}\n\nfunction ChartPlaceholder({ title, height = \"h-80\", type }: ChartPlaceholderProps) {\n  const getChartIcon = () => {\n    switch (type) {\n      case \"line\":\n        return <TrendingUp className=\"h-12 w-12 text-muted-foreground\" />;\n      case \"bar\":\n        return <BarChart3 className=\"h-12 w-12 text-muted-foreground\" />;\n      case \"pie\":\n        return <div className=\"h-12 w-12 rounded-none border-4 border-muted-foreground\" />;\n      case \"area\":\n        return <BarChart3 className=\"h-12 w-12 text-muted-foreground\" />;\n    }\n  };\n\n  return (\n    <div className={`${height} flex flex-col items-center justify-center border-2 border-dashed border-muted rounded-none bg-muted/10`}>\n      {getChartIcon()}\n      <h3 className=\"mt-4 text-lg font-semibold text-muted-foreground\">{title}</h3>\n      <p className=\"text-sm text-muted-foreground mt-1\">Chart will be rendered here</p>\n    </div>\n  );\n}\n\nexport default function Analytics() {\n  const [dateRange, setDateRange] = useState(\"30d\");\n  const [selectedMetrics, setSelectedMetrics] = useState(\"recruitment\");\n  const [isCustomReportOpen, setIsCustomReportOpen] = useState(false);\n\n  // Mock data - replace with actual API calls\n  const mockMetrics = {\n    totalJobs: 156,\n    activeJobs: 89,\n    totalApplications: 2847,\n    hiredCandidates: 42,\n    avgTimeToHire: \"18 days\",\n    applicationConversion: \"12.8%\",\n  };\n\n  const { data: analyticsData, isLoading } = useQuery({\n    queryKey: [\"/api/analytics\", { range: dateRange, metrics: selectedMetrics }],\n    refetchOnWindowFocus: false,\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Modern 21st.dev Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"p-2 bg-orange-100 rounded-none\">\n            <BarChart3 className=\"h-6 w-6 text-orange-600\" />\n          </div>\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">Analytics</h1>\n            <p className=\"text-muted-foreground\">Track recruitment performance and insights</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Select value={dateRange} onValueChange={setDateRange}>\n            <SelectTrigger className=\"w-32\" data-testid=\"select-date-range\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7d\">Last 7 days</SelectItem>\n              <SelectItem value=\"30d\">Last 30 days</SelectItem>\n              <SelectItem value=\"90d\">Last 90 days</SelectItem>\n              <SelectItem value=\"1y\">Last year</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n          <Dialog open={isCustomReportOpen} onOpenChange={setIsCustomReportOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" data-testid=\"button-custom-report\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Custom Report\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-4xl\">\n              <DialogHeader>\n                <DialogTitle>Create Custom Report</DialogTitle>\n              </DialogHeader>\n              <div className=\"p-4 text-center text-muted-foreground\">\n                Custom report builder will be implemented here\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <MetricCard\n          title=\"Total Jobs Posted\"\n          value={mockMetrics.totalJobs}\n          change=\"+12% from last period\"\n          trend=\"up\"\n          icon={<Briefcase className=\"h-5 w-5 text-green-600\" />}\n          description=\"All time job postings\"\n        />\n        <MetricCard\n          title=\"Active Jobs\"\n          value={mockMetrics.activeJobs}\n          change=\"+5% from last period\"\n          trend=\"up\"\n          icon={<Calendar className=\"h-5 w-5 text-green-600\" />}\n          description=\"Currently open positions\"\n        />\n        <MetricCard\n          title=\"Total Applications\"\n          value={mockMetrics.totalApplications.toLocaleString()}\n          change=\"+8% from last period\"\n          trend=\"up\"\n          icon={<Users className=\"h-5 w-5 text-green-600\" />}\n          description=\"All time applications\"\n        />\n        <MetricCard\n          title=\"Successful Hires\"\n          value={mockMetrics.hiredCandidates}\n          change=\"+15% from last period\"\n          trend=\"up\"\n          icon={<TrendingUp className=\"h-5 w-5 text-orange-600\" />}\n          description=\"Candidates hired\"\n        />\n      </div>\n\n      {/* Secondary Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-sm\">Average Time to Hire</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{mockMetrics.avgTimeToHire}</div>\n            <div className=\"flex items-center mt-2\">\n              <Progress value={65} className=\"flex-1\" />\n              <span className=\"text-sm text-muted-foreground ml-2\">Target: 15 days</span>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-sm\">Application Conversion Rate</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{mockMetrics.applicationConversion}</div>\n            <div className=\"flex items-center mt-2\">\n              <Progress value={78} className=\"flex-1\" />\n              <span className=\"text-sm text-muted-foreground ml-2\">Industry avg: 10%</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-sm\">Top Performing Jobs</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">Senior Developer</span>\n                <Badge variant=\"secondary\">45 applications</Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">Product Manager</span>\n                <Badge variant=\"secondary\">32 applications</Badge>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm\">UX Designer</span>\n                <Badge variant=\"secondary\">28 applications</Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Charts and Analytics */}\n      <Tabs value={selectedMetrics} onValueChange={setSelectedMetrics}>\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"recruitment\" data-testid=\"tab-recruitment\">Recruitment</TabsTrigger>\n          <TabsTrigger value=\"performance\" data-testid=\"tab-performance\">Performance</TabsTrigger>\n          <TabsTrigger value=\"sources\" data-testid=\"tab-sources\">Sources</TabsTrigger>\n          <TabsTrigger value=\"trends\" data-testid=\"tab-trends\">Trends</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"recruitment\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Applications Over Time</CardTitle>\n                <CardDescription>Daily application volume</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ChartPlaceholder title=\"Application Timeline\" type=\"line\" />\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Hiring Funnel</CardTitle>\n                <CardDescription>Conversion through recruitment stages</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ChartPlaceholder title=\"Recruitment Funnel\" type=\"bar\" />\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Job Performance Comparison</CardTitle>\n              <CardDescription>Applications per job posting</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <ChartPlaceholder title=\"Job Performance\" type=\"bar\" height=\"h-96\" />\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"performance\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Time to Hire Distribution</CardTitle>\n                <CardDescription>Days from posting to hire</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ChartPlaceholder title=\"Time to Hire\" type=\"bar\" />\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Recruiter Performance</CardTitle>\n                <CardDescription>Successful hires by recruiter</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ChartPlaceholder title=\"Recruiter Metrics\" type=\"pie\" />\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"sources\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Application Sources</CardTitle>\n                <CardDescription>Where candidates find our jobs</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ChartPlaceholder title=\"Application Sources\" type=\"pie\" />\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Source Quality</CardTitle>\n                <CardDescription>Hire rate by source</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ChartPlaceholder title=\"Source Conversion\" type=\"bar\" />\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"trends\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Monthly Hiring Trends</CardTitle>\n                <CardDescription>Hires and applications by month</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ChartPlaceholder title=\"Monthly Trends\" type=\"line\" />\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>Seasonal Patterns</CardTitle>\n                <CardDescription>Application volume patterns</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ChartPlaceholder title=\"Seasonal Analysis\" type=\"area\" />\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":13447},"client/src/pages/company-create.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { ArrowLeft, Building2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport CompanyForm from \"@/components/company-form\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function CompanyCreate() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleSuccess = () => {\n    toast({\n      title: \"Success\",\n      description: \"Company created successfully!\",\n    });\n    setLocation(\"/companies\");\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Back Button */}\n      <div className=\"flex items-center space-x-4\">\n        <Link href=\"/companies\">\n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Companies\n          </Button>\n        </Link>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"p-2 bg-green-100 rounded-none\">\n            <Building2 className=\"h-6 w-6 text-green-600\" />\n          </div>\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">\n              Create New Company\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Add a new company to your recruitment database\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Form Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Company Information</CardTitle>\n          <CardDescription>\n            Fill in the company details below. All required fields are marked with an asterisk (*).\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <CompanyForm onSuccess={handleSuccess} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":1957},"client/src/pages/company-edit.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation, useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { ArrowLeft, Building2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport CompanyForm from \"@/components/company-form\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function CompanyEdit() {\n  const { id } = useParams<{ id: string }>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const { data: company, isLoading, error } = useQuery({\n    queryKey: [\"/api/companies\", id],\n    enabled: !!id,\n    refetchOnWindowFocus: false,\n  });\n\n  const handleSuccess = () => {\n    toast({\n      title: \"Success\",\n      description: \"Company updated successfully!\",\n    });\n    setLocation(\"/companies\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center space-x-4\">\n          <Skeleton className=\"h-9 w-32\" />\n          <Skeleton className=\"h-8 w-64\" />\n        </div>\n        <Card>\n          <CardHeader>\n            <Skeleton className=\"h-6 w-48\" />\n            <Skeleton className=\"h-4 w-96\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {Array.from({ length: 6 }).map((_, i) => (\n                <Skeleton key={i} className=\"h-10 w-full\" />\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (error || !company) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/companies\">\n            <Button variant=\"outline\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Companies\n            </Button>\n          </Link>\n        </div>\n        <Alert>\n          <AlertDescription>\n            Company not found. It may have been deleted or you don't have permission to view it.\n          </AlertDescription>\n        </Alert>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Back Button */}\n      <div className=\"flex items-center space-x-4\">\n        <Link href=\"/companies\">\n          <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Companies\n          </Button>\n        </Link>\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"p-2 bg-orange-100 rounded-none\">\n            <Building2 className=\"h-6 w-6 text-orange-600\" />\n          </div>\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">\n              Edit Company\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Update {company.data?.name || 'company'} information\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Form Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Company Information</CardTitle>\n          <CardDescription>\n            Update the company details below. All required fields are marked with an asterisk (*).\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <CompanyForm company={company.data} onSuccess={handleSuccess} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":3597},"client/src/pages/company-overview.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation, useParams } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { ArrowLeft, Building2, Edit, Trash2, Globe, Mail, Phone, MapPin, Users, Calendar } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiClient } from \"@/lib/api-request\";\n\nexport default function CompanyOverview() {\n  const { id } = useParams<{ id: string }>();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [showDeleteDialog, setShowDeleteDialog] = useState(false);\n  const queryClient = useQueryClient();\n\n  const { data: company, isLoading, error } = useQuery({\n    queryKey: [\"/api/companies\", id],\n    enabled: !!id,\n    refetchOnWindowFocus: false,\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async () => {\n      return await apiClient.delete(`/api/companies/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Company deleted successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/companies\"] });\n      setLocation(\"/companies\");\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete company. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDelete = () => {\n    deleteMutation.mutate();\n    setShowDeleteDialog(false);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-green-500 text-white\";\n      case \"inactive\":\n        return \"bg-gray-400 text-white\";\n      case \"prospect\":\n        return \"bg-green-500 text-white\";\n      case \"customer\":\n        return \"bg-green-500 text-white\";\n      default:\n        return \"bg-gray-400 text-white\";\n    }\n  };\n\n  const formatDate = (date: string | Date) => {\n    return new Date(date).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <Skeleton className=\"h-9 w-32\" />\n          <div className=\"flex space-x-2\">\n            <Skeleton className=\"h-9 w-20\" />\n            <Skeleton className=\"h-9 w-24\" />\n          </div>\n        </div>\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          <div className=\"lg:col-span-2 space-y-6\">\n            <Card>\n              <CardHeader>\n                <Skeleton className=\"h-6 w-48\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {Array.from({ length: 8 }).map((_, i) => (\n                    <div key={i} className=\"flex items-center space-x-3\">\n                      <Skeleton className=\"h-4 w-4\" />\n                      <Skeleton className=\"h-4 w-32\" />\n                      <Skeleton className=\"h-4 w-48\" />\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n          <div className=\"space-y-6\">\n            <Card>\n              <CardHeader>\n                <Skeleton className=\"h-5 w-32\" />\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {Array.from({ length: 4 }).map((_, i) => (\n                    <div key={i} className=\"flex justify-between\">\n                      <Skeleton className=\"h-4 w-16\" />\n                      <Skeleton className=\"h-4 w-20\" />\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !company || !company.data) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/companies\">\n            <Button variant=\"outline\" size=\"sm\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Companies\n            </Button>\n          </Link>\n        </div>\n        <Alert>\n          <AlertDescription>\n            Company not found. It may have been deleted or you don't have permission to view it.\n          </AlertDescription>\n        </Alert>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <Link href=\"/companies\">\n            <Button variant=\"outline\" size=\"sm\" data-testid=\"button-back\">\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Companies\n            </Button>\n          </Link>\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-green-100 rounded-none\">\n              <Building2 className=\"h-6 w-6 text-green-600\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">\n                {company.data.name}\n              </h1>\n              <div className=\"flex items-center space-x-2 mt-1\">\n                <Badge className={getStatusColor(company.data.recordStatus || 'inactive')}>\n                  {company.data.recordStatus || 'inactive'}\n                </Badge>\n                <span className=\"text-muted-foreground\">•</span>\n                <span className=\"text-muted-foreground\">{company.data.industry || 'No industry specified'}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-2\">\n          <Link href={`/companies/${id}/edit`}>\n            <Button variant=\"outline\" data-testid=\"button-edit\">\n              <Edit className=\"h-4 w-4 mr-2\" />\n              Edit\n            </Button>\n          </Link>\n          <Button \n            variant=\"outline\" \n            onClick={() => setShowDeleteDialog(true)}\n            className=\"text-red-600 hover:text-red-700\"\n            data-testid=\"button-delete\"\n          >\n            <Trash2 className=\"h-4 w-4 mr-2\" />\n            Delete\n          </Button>\n        </div>\n      </div>\n\n      {/* Content Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Main Content */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Company Details */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Company Details</CardTitle>\n              <CardDescription>Basic company information and contact details</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {company.data.websiteUrl && (\n                <div className=\"flex items-center space-x-3\">\n                  <Globe className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"font-medium\">Website:</span>\n                  <a \n                    href={company.data.websiteUrl} \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"text-green-600 hover:underline\"\n                  >\n                    {company.data.websiteUrl}\n                  </a>\n                </div>\n              )}\n\n              {company.data.linkedinUrl && (\n                <div className=\"flex items-center space-x-3\">\n                  <Globe className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"font-medium\">LinkedIn:</span>\n                  <a \n                    href={company.data.linkedinUrl} \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"text-green-600 hover:underline\"\n                  >\n                    {company.data.linkedinUrl}\n                  </a>\n                </div>\n              )}\n              \n              {company.data.emailDomains && company.data.emailDomains.length > 0 && (\n                <div className=\"flex items-center space-x-3\">\n                  <Mail className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"font-medium\">Email Domains:</span>\n                  <span>{company.data.emailDomains.join(\", \")}</span>\n                </div>\n              )}\n\n              {company.data.legalName && (\n                <div className=\"flex items-center space-x-3\">\n                  <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"font-medium\">Legal Name:</span>\n                  <span>{company.data.legalName}</span>\n                </div>\n              )}\n\n              {company.data.employeeCountRange && (\n                <div className=\"flex items-center space-x-3\">\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"font-medium\">Company Size:</span>\n                  <span>{company.data.employeeCountRange} employees</span>\n                </div>\n              )}\n\n              {company.data.companyType && (\n                <div className=\"flex items-center space-x-3\">\n                  <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"font-medium\">Company Type:</span>\n                  <span className=\"capitalize\">{company.data.companyType.replace('_', ' ')}</span>\n                </div>\n              )}\n\n              {company.data.foundedYear && (\n                <div className=\"flex items-center space-x-3\">\n                  <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"font-medium\">Founded:</span>\n                  <span>{company.data.foundedYear}</span>\n                </div>\n              )}\n\n              {company.data.lifecycleStage && (\n                <div className=\"flex items-center space-x-3\">\n                  <Building2 className=\"h-4 w-4 text-muted-foreground\" />\n                  <span className=\"font-medium\">Lifecycle Stage:</span>\n                  <span className=\"capitalize\">{company.data.lifecycleStage.replace('_', ' ')}</span>\n                </div>\n              )}\n\n              {company.data.specialties && company.data.specialties.length > 0 && (\n                <div className=\"flex items-start space-x-3\">\n                  <Building2 className=\"h-4 w-4 text-muted-foreground mt-0.5\" />\n                  <div>\n                    <span className=\"font-medium\">Specialties:</span>\n                    <div className=\"flex flex-wrap gap-1 mt-1\">\n                      {company.data.specialties.map((specialty, index) => (\n                        <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                          {specialty}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {company.data.tags && company.data.tags.length > 0 && (\n                <div className=\"flex items-start space-x-3\">\n                  <Building2 className=\"h-4 w-4 text-muted-foreground mt-0.5\" />\n                  <div>\n                    <span className=\"font-medium\">Tags:</span>\n                    <div className=\"flex flex-wrap gap-1 mt-1\">\n                      {company.data.tags.map((tag, index) => (\n                        <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {company.data.description && (\n                <>\n                  <Separator />\n                  <div>\n                    <h4 className=\"font-medium mb-2\">Description</h4>\n                    <p className=\"text-muted-foreground leading-relaxed\">{company.data.description}</p>\n                  </div>\n                </>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Quick Stats */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Quick Stats</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-muted-foreground\">Status</span>\n                <Badge className={getStatusColor(company.data.recordStatus || 'inactive')}>\n                  {company.data.recordStatus || 'inactive'}\n                </Badge>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-muted-foreground\">Industry</span>\n                <span className=\"font-medium\">{company.data.industry || '—'}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-muted-foreground\">Size</span>\n                <span className=\"font-medium\">{company.data.employeeCountRange || '—'}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-muted-foreground\">Type</span>\n                <span className=\"font-medium\">{company.data.companyType || '—'}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-muted-foreground\">Founded</span>\n                <span className=\"font-medium\">{company.data.foundedYear || '—'}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-muted-foreground\">Created</span>\n                <span className=\"font-medium\">{formatDate(company.data.createdAt)}</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={showDeleteDialog} onOpenChange={setShowDeleteDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Company</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to delete \"{company.data.name}\"? This action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"flex justify-end space-x-2 mt-6\">\n            <Button variant=\"outline\" onClick={() => setShowDeleteDialog(false)}>\n              Cancel\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"text-red-600 hover:text-red-700\"\n              onClick={handleDelete}\n              disabled={deleteMutation.isPending}\n            >\n              {deleteMutation.isPending ? \"Deleting...\" : \"Delete\"}\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":15355},"client/src/pages/insights.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TrendingUp, TrendingDown, Eye, Target, Users, Briefcase, Calendar, DollarSign, Clock, AlertTriangle } from \"lucide-react\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface InsightCard {\n  id: string;\n  title: string;\n  description: string;\n  type: \"trend\" | \"alert\" | \"opportunity\" | \"performance\";\n  severity: \"high\" | \"medium\" | \"low\";\n  metric: {\n    value: string | number;\n    change?: string;\n    trend: \"up\" | \"down\" | \"neutral\";\n  };\n  recommendation?: string;\n  category: string;\n  timestamp: Date;\n}\n\ninterface TrendAnalysis {\n  metric: string;\n  currentValue: number;\n  previousValue: number;\n  change: number;\n  changePercent: number;\n  trend: \"up\" | \"down\" | \"neutral\";\n  prediction?: {\n    nextPeriod: number;\n    confidence: number;\n  };\n}\n\nexport default function Insights() {\n  const [timeRange, setTimeRange] = useState(\"30d\");\n  const [category, setCategory] = useState(\"all\");\n\n  const { data: insightsData, isLoading } = useQuery({\n    queryKey: [\"/api/insights\", { range: timeRange, category }],\n    refetchOnWindowFocus: false,\n  });\n\n  // Mock insights data\n  const mockInsights: InsightCard[] = [\n    {\n      id: \"1\",\n      title: \"Application Volume Surge\",\n      description: \"Applications have increased by 45% compared to last month, primarily driven by remote job postings\",\n      type: \"trend\",\n      severity: \"high\",\n      metric: {\n        value: \"45%\",\n        change: \"+12% vs last week\",\n        trend: \"up\"\n      },\n      recommendation: \"Consider increasing recruiter capacity to handle the higher volume\",\n      category: \"applications\",\n      timestamp: new Date(\"2024-01-20T10:30:00\")\n    },\n    {\n      id: \"2\", \n      title: \"Low Conversion Rate Alert\",\n      description: \"Senior Developer position has 234 applications but only 3% moved to interview stage\",\n      type: \"alert\",\n      severity: \"high\",\n      metric: {\n        value: \"3%\",\n        change: \"-8% vs industry average\",\n        trend: \"down\"\n      },\n      recommendation: \"Review job requirements and screening criteria. Consider expanding the candidate pool.\",\n      category: \"conversion\",\n      timestamp: new Date(\"2024-01-19T14:15:00\")\n    },\n    {\n      id: \"3\",\n      title: \"Untapped Talent Source\",\n      description: \"LinkedIn referrals show highest quality but represent only 12% of applications\",\n      type: \"opportunity\", \n      severity: \"medium\",\n      metric: {\n        value: \"12%\",\n        change: \"85% hire rate\",\n        trend: \"up\"\n      },\n      recommendation: \"Invest more in LinkedIn sourcing and employee referral programs\",\n      category: \"sources\",\n      timestamp: new Date(\"2024-01-18T09:45:00\")\n    },\n    {\n      id: \"4\",\n      title: \"Time-to-Hire Improvement\",\n      description: \"Average time to hire decreased from 28 to 22 days across all positions\",\n      type: \"performance\",\n      severity: \"low\",\n      metric: {\n        value: \"22 days\",\n        change: \"-6 days improvement\",\n        trend: \"up\"\n      },\n      category: \"performance\",\n      timestamp: new Date(\"2024-01-17T16:20:00\")\n    }\n  ];\n\n  const mockTrends: TrendAnalysis[] = [\n    {\n      metric: \"Total Applications\",\n      currentValue: 847,\n      previousValue: 623,\n      change: 224,\n      changePercent: 35.9,\n      trend: \"up\",\n      prediction: {\n        nextPeriod: 920,\n        confidence: 78\n      }\n    },\n    {\n      metric: \"Conversion Rate\",\n      currentValue: 8.2,\n      previousValue: 11.5,\n      change: -3.3,\n      changePercent: -28.7,\n      trend: \"down\",\n      prediction: {\n        nextPeriod: 9.1,\n        confidence: 65\n      }\n    },\n    {\n      metric: \"Time to Hire\",\n      currentValue: 22,\n      previousValue: 28,\n      change: -6,\n      changePercent: -21.4,\n      trend: \"up\",\n      prediction: {\n        nextPeriod: 20,\n        confidence: 72\n      }\n    }\n  ];\n\n  const filteredInsights = mockInsights.filter(insight => \n    category === \"all\" || insight.category === category\n  );\n\n  const getInsightIcon = (type: string) => {\n    switch (type) {\n      case \"trend\":\n        return <TrendingUp className=\"h-4 w-4\" />;\n      case \"alert\":\n        return <AlertTriangle className=\"h-4 w-4\" />;\n      case \"opportunity\":\n        return <Target className=\"h-4 w-4\" />;\n      case \"performance\":\n        return <Eye className=\"h-4 w-4\" />;\n      default:\n        return <TrendingUp className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case \"high\":\n        return \"border-l-red-500 bg-red-50 dark:bg-red-950/20\";\n      case \"medium\":\n        return \"border-l-yellow-500 bg-yellow-50 dark:bg-yellow-950/20\";\n      case \"low\":\n        return \"border-l-green-500 bg-green-50 dark:bg-green-950/20\";\n      default:\n        return \"border-l-gray-500 bg-gray-50 dark:bg-gray-950/20\";\n    }\n  };\n\n  const getTrendIcon = (trend: string) => {\n    switch (trend) {\n      case \"up\":\n        return <TrendingUp className=\"h-3 w-3 text-green-600\" />;\n      case \"down\":\n        return <TrendingDown className=\"h-3 w-3 text-red-600\" />;\n      default:\n        return <div className=\"h-3 w-3 rounded-none bg-gray-400\" />;\n    }\n  };\n\n  const formatTimeAgo = (date: Date) => {\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Just now\";\n    if (diffInHours < 24) return `${diffInHours}h ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays}d ago`;\n    return date.toLocaleDateString();\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-semibold text-foreground\" data-testid=\"text-page-title\">Insights</h1>\n          <p className=\"text-muted-foreground\">AI-powered recruitment insights and recommendations</p>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger className=\"w-32\" data-testid=\"select-time-range\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"7d\">Last 7 days</SelectItem>\n              <SelectItem value=\"30d\">Last 30 days</SelectItem>\n              <SelectItem value=\"90d\">Last 90 days</SelectItem>\n              <SelectItem value=\"1y\">Last year</SelectItem>\n            </SelectContent>\n          </Select>\n          <Select value={category} onValueChange={setCategory}>\n            <SelectTrigger className=\"w-40\" data-testid=\"select-category\">\n              <SelectValue placeholder=\"All Categories\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Categories</SelectItem>\n              <SelectItem value=\"applications\">Applications</SelectItem>\n              <SelectItem value=\"conversion\">Conversion</SelectItem>\n              <SelectItem value=\"sources\">Sources</SelectItem>\n              <SelectItem value=\"performance\">Performance</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Key Metrics Overview */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Insights Generated</CardTitle>\n            <Eye className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{mockInsights.length}</div>\n            <p className=\"text-xs text-muted-foreground\">\n              +2 from last week\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">High Priority</CardTitle>\n            <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {mockInsights.filter(i => i.severity === 'high').length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Require immediate attention\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Opportunities</CardTitle>\n            <Target className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">\n              {mockInsights.filter(i => i.type === 'opportunity').length}\n            </div>\n            <p className=\"text-xs text-muted-foreground\">\n              Growth opportunities\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Accuracy Score</CardTitle>\n            <TrendingUp className=\"h-4 w-4 text-green-600\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">87%</div>\n            <p className=\"text-xs text-muted-foreground\">\n              Prediction accuracy\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      <Tabs defaultValue=\"insights\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"insights\" data-testid=\"tab-insights\">Smart Insights</TabsTrigger>\n          <TabsTrigger value=\"trends\" data-testid=\"tab-trends\">Trend Analysis</TabsTrigger>\n          <TabsTrigger value=\"predictions\" data-testid=\"tab-predictions\">Predictions</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"insights\" className=\"space-y-4\">\n          {filteredInsights.map((insight) => (\n            <Card key={insight.id} className={`border-l-4 ${getSeverityColor(insight.severity)}`}>\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"p-2 rounded-none bg-background\">\n                      {getInsightIcon(insight.type)}\n                    </div>\n                    <div>\n                      <CardTitle className=\"text-lg font-semibold\" data-testid={`text-insight-title-${insight.id}`}>\n                        {insight.title}\n                      </CardTitle>\n                      <div className=\"flex items-center space-x-2 mt-1\">\n                        <Badge variant=\"outline\" className=\"text-xs capitalize\">\n                          {insight.type}\n                        </Badge>\n                        <Badge \n                          variant={insight.severity === \"high\" ? \"destructive\" : insight.severity === \"medium\" ? \"default\" : \"secondary\"}\n                          className=\"text-xs capitalize\"\n                        >\n                          {insight.severity} Priority\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"flex items-center space-x-2\">\n                      {getTrendIcon(insight.metric.trend)}\n                      <span className=\"text-lg font-bold\" data-testid={`text-insight-metric-${insight.id}`}>\n                        {insight.metric.value}\n                      </span>\n                    </div>\n                    {insight.metric.change && (\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {insight.metric.change}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <CardDescription className=\"mb-4\" data-testid={`text-insight-description-${insight.id}`}>\n                  {insight.description}\n                </CardDescription>\n                {insight.recommendation && (\n                  <div className=\"bg-background/50 rounded-none p-4 border\">\n                    <h4 className=\"text-sm font-medium mb-2 flex items-center\">\n                      <Target className=\"h-4 w-4 mr-2 text-green-600\" />\n                      Recommendation\n                    </h4>\n                    <p className=\"text-sm text-muted-foreground\" data-testid={`text-insight-recommendation-${insight.id}`}>\n                      {insight.recommendation}\n                    </p>\n                  </div>\n                )}\n                <div className=\"flex items-center justify-between mt-4\">\n                  <span className=\"text-xs text-muted-foreground\">\n                    {formatTimeAgo(insight.timestamp)}\n                  </span>\n                  <Button variant=\"outline\" size=\"sm\">\n                    View Details\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </TabsContent>\n\n        <TabsContent value=\"trends\" className=\"space-y-6\">\n          <div className=\"grid gap-6\">\n            {mockTrends.map((trend) => (\n              <Card key={trend.metric}>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">{trend.metric}</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                    <div>\n                      <h4 className=\"text-sm font-medium mb-2\">Current Period</h4>\n                      <div className=\"text-2xl font-bold\">\n                        {trend.metric === \"Conversion Rate\" ? `${trend.currentValue}%` : trend.currentValue.toLocaleString()}\n                      </div>\n                    </div>\n                    \n                    <div>\n                      <h4 className=\"text-sm font-medium mb-2\">Change</h4>\n                      <div className=\"flex items-center space-x-2\">\n                        {getTrendIcon(trend.trend)}\n                        <span className={`text-lg font-semibold ${\n                          trend.trend === \"up\" ? \"text-green-600\" : trend.trend === \"down\" ? \"text-red-600\" : \"text-gray-600\"\n                        }`}>\n                          {trend.changePercent > 0 ? \"+\" : \"\"}{trend.changePercent.toFixed(1)}%\n                        </span>\n                      </div>\n                    </div>\n\n                    {trend.prediction && (\n                      <div>\n                        <h4 className=\"text-sm font-medium mb-2\">Predicted Next Period</h4>\n                        <div className=\"text-xl font-bold mb-1\">\n                          {trend.metric === \"Conversion Rate\" ? `${trend.prediction.nextPeriod}%` : trend.prediction.nextPeriod.toLocaleString()}\n                        </div>\n                        <div className=\"flex items-center\">\n                          <Progress value={trend.prediction.confidence} className=\"flex-1 mr-2\" />\n                          <span className=\"text-xs text-muted-foreground\">{trend.prediction.confidence}% confidence</span>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"predictions\" className=\"space-y-6\">\n          <div className=\"text-center py-12\">\n            <TrendingUp className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-xl font-semibold mb-2\">Predictive Analytics</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Advanced ML models will analyze your data to provide predictive insights\n            </p>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 max-w-4xl mx-auto\">\n              <Card className=\"p-6\">\n                <Calendar className=\"h-8 w-8 text-green-600 mx-auto mb-3\" />\n                <h4 className=\"font-semibold mb-2\">Hiring Demand</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Predict peak hiring periods and resource needs\n                </p>\n              </Card>\n              <Card className=\"p-6\">\n                <Users className=\"h-8 w-8 text-green-600 mx-auto mb-3\" />\n                <h4 className=\"font-semibold mb-2\">Candidate Quality</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Score and rank candidates based on success patterns\n                </p>\n              </Card>\n              <Card className=\"p-6\">\n                <DollarSign className=\"h-8 w-8 text-green-600 mx-auto mb-3\" />\n                <h4 className=\"font-semibold mb-2\">Cost Optimization</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Optimize spending across different recruitment channels\n                </p>\n              </Card>\n            </div>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":17762},"client/src/pages/jobs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus, Search, Eye, Edit, MoreHorizontal, Calendar, Users, MapPin, Clock, Briefcase } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Job } from \"@/lib/types\";\n\nexport default function Jobs() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [locationFilter, setLocationFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"updatedAt:desc\");\n  const [pageSize, setPageSize] = useState(25);\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n\n  const { data: jobsData, isLoading, error } = useQuery({\n    queryKey: [\"/api/jobs\", { \n      q: searchQuery || undefined, \n      status: statusFilter !== \"all\" ? statusFilter : undefined, \n      employmentType: typeFilter !== \"all\" ? typeFilter : undefined, \n      location: locationFilter !== \"all\" ? locationFilter : undefined, \n      sort: sortBy, \n      limit: pageSize \n    }],\n    refetchOnWindowFocus: false,\n  });\n\n  // Mock data until API is implemented\n  const jobs: Job[] = [];\n  const meta = { count: 0, total: 0, hasNext: false };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"draft\":\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n      case \"paused\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n      case \"closed\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      case \"medium\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n      case \"low\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"urgent\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200\";\n    }\n  };\n\n  const formatTimeAgo = (date: string | Date) => {\n    const now = new Date();\n    const updated = new Date(date);\n    const diffInHours = Math.floor((now.getTime() - updated.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Just now\";\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 30) return `${diffInDays} days ago`;\n    const diffInMonths = Math.floor(diffInDays / 30);\n    return `${diffInMonths} months ago`;\n  };\n\n  const formatSalaryRange = (min: number | null, max: number | null, currency: string) => {\n    if (!min && !max) return \"—\";\n    if (min && max) {\n      return `${currency} ${min.toLocaleString()} - ${max.toLocaleString()}`;\n    }\n    if (min) return `${currency} ${min.toLocaleString()}+`;\n    if (max) return `Up to ${currency} ${max.toLocaleString()}`;\n    return \"—\";\n  };\n\n  if (error) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"text-center\">\n          <h2 className=\"text-lg font-semibold text-destructive\">Error loading jobs</h2>\n          <p className=\"text-muted-foreground\">Please try again later</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Modern 21st.dev Header */}\n      <div className=\"flex flex-col space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 bg-green-100 rounded-none\">\n              <Briefcase className=\"h-6 w-6 text-green-600\" />\n            </div>\n            <div>\n              <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">Jobs</h1>\n              <p className=\"text-muted-foreground\">Manage job postings and recruitment pipeline</p>\n            </div>\n          </div>\n          <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"flex items-center space-x-2\" data-testid=\"button-add-job\">\n                <Plus className=\"h-4 w-4\" />\n                <span>Post New Job</span>\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\">\n              <DialogHeader>\n                <DialogTitle>Create New Job Posting</DialogTitle>\n              </DialogHeader>\n              <div className=\"p-4 text-center text-muted-foreground\">\n                Job creation form will be implemented here\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n          <Card className=\"p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 dark:bg-green-900 rounded-none\">\n                <Users className=\"h-5 w-5 text-green-600 dark:text-green-300\" />\n              </div>\n              <div className=\"ml-3\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Jobs</p>\n                <p className=\"text-2xl font-bold text-foreground\">{meta.total}</p>\n              </div>\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 dark:bg-green-900 rounded-none\">\n                <Clock className=\"h-5 w-5 text-green-600 dark:text-green-300\" />\n              </div>\n              <div className=\"ml-3\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Active Jobs</p>\n                <p className=\"text-2xl font-bold text-foreground\">{jobs.filter((job: Job) => job.status === 'active').length}</p>\n              </div>\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 dark:bg-green-900 rounded-none\">\n                <Calendar className=\"h-5 w-5 text-green-600 dark:text-green-300\" />\n              </div>\n              <div className=\"ml-3\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Draft Jobs</p>\n                <p className=\"text-2xl font-bold text-foreground\">{jobs.filter((job: Job) => job.status === 'draft').length}</p>\n              </div>\n            </div>\n          </Card>\n          <Card className=\"p-4\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-orange-100 dark:bg-orange-900 rounded-none\">\n                <MapPin className=\"h-5 w-5 text-orange-600 dark:text-orange-300\" />\n              </div>\n              <div className=\"ml-3\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Remote Jobs</p>\n                <p className=\"text-2xl font-bold text-foreground\">{jobs.filter((job: Job) => job.isRemote).length}</p>\n              </div>\n            </div>\n          </Card>\n        </div>\n\n        {/* Search and Filters */}\n        <Card className=\"p-4 space-y-4\">\n          <div className=\"flex flex-wrap items-center gap-4\">\n            <div className=\"flex-1 min-w-64\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground h-4 w-4\" />\n                <Input \n                  type=\"text\"\n                  placeholder=\"Search jobs by title, company, skills...\"\n                  className=\"pl-10\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  data-testid=\"input-search-jobs\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-32\" data-testid=\"select-status-filter\">\n                  <SelectValue placeholder=\"All Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"draft\">Draft</SelectItem>\n                  <SelectItem value=\"paused\">Paused</SelectItem>\n                  <SelectItem value=\"closed\">Closed</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-type-filter\">\n                  <SelectValue placeholder=\"All Types\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Types</SelectItem>\n                  <SelectItem value=\"full_time\">Full Time</SelectItem>\n                  <SelectItem value=\"part_time\">Part Time</SelectItem>\n                  <SelectItem value=\"contract\">Contract</SelectItem>\n                  <SelectItem value=\"freelance\">Freelance</SelectItem>\n                  <SelectItem value=\"internship\">Internship</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              <Select value={locationFilter} onValueChange={setLocationFilter}>\n                <SelectTrigger className=\"w-40\" data-testid=\"select-location-filter\">\n                  <SelectValue placeholder=\"All Locations\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Locations</SelectItem>\n                  <SelectItem value=\"remote\">Remote</SelectItem>\n                  <SelectItem value=\"onsite\">On-site</SelectItem>\n                  <SelectItem value=\"hybrid\">Hybrid</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </Card>\n      </div>\n\n      {/* Data Table */}\n      <Card className=\"shadow-sm\">\n        {/* Table Header */}\n        <div className=\"flex items-center justify-between p-4 border-b border-border\">\n          <div className=\"flex items-center space-x-4\">\n            <span className=\"text-sm text-muted-foreground\" data-testid=\"text-results-count\">\n              Showing <span className=\"font-medium text-foreground\">{meta.count}</span> of{\" \"}\n              <span className=\"font-medium text-foreground\">{meta.total}</span> jobs\n            </span>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-sort-by\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"title:asc\">Title A-Z</SelectItem>\n                <SelectItem value=\"title:desc\">Title Z-A</SelectItem>\n                <SelectItem value=\"updatedAt:desc\">Recently Updated</SelectItem>\n                <SelectItem value=\"createdAt:desc\">Recently Posted</SelectItem>\n                <SelectItem value=\"publishedAt:desc\">Recently Published</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n        \n        {/* Table Content */}\n        <div className=\"overflow-x-auto\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead className=\"w-12\">\n                  <Checkbox data-testid=\"checkbox-select-all\" />\n                </TableHead>\n                <TableHead>Job Details</TableHead>\n                <TableHead>Company</TableHead>\n                <TableHead>Type & Location</TableHead>\n                <TableHead>Salary</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Priority</TableHead>\n                <TableHead>Applications</TableHead>\n                <TableHead>Updated</TableHead>\n                <TableHead className=\"text-right\">Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {isLoading ? (\n                Array.from({ length: 5 }).map((_, index) => (\n                  <TableRow key={index}>\n                    <TableCell><Skeleton className=\"h-4 w-4\" /></TableCell>\n                    <TableCell>\n                      <div>\n                        <Skeleton className=\"h-4 w-40 mb-1\" />\n                        <Skeleton className=\"h-3 w-32\" />\n                      </div>\n                    </TableCell>\n                    <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-4 w-32\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-6 w-16 rounded-none\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-6 w-16 rounded-none\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-4 w-16\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-4 w-20\" /></TableCell>\n                    <TableCell><Skeleton className=\"h-8 w-24\" /></TableCell>\n                  </TableRow>\n                ))\n              ) : jobs.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={10} className=\"text-center py-8\">\n                    <div className=\"text-muted-foreground\">\n                      <p className=\"text-sm\">No jobs found</p>\n                      <p className=\"text-xs mt-1\">Try adjusting your search or filters</p>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                jobs.map((job: Job) => (\n                  <TableRow key={job.id} className=\"hover:bg-muted/30 transition-colors\" data-testid={`row-job-${job.id}`}>\n                    <TableCell>\n                      <Checkbox data-testid={`checkbox-job-${job.id}`} />\n                    </TableCell>\n                    <TableCell>\n                      <div>\n                        <div className=\"text-sm font-medium text-foreground\" data-testid={`text-job-title-${job.id}`}>\n                          {job.title}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\" data-testid={`text-job-department-${job.id}`}>\n                          {job.department || \"No department\"}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm text-muted-foreground\" data-testid={`text-job-company-${job.id}`}>\n                        {job.companyId || \"—\"}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex flex-col\">\n                        <span className=\"text-sm text-foreground capitalize\" data-testid={`text-job-type-${job.id}`}>\n                          {job.employmentType?.replace('_', ' ') || \"—\"}\n                        </span>\n                        <div className=\"flex items-center text-xs text-muted-foreground\">\n                          {job.isRemote && <MapPin className=\"h-3 w-3 mr-1\" />}\n                          <span data-testid={`text-job-location-${job.id}`}>\n                            {job.isRemote ? \"Remote\" : job.location || \"—\"}\n                          </span>\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm text-muted-foreground\" data-testid={`text-job-salary-${job.id}`}>\n                        {formatSalaryRange(job.salaryMin, job.salaryMax, job.salaryCurrency || \"USD\")}\n                      </span>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={`${getStatusColor(job.status)} border-0`} data-testid={`badge-job-status-${job.id}`}>\n                        {job.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <Badge className={`${getPriorityColor(job.priority)} border-0`} data-testid={`badge-job-priority-${job.id}`}>\n                        {job.priority}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>\n                      <span className=\"text-sm text-muted-foreground\" data-testid={`text-job-applications-${job.id}`}>\n                        0 / {job.openings}\n                      </span>\n                    </TableCell>\n                    <TableCell className=\"text-sm text-muted-foreground\" data-testid={`text-job-updated-${job.id}`}>\n                      {formatTimeAgo(job.updatedAt instanceof Date ? job.updatedAt.toISOString() : job.updatedAt)}\n                    </TableCell>\n                    <TableCell className=\"text-right\">\n                      <div className=\"flex items-center justify-end space-x-2\">\n                        <Button variant=\"ghost\" size=\"icon\" title=\"View Details\" data-testid={`button-view-job-${job.id}`}>\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                        <Button variant=\"ghost\" size=\"icon\" title=\"Edit Job\" data-testid={`button-edit-job-${job.id}`}>\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"icon\" title=\"More Options\" data-testid={`button-more-job-${job.id}`}>\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem>View Applications</DropdownMenuItem>\n                            <DropdownMenuItem>Duplicate</DropdownMenuItem>\n                            <DropdownMenuItem>Archive</DropdownMenuItem>\n                            <DropdownMenuItem className=\"text-destructive\">Delete</DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </div>\n        \n        {/* Pagination */}\n        <div className=\"flex items-center justify-between px-4 py-3 border-t border-border\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-muted-foreground\">Show</span>\n            <Select value={pageSize.toString()} onValueChange={(value) => setPageSize(parseInt(value))}>\n              <SelectTrigger className=\"w-20\" data-testid=\"select-page-size\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"25\">25</SelectItem>\n                <SelectItem value=\"50\">50</SelectItem>\n                <SelectItem value=\"100\">100</SelectItem>\n              </SelectContent>\n            </Select>\n            <span className=\"text-sm text-muted-foreground\">per page</span>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Button variant=\"outline\" size=\"sm\" disabled data-testid=\"button-previous-page\">\n              Previous\n            </Button>\n            <div className=\"flex space-x-1\">\n              <Button variant=\"default\" size=\"sm\" className=\"bg-primary text-primary-foreground\">1</Button>\n              <Button variant=\"outline\" size=\"sm\">2</Button>\n              <Button variant=\"outline\" size=\"sm\">3</Button>\n              <span className=\"px-3 py-2 text-sm text-muted-foreground\">...</span>\n              <Button variant=\"outline\" size=\"sm\">10</Button>\n            </div>\n            <Button variant=\"outline\" size=\"sm\" disabled={!meta.hasNext} data-testid=\"button-next-page\">\n              Next\n            </Button>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}","size_bytes":21523},"client/src/pages/reports.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus, Download, Filter, Calendar, BarChart3, FileText, Eye, Edit, Trash2, Share, Clock } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface ReportTemplate {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  type: string;\n  chartType?: string;\n  isPublic: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n  metrics: string[];\n  filters: Record<string, any>;\n}\n\nexport default function Reports() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [selectedTab, setSelectedTab] = useState(\"templates\");\n  \n  // Report Builder State\n  const [reportName, setReportName] = useState(\"\");\n  const [reportDescription, setReportDescription] = useState(\"\");\n  const [reportCategory, setReportCategory] = useState(\"recruitment\");\n  const [reportType, setReportType] = useState(\"chart\");\n  const [chartType, setChartType] = useState(\"bar\");\n  const [dataSource, setDataSource] = useState(\"jobs\");\n  const [selectedMetrics, setSelectedMetrics] = useState<string[]>([]);\n  const [selectedFilters, setSelectedFilters] = useState<string[]>([]);\n\n  const { data: reportsData, isLoading } = useQuery({\n    queryKey: [\"/api/reports\", { q: searchQuery, category: categoryFilter, type: typeFilter }],\n    refetchOnWindowFocus: false,\n  });\n\n  // Mock data for report templates\n  const mockReports: ReportTemplate[] = [\n    {\n      id: \"1\",\n      name: \"Monthly Hiring Report\",\n      description: \"Comprehensive monthly hiring statistics and trends\",\n      category: \"recruitment\",\n      type: \"chart\",\n      chartType: \"line\",\n      isPublic: true,\n      createdAt: new Date(\"2024-01-15\"),\n      updatedAt: new Date(\"2024-01-20\"),\n      metrics: [\"hires\", \"applications\", \"conversion_rate\"],\n      filters: { dateRange: \"month\", status: \"all\" }\n    },\n    {\n      id: \"2\", \n      name: \"Job Performance Analysis\",\n      description: \"Analyze job posting performance and application rates\",\n      category: \"performance\",\n      type: \"table\",\n      isPublic: false,\n      createdAt: new Date(\"2024-01-10\"),\n      updatedAt: new Date(\"2024-01-18\"),\n      metrics: [\"applications_per_job\", \"time_to_fill\", \"source_quality\"],\n      filters: { jobStatus: \"active\", period: \"90d\" }\n    },\n    {\n      id: \"3\",\n      name: \"Recruiter Performance Dashboard\", \n      description: \"Track individual recruiter performance metrics\",\n      category: \"performance\",\n      type: \"chart\",\n      chartType: \"pie\",\n      isPublic: true,\n      createdAt: new Date(\"2024-01-05\"),\n      updatedAt: new Date(\"2024-01-15\"),\n      metrics: [\"successful_hires\", \"pipeline_conversion\", \"avg_time_to_hire\"],\n      filters: { recruiter: \"all\", period: \"quarter\" }\n    }\n  ];\n\n  const availableMetrics = {\n    jobs: [\n      { key: \"total_jobs\", label: \"Total Jobs Posted\" },\n      { key: \"active_jobs\", label: \"Active Jobs\" },\n      { key: \"applications_per_job\", label: \"Applications per Job\" },\n      { key: \"time_to_fill\", label: \"Time to Fill\" },\n      { key: \"job_views\", label: \"Job Views\" }\n    ],\n    applications: [\n      { key: \"total_applications\", label: \"Total Applications\" },\n      { key: \"conversion_rate\", label: \"Conversion Rate\" },\n      { key: \"application_sources\", label: \"Application Sources\" },\n      { key: \"rejection_reasons\", label: \"Rejection Reasons\" }\n    ],\n    recruitment: [\n      { key: \"successful_hires\", label: \"Successful Hires\" },\n      { key: \"pipeline_conversion\", label: \"Pipeline Conversion\" },\n      { key: \"avg_time_to_hire\", label: \"Average Time to Hire\" },\n      { key: \"cost_per_hire\", label: \"Cost per Hire\" }\n    ]\n  };\n\n  const availableFilters = [\n    { key: \"dateRange\", label: \"Date Range\" },\n    { key: \"jobStatus\", label: \"Job Status\" },\n    { key: \"department\", label: \"Department\" },\n    { key: \"location\", label: \"Location\" },\n    { key: \"employmentType\", label: \"Employment Type\" },\n    { key: \"experienceLevel\", label: \"Experience Level\" },\n    { key: \"recruiter\", label: \"Recruiter\" },\n    { key: \"source\", label: \"Application Source\" }\n  ];\n\n  const reports = mockReports.filter(report => {\n    const matchesSearch = !searchQuery || \n      report.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      report.description.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesCategory = categoryFilter === \"all\" || report.category === categoryFilter;\n    const matchesType = typeFilter === \"all\" || report.type === typeFilter;\n    \n    return matchesSearch && matchesCategory && matchesType;\n  });\n\n  const handleCreateReport = () => {\n    console.log(\"Creating report:\", {\n      name: reportName,\n      description: reportDescription,\n      category: reportCategory,\n      type: reportType,\n      chartType,\n      dataSource,\n      metrics: selectedMetrics,\n      filters: selectedFilters\n    });\n    setIsCreateModalOpen(false);\n    // Reset form\n    setReportName(\"\");\n    setReportDescription(\"\");\n    setSelectedMetrics([]);\n    setSelectedFilters([]);\n  };\n\n  const formatTimeAgo = (date: Date) => {\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Just now\";\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 30) return `${diffInDays} days ago`;\n    const diffInMonths = Math.floor(diffInDays / 30);\n    return `${diffInMonths} months ago`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Modern 21st.dev Header */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"p-2 bg-pink-100 rounded-none\">\n            <FileText className=\"h-6 w-6 text-pink-600\" />\n          </div>\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-page-title\">Reports</h1>\n            <p className=\"text-muted-foreground\">Create, manage, and generate custom reports</p>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-3\">\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export All\n          </Button>\n          <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" data-testid=\"button-create-report\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Create Report\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-hidden\">\n              <DialogHeader>\n                <DialogTitle>Create Custom Report</DialogTitle>\n                <DialogDescription>\n                  Build a custom report with your preferred metrics, filters, and visualization\n                </DialogDescription>\n              </DialogHeader>\n              <div className=\"overflow-y-auto max-h-[calc(90vh-120px)] space-y-6 p-1\">\n                {/* Basic Information */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Basic Information</h3>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"reportName\">Report Name</Label>\n                      <Input\n                        id=\"reportName\"\n                        value={reportName}\n                        onChange={(e) => setReportName(e.target.value)}\n                        placeholder=\"Enter report name\"\n                        data-testid=\"input-report-name\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"reportCategory\">Category</Label>\n                      <Select value={reportCategory} onValueChange={setReportCategory}>\n                        <SelectTrigger data-testid=\"select-report-category\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"recruitment\">Recruitment</SelectItem>\n                          <SelectItem value=\"performance\">Performance</SelectItem>\n                          <SelectItem value=\"analytics\">Analytics</SelectItem>\n                          <SelectItem value=\"financial\">Financial</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"reportDescription\">Description</Label>\n                    <Textarea\n                      id=\"reportDescription\"\n                      value={reportDescription}\n                      onChange={(e) => setReportDescription(e.target.value)}\n                      placeholder=\"Describe what this report will show\"\n                      data-testid=\"textarea-report-description\"\n                    />\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Report Configuration */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Report Configuration</h3>\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"reportType\">Report Type</Label>\n                      <Select value={reportType} onValueChange={setReportType}>\n                        <SelectTrigger data-testid=\"select-report-type\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"chart\">Chart</SelectItem>\n                          <SelectItem value=\"table\">Table</SelectItem>\n                          <SelectItem value=\"summary\">Summary</SelectItem>\n                          <SelectItem value=\"dashboard\">Dashboard</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    {reportType === \"chart\" && (\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"chartType\">Chart Type</Label>\n                        <Select value={chartType} onValueChange={setChartType}>\n                          <SelectTrigger data-testid=\"select-chart-type\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"bar\">Bar Chart</SelectItem>\n                            <SelectItem value=\"line\">Line Chart</SelectItem>\n                            <SelectItem value=\"pie\">Pie Chart</SelectItem>\n                            <SelectItem value=\"area\">Area Chart</SelectItem>\n                            <SelectItem value=\"scatter\">Scatter Plot</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                    )}\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"dataSource\">Data Source</Label>\n                      <Select value={dataSource} onValueChange={setDataSource}>\n                        <SelectTrigger data-testid=\"select-data-source\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"jobs\">Jobs</SelectItem>\n                          <SelectItem value=\"applications\">Applications</SelectItem>\n                          <SelectItem value=\"contacts\">Contacts</SelectItem>\n                          <SelectItem value=\"companies\">Companies</SelectItem>\n                          <SelectItem value=\"interviews\">Interviews</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Metrics Selection */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Metrics to Include</h3>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    {availableMetrics[dataSource as keyof typeof availableMetrics]?.map((metric) => (\n                      <div key={metric.key} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={metric.key}\n                          checked={selectedMetrics.includes(metric.key)}\n                          onCheckedChange={(checked) => {\n                            if (checked) {\n                              setSelectedMetrics([...selectedMetrics, metric.key]);\n                            } else {\n                              setSelectedMetrics(selectedMetrics.filter(m => m !== metric.key));\n                            }\n                          }}\n                          data-testid={`checkbox-metric-${metric.key}`}\n                        />\n                        <Label htmlFor={metric.key} className=\"text-sm font-normal\">\n                          {metric.label}\n                        </Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Filters Selection */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-medium\">Available Filters</h3>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    {availableFilters.map((filter) => (\n                      <div key={filter.key} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={filter.key}\n                          checked={selectedFilters.includes(filter.key)}\n                          onCheckedChange={(checked) => {\n                            if (checked) {\n                              setSelectedFilters([...selectedFilters, filter.key]);\n                            } else {\n                              setSelectedFilters(selectedFilters.filter(f => f !== filter.key));\n                            }\n                          }}\n                          data-testid={`checkbox-filter-${filter.key}`}\n                        />\n                        <Label htmlFor={filter.key} className=\"text-sm font-normal\">\n                          {filter.label}\n                        </Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-3 pt-4\">\n                  <Button variant=\"outline\" onClick={() => setIsCreateModalOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button onClick={handleCreateReport} data-testid=\"button-save-report\">\n                    Create Report\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Filters and Search */}\n      <Card className=\"p-4\">\n        <div className=\"flex flex-wrap items-center gap-4\">\n          <div className=\"flex-1 min-w-64\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search reports by name or description...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"w-full\"\n              data-testid=\"input-search-reports\"\n            />\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n              <SelectTrigger className=\"w-40\" data-testid=\"select-category-filter\">\n                <SelectValue placeholder=\"All Categories\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                <SelectItem value=\"recruitment\">Recruitment</SelectItem>\n                <SelectItem value=\"performance\">Performance</SelectItem>\n                <SelectItem value=\"analytics\">Analytics</SelectItem>\n                <SelectItem value=\"financial\">Financial</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-32\" data-testid=\"select-type-filter\">\n                <SelectValue placeholder=\"All Types\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"chart\">Charts</SelectItem>\n                <SelectItem value=\"table\">Tables</SelectItem>\n                <SelectItem value=\"summary\">Summary</SelectItem>\n                <SelectItem value=\"dashboard\">Dashboards</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </Card>\n\n      {/* Report Templates */}\n      <Tabs value={selectedTab} onValueChange={setSelectedTab}>\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"templates\" data-testid=\"tab-templates\">Templates</TabsTrigger>\n          <TabsTrigger value=\"custom\" data-testid=\"tab-custom\">My Reports</TabsTrigger>\n          <TabsTrigger value=\"scheduled\" data-testid=\"tab-scheduled\">Scheduled</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"templates\" className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {reports.map((report) => (\n              <Card key={report.id} className=\"hover:shadow-md transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      <div className=\"p-2 bg-primary/10 rounded-none\">\n                        {report.type === \"chart\" ? (\n                          <BarChart3 className=\"h-4 w-4 text-primary\" />\n                        ) : (\n                          <FileText className=\"h-4 w-4 text-primary\" />\n                        )}\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-sm font-medium\" data-testid={`text-report-name-${report.id}`}>\n                          {report.name}\n                        </CardTitle>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            {report.category}\n                          </Badge>\n                          {report.isPublic && (\n                            <Badge variant=\"outline\" className=\"text-xs\">\n                              Public\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <CardDescription className=\"text-xs mb-3\" data-testid={`text-report-description-${report.id}`}>\n                    {report.description}\n                  </CardDescription>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center text-xs text-muted-foreground\">\n                      <Clock className=\"h-3 w-3 mr-1\" />\n                      <span>{formatTimeAgo(report.updatedAt)}</span>\n                    </div>\n                    <div className=\"flex items-center space-x-1\">\n                      <Button variant=\"ghost\" size=\"sm\" title=\"View Report\" data-testid={`button-view-report-${report.id}`}>\n                        <Eye className=\"h-3 w-3\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" title=\"Edit Report\" data-testid={`button-edit-report-${report.id}`}>\n                        <Edit className=\"h-3 w-3\" />\n                      </Button>\n                      <Button variant=\"ghost\" size=\"sm\" title=\"Share Report\" data-testid={`button-share-report-${report.id}`}>\n                        <Share className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"custom\" className=\"space-y-4\">\n          <div className=\"text-center py-12\">\n            <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Custom Reports Yet</h3>\n            <p className=\"text-muted-foreground mb-4\">Create your first custom report to get started</p>\n            <Button onClick={() => setIsCreateModalOpen(true)}>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Create Report\n            </Button>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"scheduled\" className=\"space-y-4\">\n          <div className=\"text-center py-12\">\n            <Calendar className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No Scheduled Reports</h3>\n            <p className=\"text-muted-foreground\">Set up automated report generation and delivery</p>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":22514}},"version":1}